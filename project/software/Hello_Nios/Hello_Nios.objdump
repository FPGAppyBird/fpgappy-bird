
Hello_Nios.elf:     file format elf32-littlenios2
Hello_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000567c memsz 0x0000567c flags r-x
    LOAD off    0x0000669c vaddr 0x0004569c paddr 0x00047108 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008b74 vaddr 0x00048b74 paddr 0x00048b74 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005498  000401bc  000401bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00045654  00045654  00006654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0004569c  00047108  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00048b74  00048b74  00008b74  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00048cc4  00048cc4  00008108  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008108  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a08  00000000  00000000  00008130  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000161a3  00000000  00000000  00008b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005e89  00000000  00000000  0001ecdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006705  00000000  00000000  00024b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001508  00000000  00000000  0002b26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021c4  00000000  00000000  0002c774  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004730  00000000  00000000  0002e938  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00033068  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005c0  00000000  00000000  00033098  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00035b9a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00035b9d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00035ba7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00035ba8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00035ba9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00035bad  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00035bb1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00035bb5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00035bbe  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00035bc7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  00035bd0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00035bdc  2**0
                  CONTENTS, READONLY
 29 .jdi          0000421a  00000000  00000000  00035bfd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003388a  00000000  00000000  00039e17  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401bc l    d  .text	00000000 .text
00045654 l    d  .rodata	00000000 .rodata
0004569c l    d  .rwdata	00000000 .rwdata
00048b74 l    d  .bss	00000000 .bss
00048cc4 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Hello_Nios_bsp//obj/HAL/src/crt0.o
00040204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0004569c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00041df8 l     F .text	00000008 __fp_lock
00041e00 l     F .text	00000008 __fp_unlock
00041e14 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00042e64 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00042f90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000430b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000430dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000431dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000432d0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000433b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043590 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000470f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000437ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043934 l     F .text	00000038 alt_dev_reg
00046070 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043c10 l     F .text	00000204 altera_avalon_jtag_uart_irq
00043e14 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000445b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044a64 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044b9c l     F .text	00000050 alt_get_errno
00044bec l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00042d58 g     F .text	00000054 _isatty_r
000434d8 g     F .text	00000078 alt_main
0004031c g     F .text	000000a8 _puts_r
00048bc4 g     O .bss	00000100 alt_irq
00042dac g     F .text	0000005c _lseek_r
00047108 g       *ABS*	00000000 __flash_rwdata_start
00048cc4 g       *ABS*	00000000 __alt_heap_start
00042ae8 g     F .text	0000005c __sseek
00042148 g     F .text	00000010 __sinit
00041fb0 g     F .text	00000068 __sfmoreglue
00043570 g     F .text	00000020 __malloc_unlock
000412f8 g     F .text	0000015c memmove
00042130 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042d00 g     F .text	00000058 _fstat_r
00048b80 g     O .bss	00000004 errno
00042a64 g     F .text	00000008 __seofread
00048b88 g     O .bss	00000004 alt_argv
0004f0d0 g       *ABS*	00000000 _gp
00045ef0 g     O .rwdata	00000180 alt_fd_list
00044fcc g     F .text	00000090 alt_find_dev
000411c0 g     F .text	00000138 memcpy
00041e08 g     F .text	0000000c _cleanup_r
00044b24 g     F .text	00000078 alt_io_redirect
00045654 g       *ABS*	00000000 __DTOR_END__
000403c4 g     F .text	00000014 puts
00044010 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00042f80 g     F .text	00000008 .hidden __udivsi3
0004322c g     F .text	000000a4 isatty
00045224 g     F .text	0000008c alt_icache_flush
00048b7c g     O .bss	00000004 __malloc_top_pad
00040470 g     F .text	000004c0 __sfvwrite_r
000419bc g     F .text	00000054 _sbrk_r
00042e08 g     F .text	0000005c _read_r
000470f0 g     O .rwdata	00000004 alt_max_fd
00042bfc g     F .text	000000f0 _fclose_r
00041dc8 g     F .text	00000030 fflush
00048b78 g     O .bss	00000004 __malloc_max_sbrked_mem
00043404 g     F .text	000000d4 lseek
000470d0 g     O .rwdata	00000004 _global_impure_ptr
00041454 g     F .text	00000568 _realloc_r
00048cc4 g       *ABS*	00000000 __bss_end
00044974 g     F .text	000000f0 alt_iic_isr_register
00044ea8 g     F .text	00000104 alt_tick
00042168 g     F .text	00000018 __fp_lock_all
00044928 g     F .text	0000004c alt_ic_irq_enabled
00044e10 g     F .text	00000098 alt_alarm_stop
00048b90 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000d0 alt_irq_handler
00045ec8 g     O .rwdata	00000028 alt_dev_null
00044574 g     F .text	00000044 alt_dcache_flush_all
00047108 g       *ABS*	00000000 __ram_rwdata_end
000470e8 g     O .rwdata	00000008 alt_dev_list
0004383c g     F .text	000000f8 write
0004569c g       *ABS*	00000000 __ram_rodata_end
0004312c g     F .text	000000b0 fstat
00042f88 g     F .text	00000008 .hidden __umodsi3
00048cc4 g       *ABS*	00000000 end
00043b4c g     F .text	000000c4 altera_avalon_jtag_uart_init
00045654 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
0004421c g     F .text	00000218 altera_avalon_jtag_uart_write
00042158 g     F .text	00000004 __sfp_lock_acquire
000410d8 g     F .text	000000e8 memchr
000422bc g     F .text	000002f0 _free_r
0004548c g     F .text	00000194 __call_exitprocs
000470d8 g     O .rwdata	00000004 __malloc_sbrk_base
000401bc g     F .text	0000004c _start
00048b94 g     O .bss	00000004 _alt_tick_rate
00048b98 g     O .bss	00000004 _alt_nticks
000435e0 g     F .text	000000fc read
000439a0 g     F .text	00000048 alt_sys_init
00045378 g     F .text	00000114 __register_exitproc
00043ebc g     F .text	00000068 altera_avalon_jtag_uart_close
0004569c g       *ABS*	00000000 __ram_rwdata_start
00045654 g       *ABS*	00000000 __ram_rodata_start
00048b9c g     O .bss	00000028 __malloc_current_mallinfo
000439e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00045170 g     F .text	000000b4 alt_get_fd
00042ba8 g     F .text	00000054 _close_r
000452fc g     F .text	0000007c memcmp
00043aa8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00048cc4 g       *ABS*	00000000 __alt_stack_base
00043af8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041a10 g     F .text	00000154 __swsetup_r
00042018 g     F .text	00000118 __sfp
00045ac0 g     O .rwdata	00000408 __malloc_av_
00042164 g     F .text	00000004 __sinit_lock_release
00042a10 g     F .text	00000054 __sread
0004505c g     F .text	00000114 alt_find_file
00044608 g     F .text	000000a4 alt_dev_llist_insert
00043550 g     F .text	00000020 __malloc_lock
0004373c g     F .text	000000b0 sbrk
00041d6c g     F .text	0000005c _fflush_r
00048b74 g       *ABS*	00000000 __bss_start
000428ec g     F .text	00000124 memset
00040208 g     F .text	00000114 main
00048b8c g     O .bss	00000004 alt_envp
00048b74 g     O .bss	00000004 __malloc_max_total_mem
00043a48 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00042b44 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
00042cec g     F .text	00000014 fclose
00040930 g     F .text	000007a8 _malloc_r
000470f4 g     O .rwdata	00000004 alt_errno
000425ac g     F .text	000000c4 _fwalk
00042ed0 g     F .text	00000054 .hidden __divsi3
00042198 g     F .text	00000124 _malloc_trim_r
00045654 g       *ABS*	00000000 __CTOR_END__
00045654 g       *ABS*	00000000 __flash_rodata_start
00045654 g       *ABS*	00000000 __DTOR_LIST__
0004396c g     F .text	00000034 alt_irq_init
000436dc g     F .text	00000060 alt_release_fd
000452b0 g     F .text	00000014 atexit
00042b4c g     F .text	0000005c _write_r
000470d4 g     O .rwdata	00000004 _impure_ptr
00048b84 g     O .bss	00000004 alt_argc
00041b64 g     F .text	00000208 __sflush_r
00044708 g     F .text	0000005c _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00042180 g     F .text	00000018 __fp_unlock_all
000470e0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00044794 g     F .text	00000050 alt_ic_isr_register
00047108 g       *ABS*	00000000 _edata
00048cc4 g       *ABS*	00000000 _end
000401bc g       *ABS*	00000000 __ram_exceptions_end
00043f24 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00044884 g     F .text	000000a4 alt_ic_irq_disable
00042a6c g     F .text	0000007c __swrite
000470dc g     O .rwdata	00000004 __malloc_trim_threshold
00044fac g     F .text	00000020 altera_nios2_qsys_irq_init
000452c4 g     F .text	00000038 exit
00042670 g     F .text	000000c4 _fwalk_reent
00042f24 g     F .text	0000005c .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004215c g     F .text	00000004 __sfp_lock_release
00045620 g     F .text	00000034 _exit
00044434 g     F .text	00000140 alt_alarm_start
00042734 g     F .text	000001b8 __smakebuf_r
000403d8 g     F .text	00000098 strlen
00044cb8 g     F .text	00000158 open
00044764 g     F .text	00000030 alt_icache_flush_all
000470fc g     O .rwdata	00000004 alt_priority_mask
000447e4 g     F .text	000000a0 alt_ic_irq_enable
00047100 g     O .rwdata	00000008 alt_alarm_list
000446ac g     F .text	0000005c _do_ctors
00042fe0 g     F .text	000000d0 close
00043334 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00042160 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffce004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406f14 	ori	at,at,444
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00800174 	movhi	r2,5
   40130:	10a2f104 	addi	r2,r2,-29756
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	00800174 	movhi	r2,5
   40148:	10a2f104 	addi	r2,r2,-29756
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	21000104 	addi	r4,r4,4
   40158:	1105883a 	add	r2,r2,r4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffce11c>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffce110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	e037883a 	mov	sp,fp
   401ac:	dfc00117 	ldw	ra,4(sp)
   401b0:	df000017 	ldw	fp,0(sp)
   401b4:	dec00204 	addi	sp,sp,8
   401b8:	f800283a 	ret

Disassembly of section .text:

000401bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   401bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   401c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   401c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   401c8:	00bffd16 	blt	zero,r2,401c0 <__alt_data_end+0xfffce1c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401cc:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401d0:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   401d4:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   401d8:	d6bc3414 	ori	gp,gp,61648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401dc:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   401e0:	10a2dd14 	ori	r2,r2,35700

    movhi r3, %hi(__bss_end)
   401e4:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   401e8:	18e33114 	ori	r3,r3,36036

    beq r2, r3, 1f
   401ec:	10c00326 	beq	r2,r3,401fc <_start+0x40>

0:
    stw zero, (r2)
   401f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401f8:	10fffd36 	bltu	r2,r3,401f0 <__alt_data_end+0xfffce1f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401fc:	00433340 	call	43334 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40200:	00434d80 	call	434d8 <alt_main>

00040204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40204:	003fff06 	br	40204 <__alt_data_end+0xfffce204>

00040208 <main>:
 */
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
int main()
{
   40208:	defffa04 	addi	sp,sp,-24
   4020c:	dfc00515 	stw	ra,20(sp)
   40210:	df000415 	stw	fp,16(sp)
   40214:	df000404 	addi	fp,sp,16
printf("Hello from Nips II!\n");
   40218:	01000134 	movhi	r4,4
   4021c:	21159504 	addi	r4,r4,22100
   40220:	00403c40 	call	403c4 <puts>
int count = 0;
   40224:	e03ffc15 	stw	zero,-16(fp)
int state = 0;
   40228:	e03ffd15 	stw	zero,-12(fp)
int lastmax = 0;
   4022c:	e03ffe15 	stw	zero,-8(fp)
int delay;
while(1) {
IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1 << count);
   40230:	00c00044 	movi	r3,1
   40234:	e0bffc17 	ldw	r2,-16(fp)
   40238:	1886983a 	sll	r3,r3,r2
   4023c:	00800234 	movhi	r2,8
   40240:	10840004 	addi	r2,r2,4096
   40244:	10c00035 	stwio	r3,0(r2)
delay = 0;
   40248:	e03fff15 	stw	zero,-4(fp)
while(delay < 250000 ) {
   4024c:	00000306 	br	4025c <main+0x54>
delay++;
   40250:	e0bfff17 	ldw	r2,-4(fp)
   40254:	10800044 	addi	r2,r2,1
   40258:	e0bfff15 	stw	r2,-4(fp)
int lastmax = 0;
int delay;
while(1) {
IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 1 << count);
delay = 0;
while(delay < 250000 ) {
   4025c:	e0ffff17 	ldw	r3,-4(fp)
   40260:	00800134 	movhi	r2,4
   40264:	10b423c4 	addi	r2,r2,-12145
   40268:	10fff90e 	bge	r2,r3,40250 <__alt_data_end+0xfffce250>
delay++;
}
if(state == 0){
   4026c:	e0bffd17 	ldw	r2,-12(fp)
   40270:	10000c1e 	bne	r2,zero,402a4 <main+0x9c>
	count = (count+1) % 8;
   40274:	e0bffc17 	ldw	r2,-16(fp)
   40278:	10c00044 	addi	r3,r2,1
   4027c:	00a00034 	movhi	r2,32768
   40280:	108001c4 	addi	r2,r2,7
   40284:	1884703a 	and	r2,r3,r2
   40288:	1000040e 	bge	r2,zero,4029c <main+0x94>
   4028c:	10bfffc4 	addi	r2,r2,-1
   40290:	00fffe04 	movi	r3,-8
   40294:	10c4b03a 	or	r2,r2,r3
   40298:	10800044 	addi	r2,r2,1
   4029c:	e0bffc15 	stw	r2,-16(fp)
   402a0:	00000b06 	br	402d0 <main+0xc8>
}else{
	count = (count-1) % 8;
   402a4:	e0bffc17 	ldw	r2,-16(fp)
   402a8:	10ffffc4 	addi	r3,r2,-1
   402ac:	00a00034 	movhi	r2,32768
   402b0:	108001c4 	addi	r2,r2,7
   402b4:	1884703a 	and	r2,r3,r2
   402b8:	1000040e 	bge	r2,zero,402cc <main+0xc4>
   402bc:	10bfffc4 	addi	r2,r2,-1
   402c0:	00fffe04 	movi	r3,-8
   402c4:	10c4b03a 	or	r2,r2,r3
   402c8:	10800044 	addi	r2,r2,1
   402cc:	e0bffc15 	stw	r2,-16(fp)
}

if(count > lastmax && state == 0){
   402d0:	e0bffc17 	ldw	r2,-16(fp)
   402d4:	e0fffe17 	ldw	r3,-8(fp)
   402d8:	1880060e 	bge	r3,r2,402f4 <main+0xec>
   402dc:	e0bffd17 	ldw	r2,-12(fp)
   402e0:	1000041e 	bne	r2,zero,402f4 <main+0xec>
	state = 1;
   402e4:	00800044 	movi	r2,1
   402e8:	e0bffd15 	stw	r2,-12(fp)
	lastmax = count;
   402ec:	e0bffc17 	ldw	r2,-16(fp)
   402f0:	e0bffe15 	stw	r2,-8(fp)
}

if(count == 7){
   402f4:	e0bffc17 	ldw	r2,-16(fp)
   402f8:	108001d8 	cmpnei	r2,r2,7
   402fc:	1000031e 	bne	r2,zero,4030c <main+0x104>
	state = 1;
   40300:	00800044 	movi	r2,1
   40304:	e0bffd15 	stw	r2,-12(fp)
	lastmax = 0;
   40308:	e03ffe15 	stw	zero,-8(fp)
}

if(count == 0){
   4030c:	e0bffc17 	ldw	r2,-16(fp)
   40310:	1000011e 	bne	r2,zero,40318 <main+0x110>
	state = 0;
   40314:	e03ffd15 	stw	zero,-12(fp)
}
}
   40318:	003fc506 	br	40230 <__alt_data_end+0xfffce230>

0004031c <_puts_r>:
   4031c:	defff604 	addi	sp,sp,-40
   40320:	dc000715 	stw	r16,28(sp)
   40324:	2021883a 	mov	r16,r4
   40328:	2809883a 	mov	r4,r5
   4032c:	dc400815 	stw	r17,32(sp)
   40330:	dfc00915 	stw	ra,36(sp)
   40334:	2823883a 	mov	r17,r5
   40338:	00403d80 	call	403d8 <strlen>
   4033c:	81400217 	ldw	r5,8(r16)
   40340:	11000044 	addi	r4,r2,1
   40344:	d8800115 	stw	r2,4(sp)
   40348:	00800134 	movhi	r2,4
   4034c:	2980030b 	ldhu	r6,12(r5)
   40350:	10959a04 	addi	r2,r2,22120
   40354:	d8800215 	stw	r2,8(sp)
   40358:	00800044 	movi	r2,1
   4035c:	d8800315 	stw	r2,12(sp)
   40360:	00800084 	movi	r2,2
   40364:	d8800515 	stw	r2,20(sp)
   40368:	dc400015 	stw	r17,0(sp)
   4036c:	d9000615 	stw	r4,24(sp)
   40370:	dec00415 	stw	sp,16(sp)
   40374:	3088000c 	andi	r2,r6,8192
   40378:	1000061e 	bne	r2,zero,40394 <_puts_r+0x78>
   4037c:	29001917 	ldw	r4,100(r5)
   40380:	00b7ffc4 	movi	r2,-8193
   40384:	31880014 	ori	r6,r6,8192
   40388:	2084703a 	and	r2,r4,r2
   4038c:	2980030d 	sth	r6,12(r5)
   40390:	28801915 	stw	r2,100(r5)
   40394:	8009883a 	mov	r4,r16
   40398:	d9800404 	addi	r6,sp,16
   4039c:	00404700 	call	40470 <__sfvwrite_r>
   403a0:	1000061e 	bne	r2,zero,403bc <_puts_r+0xa0>
   403a4:	00800284 	movi	r2,10
   403a8:	dfc00917 	ldw	ra,36(sp)
   403ac:	dc400817 	ldw	r17,32(sp)
   403b0:	dc000717 	ldw	r16,28(sp)
   403b4:	dec00a04 	addi	sp,sp,40
   403b8:	f800283a 	ret
   403bc:	00bfffc4 	movi	r2,-1
   403c0:	003ff906 	br	403a8 <__alt_data_end+0xfffce3a8>

000403c4 <puts>:
   403c4:	00800134 	movhi	r2,4
   403c8:	109c3504 	addi	r2,r2,28884
   403cc:	200b883a 	mov	r5,r4
   403d0:	11000017 	ldw	r4,0(r2)
   403d4:	004031c1 	jmpi	4031c <_puts_r>

000403d8 <strlen>:
   403d8:	208000cc 	andi	r2,r4,3
   403dc:	10002026 	beq	r2,zero,40460 <strlen+0x88>
   403e0:	20800007 	ldb	r2,0(r4)
   403e4:	10002026 	beq	r2,zero,40468 <strlen+0x90>
   403e8:	2005883a 	mov	r2,r4
   403ec:	00000206 	br	403f8 <strlen+0x20>
   403f0:	10c00007 	ldb	r3,0(r2)
   403f4:	18001826 	beq	r3,zero,40458 <strlen+0x80>
   403f8:	10800044 	addi	r2,r2,1
   403fc:	10c000cc 	andi	r3,r2,3
   40400:	183ffb1e 	bne	r3,zero,403f0 <__alt_data_end+0xfffce3f0>
   40404:	10c00017 	ldw	r3,0(r2)
   40408:	01ffbff4 	movhi	r7,65279
   4040c:	39ffbfc4 	addi	r7,r7,-257
   40410:	00ca303a 	nor	r5,zero,r3
   40414:	01a02074 	movhi	r6,32897
   40418:	19c7883a 	add	r3,r3,r7
   4041c:	31a02004 	addi	r6,r6,-32640
   40420:	1946703a 	and	r3,r3,r5
   40424:	1986703a 	and	r3,r3,r6
   40428:	1800091e 	bne	r3,zero,40450 <strlen+0x78>
   4042c:	10800104 	addi	r2,r2,4
   40430:	10c00017 	ldw	r3,0(r2)
   40434:	19cb883a 	add	r5,r3,r7
   40438:	00c6303a 	nor	r3,zero,r3
   4043c:	28c6703a 	and	r3,r5,r3
   40440:	1986703a 	and	r3,r3,r6
   40444:	183ff926 	beq	r3,zero,4042c <__alt_data_end+0xfffce42c>
   40448:	00000106 	br	40450 <strlen+0x78>
   4044c:	10800044 	addi	r2,r2,1
   40450:	10c00007 	ldb	r3,0(r2)
   40454:	183ffd1e 	bne	r3,zero,4044c <__alt_data_end+0xfffce44c>
   40458:	1105c83a 	sub	r2,r2,r4
   4045c:	f800283a 	ret
   40460:	2005883a 	mov	r2,r4
   40464:	003fe706 	br	40404 <__alt_data_end+0xfffce404>
   40468:	0005883a 	mov	r2,zero
   4046c:	f800283a 	ret

00040470 <__sfvwrite_r>:
   40470:	30800217 	ldw	r2,8(r6)
   40474:	10006726 	beq	r2,zero,40614 <__sfvwrite_r+0x1a4>
   40478:	defff404 	addi	sp,sp,-48
   4047c:	dd000615 	stw	r20,24(sp)
   40480:	2029883a 	mov	r20,r4
   40484:	2900030b 	ldhu	r4,12(r5)
   40488:	ddc00915 	stw	r23,36(sp)
   4048c:	dc000215 	stw	r16,8(sp)
   40490:	dfc00b15 	stw	ra,44(sp)
   40494:	df000a15 	stw	fp,40(sp)
   40498:	dd800815 	stw	r22,32(sp)
   4049c:	dd400715 	stw	r21,28(sp)
   404a0:	dcc00515 	stw	r19,20(sp)
   404a4:	dc800415 	stw	r18,16(sp)
   404a8:	dc400315 	stw	r17,12(sp)
   404ac:	2080020c 	andi	r2,r4,8
   404b0:	2821883a 	mov	r16,r5
   404b4:	302f883a 	mov	r23,r6
   404b8:	10002726 	beq	r2,zero,40558 <__sfvwrite_r+0xe8>
   404bc:	28800417 	ldw	r2,16(r5)
   404c0:	10002526 	beq	r2,zero,40558 <__sfvwrite_r+0xe8>
   404c4:	2080008c 	andi	r2,r4,2
   404c8:	bc400017 	ldw	r17,0(r23)
   404cc:	10002a26 	beq	r2,zero,40578 <__sfvwrite_r+0x108>
   404d0:	05600034 	movhi	r21,32768
   404d4:	0027883a 	mov	r19,zero
   404d8:	0025883a 	mov	r18,zero
   404dc:	ad7f0004 	addi	r21,r21,-1024
   404e0:	980d883a 	mov	r6,r19
   404e4:	a009883a 	mov	r4,r20
   404e8:	90004626 	beq	r18,zero,40604 <__sfvwrite_r+0x194>
   404ec:	900f883a 	mov	r7,r18
   404f0:	81400717 	ldw	r5,28(r16)
   404f4:	ac80022e 	bgeu	r21,r18,40500 <__sfvwrite_r+0x90>
   404f8:	01e00034 	movhi	r7,32768
   404fc:	39ff0004 	addi	r7,r7,-1024
   40500:	80800917 	ldw	r2,36(r16)
   40504:	103ee83a 	callr	r2
   40508:	0080520e 	bge	zero,r2,40654 <__sfvwrite_r+0x1e4>
   4050c:	b8c00217 	ldw	r3,8(r23)
   40510:	98a7883a 	add	r19,r19,r2
   40514:	90a5c83a 	sub	r18,r18,r2
   40518:	1885c83a 	sub	r2,r3,r2
   4051c:	b8800215 	stw	r2,8(r23)
   40520:	103fef1e 	bne	r2,zero,404e0 <__alt_data_end+0xfffce4e0>
   40524:	0005883a 	mov	r2,zero
   40528:	dfc00b17 	ldw	ra,44(sp)
   4052c:	df000a17 	ldw	fp,40(sp)
   40530:	ddc00917 	ldw	r23,36(sp)
   40534:	dd800817 	ldw	r22,32(sp)
   40538:	dd400717 	ldw	r21,28(sp)
   4053c:	dd000617 	ldw	r20,24(sp)
   40540:	dcc00517 	ldw	r19,20(sp)
   40544:	dc800417 	ldw	r18,16(sp)
   40548:	dc400317 	ldw	r17,12(sp)
   4054c:	dc000217 	ldw	r16,8(sp)
   40550:	dec00c04 	addi	sp,sp,48
   40554:	f800283a 	ret
   40558:	a009883a 	mov	r4,r20
   4055c:	800b883a 	mov	r5,r16
   40560:	0041a100 	call	41a10 <__swsetup_r>
   40564:	1000ec1e 	bne	r2,zero,40918 <__sfvwrite_r+0x4a8>
   40568:	8100030b 	ldhu	r4,12(r16)
   4056c:	bc400017 	ldw	r17,0(r23)
   40570:	2080008c 	andi	r2,r4,2
   40574:	103fd61e 	bne	r2,zero,404d0 <__alt_data_end+0xfffce4d0>
   40578:	2080004c 	andi	r2,r4,1
   4057c:	10003a1e 	bne	r2,zero,40668 <__sfvwrite_r+0x1f8>
   40580:	0039883a 	mov	fp,zero
   40584:	0025883a 	mov	r18,zero
   40588:	90001a26 	beq	r18,zero,405f4 <__sfvwrite_r+0x184>
   4058c:	2080800c 	andi	r2,r4,512
   40590:	85800217 	ldw	r22,8(r16)
   40594:	10007626 	beq	r2,zero,40770 <__sfvwrite_r+0x300>
   40598:	b027883a 	mov	r19,r22
   4059c:	95809436 	bltu	r18,r22,407f0 <__sfvwrite_r+0x380>
   405a0:	2081200c 	andi	r2,r4,1152
   405a4:	10009f1e 	bne	r2,zero,40824 <__sfvwrite_r+0x3b4>
   405a8:	81000017 	ldw	r4,0(r16)
   405ac:	e00b883a 	mov	r5,fp
   405b0:	980d883a 	mov	r6,r19
   405b4:	00412f80 	call	412f8 <memmove>
   405b8:	81000217 	ldw	r4,8(r16)
   405bc:	81400017 	ldw	r5,0(r16)
   405c0:	9005883a 	mov	r2,r18
   405c4:	2587c83a 	sub	r3,r4,r22
   405c8:	2ce7883a 	add	r19,r5,r19
   405cc:	80c00215 	stw	r3,8(r16)
   405d0:	84c00015 	stw	r19,0(r16)
   405d4:	b8c00217 	ldw	r3,8(r23)
   405d8:	e0b9883a 	add	fp,fp,r2
   405dc:	90a5c83a 	sub	r18,r18,r2
   405e0:	1885c83a 	sub	r2,r3,r2
   405e4:	b8800215 	stw	r2,8(r23)
   405e8:	103fce26 	beq	r2,zero,40524 <__alt_data_end+0xfffce524>
   405ec:	8100030b 	ldhu	r4,12(r16)
   405f0:	903fe61e 	bne	r18,zero,4058c <__alt_data_end+0xfffce58c>
   405f4:	8f000017 	ldw	fp,0(r17)
   405f8:	8c800117 	ldw	r18,4(r17)
   405fc:	8c400204 	addi	r17,r17,8
   40600:	003fe106 	br	40588 <__alt_data_end+0xfffce588>
   40604:	8cc00017 	ldw	r19,0(r17)
   40608:	8c800117 	ldw	r18,4(r17)
   4060c:	8c400204 	addi	r17,r17,8
   40610:	003fb306 	br	404e0 <__alt_data_end+0xfffce4e0>
   40614:	0005883a 	mov	r2,zero
   40618:	f800283a 	ret
   4061c:	00a00034 	movhi	r2,32768
   40620:	10bfffc4 	addi	r2,r2,-1
   40624:	9009883a 	mov	r4,r18
   40628:	1480012e 	bgeu	r2,r18,40630 <__sfvwrite_r+0x1c0>
   4062c:	1009883a 	mov	r4,r2
   40630:	980b883a 	mov	r5,r19
   40634:	0042ed00 	call	42ed0 <__divsi3>
   40638:	81400717 	ldw	r5,28(r16)
   4063c:	80c00917 	ldw	r3,36(r16)
   40640:	988f383a 	mul	r7,r19,r2
   40644:	a009883a 	mov	r4,r20
   40648:	e00d883a 	mov	r6,fp
   4064c:	183ee83a 	callr	r3
   40650:	00bfe016 	blt	zero,r2,405d4 <__alt_data_end+0xfffce5d4>
   40654:	8080030b 	ldhu	r2,12(r16)
   40658:	10801014 	ori	r2,r2,64
   4065c:	8080030d 	sth	r2,12(r16)
   40660:	00bfffc4 	movi	r2,-1
   40664:	003fb006 	br	40528 <__alt_data_end+0xfffce528>
   40668:	0027883a 	mov	r19,zero
   4066c:	0011883a 	mov	r8,zero
   40670:	0039883a 	mov	fp,zero
   40674:	0025883a 	mov	r18,zero
   40678:	90001f26 	beq	r18,zero,406f8 <__sfvwrite_r+0x288>
   4067c:	40006026 	beq	r8,zero,40800 <__sfvwrite_r+0x390>
   40680:	982b883a 	mov	r21,r19
   40684:	94c0012e 	bgeu	r18,r19,4068c <__sfvwrite_r+0x21c>
   40688:	902b883a 	mov	r21,r18
   4068c:	81000017 	ldw	r4,0(r16)
   40690:	80800417 	ldw	r2,16(r16)
   40694:	a82d883a 	mov	r22,r21
   40698:	81800217 	ldw	r6,8(r16)
   4069c:	81c00517 	ldw	r7,20(r16)
   406a0:	1100022e 	bgeu	r2,r4,406ac <__sfvwrite_r+0x23c>
   406a4:	31c7883a 	add	r3,r6,r7
   406a8:	1d401816 	blt	r3,r21,4070c <__sfvwrite_r+0x29c>
   406ac:	a9c04416 	blt	r21,r7,407c0 <__sfvwrite_r+0x350>
   406b0:	80800917 	ldw	r2,36(r16)
   406b4:	81400717 	ldw	r5,28(r16)
   406b8:	a009883a 	mov	r4,r20
   406bc:	da000115 	stw	r8,4(sp)
   406c0:	e00d883a 	mov	r6,fp
   406c4:	103ee83a 	callr	r2
   406c8:	102d883a 	mov	r22,r2
   406cc:	da000117 	ldw	r8,4(sp)
   406d0:	00bfe00e 	bge	zero,r2,40654 <__alt_data_end+0xfffce654>
   406d4:	9da7c83a 	sub	r19,r19,r22
   406d8:	98001f26 	beq	r19,zero,40758 <__sfvwrite_r+0x2e8>
   406dc:	b8800217 	ldw	r2,8(r23)
   406e0:	e5b9883a 	add	fp,fp,r22
   406e4:	95a5c83a 	sub	r18,r18,r22
   406e8:	15adc83a 	sub	r22,r2,r22
   406ec:	bd800215 	stw	r22,8(r23)
   406f0:	b03f8c26 	beq	r22,zero,40524 <__alt_data_end+0xfffce524>
   406f4:	903fe11e 	bne	r18,zero,4067c <__alt_data_end+0xfffce67c>
   406f8:	8f000017 	ldw	fp,0(r17)
   406fc:	8c800117 	ldw	r18,4(r17)
   40700:	0011883a 	mov	r8,zero
   40704:	8c400204 	addi	r17,r17,8
   40708:	003fdb06 	br	40678 <__alt_data_end+0xfffce678>
   4070c:	180d883a 	mov	r6,r3
   40710:	e00b883a 	mov	r5,fp
   40714:	da000115 	stw	r8,4(sp)
   40718:	d8c00015 	stw	r3,0(sp)
   4071c:	00412f80 	call	412f8 <memmove>
   40720:	d8c00017 	ldw	r3,0(sp)
   40724:	80800017 	ldw	r2,0(r16)
   40728:	a009883a 	mov	r4,r20
   4072c:	800b883a 	mov	r5,r16
   40730:	10c5883a 	add	r2,r2,r3
   40734:	80800015 	stw	r2,0(r16)
   40738:	d8c00015 	stw	r3,0(sp)
   4073c:	0041d6c0 	call	41d6c <_fflush_r>
   40740:	d8c00017 	ldw	r3,0(sp)
   40744:	da000117 	ldw	r8,4(sp)
   40748:	103fc21e 	bne	r2,zero,40654 <__alt_data_end+0xfffce654>
   4074c:	182d883a 	mov	r22,r3
   40750:	9da7c83a 	sub	r19,r19,r22
   40754:	983fe11e 	bne	r19,zero,406dc <__alt_data_end+0xfffce6dc>
   40758:	a009883a 	mov	r4,r20
   4075c:	800b883a 	mov	r5,r16
   40760:	0041d6c0 	call	41d6c <_fflush_r>
   40764:	103fbb1e 	bne	r2,zero,40654 <__alt_data_end+0xfffce654>
   40768:	0011883a 	mov	r8,zero
   4076c:	003fdb06 	br	406dc <__alt_data_end+0xfffce6dc>
   40770:	81000017 	ldw	r4,0(r16)
   40774:	80800417 	ldw	r2,16(r16)
   40778:	11000236 	bltu	r2,r4,40784 <__sfvwrite_r+0x314>
   4077c:	84c00517 	ldw	r19,20(r16)
   40780:	94ffa62e 	bgeu	r18,r19,4061c <__alt_data_end+0xfffce61c>
   40784:	9027883a 	mov	r19,r18
   40788:	b480012e 	bgeu	r22,r18,40790 <__sfvwrite_r+0x320>
   4078c:	b027883a 	mov	r19,r22
   40790:	e00b883a 	mov	r5,fp
   40794:	980d883a 	mov	r6,r19
   40798:	00412f80 	call	412f8 <memmove>
   4079c:	80800217 	ldw	r2,8(r16)
   407a0:	80c00017 	ldw	r3,0(r16)
   407a4:	14c5c83a 	sub	r2,r2,r19
   407a8:	1cc7883a 	add	r3,r3,r19
   407ac:	80800215 	stw	r2,8(r16)
   407b0:	80c00015 	stw	r3,0(r16)
   407b4:	10004326 	beq	r2,zero,408c4 <__sfvwrite_r+0x454>
   407b8:	9805883a 	mov	r2,r19
   407bc:	003f8506 	br	405d4 <__alt_data_end+0xfffce5d4>
   407c0:	a80d883a 	mov	r6,r21
   407c4:	e00b883a 	mov	r5,fp
   407c8:	da000115 	stw	r8,4(sp)
   407cc:	00412f80 	call	412f8 <memmove>
   407d0:	80800217 	ldw	r2,8(r16)
   407d4:	80c00017 	ldw	r3,0(r16)
   407d8:	da000117 	ldw	r8,4(sp)
   407dc:	1545c83a 	sub	r2,r2,r21
   407e0:	1d6b883a 	add	r21,r3,r21
   407e4:	80800215 	stw	r2,8(r16)
   407e8:	85400015 	stw	r21,0(r16)
   407ec:	003fb906 	br	406d4 <__alt_data_end+0xfffce6d4>
   407f0:	81000017 	ldw	r4,0(r16)
   407f4:	902d883a 	mov	r22,r18
   407f8:	9027883a 	mov	r19,r18
   407fc:	003f6b06 	br	405ac <__alt_data_end+0xfffce5ac>
   40800:	e009883a 	mov	r4,fp
   40804:	01400284 	movi	r5,10
   40808:	900d883a 	mov	r6,r18
   4080c:	00410d80 	call	410d8 <memchr>
   40810:	10003e26 	beq	r2,zero,4090c <__sfvwrite_r+0x49c>
   40814:	10800044 	addi	r2,r2,1
   40818:	1727c83a 	sub	r19,r2,fp
   4081c:	02000044 	movi	r8,1
   40820:	003f9706 	br	40680 <__alt_data_end+0xfffce680>
   40824:	80800517 	ldw	r2,20(r16)
   40828:	81400417 	ldw	r5,16(r16)
   4082c:	80c00017 	ldw	r3,0(r16)
   40830:	10a7883a 	add	r19,r2,r2
   40834:	9885883a 	add	r2,r19,r2
   40838:	1026d7fa 	srli	r19,r2,31
   4083c:	196bc83a 	sub	r21,r3,r5
   40840:	a9800044 	addi	r6,r21,1
   40844:	9885883a 	add	r2,r19,r2
   40848:	1027d07a 	srai	r19,r2,1
   4084c:	3485883a 	add	r2,r6,r18
   40850:	980d883a 	mov	r6,r19
   40854:	9880022e 	bgeu	r19,r2,40860 <__sfvwrite_r+0x3f0>
   40858:	1027883a 	mov	r19,r2
   4085c:	100d883a 	mov	r6,r2
   40860:	2101000c 	andi	r4,r4,1024
   40864:	20001c26 	beq	r4,zero,408d8 <__sfvwrite_r+0x468>
   40868:	a009883a 	mov	r4,r20
   4086c:	300b883a 	mov	r5,r6
   40870:	00409300 	call	40930 <_malloc_r>
   40874:	102d883a 	mov	r22,r2
   40878:	10002926 	beq	r2,zero,40920 <__sfvwrite_r+0x4b0>
   4087c:	81400417 	ldw	r5,16(r16)
   40880:	1009883a 	mov	r4,r2
   40884:	a80d883a 	mov	r6,r21
   40888:	00411c00 	call	411c0 <memcpy>
   4088c:	8080030b 	ldhu	r2,12(r16)
   40890:	00fedfc4 	movi	r3,-1153
   40894:	10c4703a 	and	r2,r2,r3
   40898:	10802014 	ori	r2,r2,128
   4089c:	8080030d 	sth	r2,12(r16)
   408a0:	b549883a 	add	r4,r22,r21
   408a4:	9d4bc83a 	sub	r5,r19,r21
   408a8:	85800415 	stw	r22,16(r16)
   408ac:	84c00515 	stw	r19,20(r16)
   408b0:	81000015 	stw	r4,0(r16)
   408b4:	902d883a 	mov	r22,r18
   408b8:	81400215 	stw	r5,8(r16)
   408bc:	9027883a 	mov	r19,r18
   408c0:	003f3a06 	br	405ac <__alt_data_end+0xfffce5ac>
   408c4:	a009883a 	mov	r4,r20
   408c8:	800b883a 	mov	r5,r16
   408cc:	0041d6c0 	call	41d6c <_fflush_r>
   408d0:	103fb926 	beq	r2,zero,407b8 <__alt_data_end+0xfffce7b8>
   408d4:	003f5f06 	br	40654 <__alt_data_end+0xfffce654>
   408d8:	a009883a 	mov	r4,r20
   408dc:	00414540 	call	41454 <_realloc_r>
   408e0:	102d883a 	mov	r22,r2
   408e4:	103fee1e 	bne	r2,zero,408a0 <__alt_data_end+0xfffce8a0>
   408e8:	81400417 	ldw	r5,16(r16)
   408ec:	a009883a 	mov	r4,r20
   408f0:	00422bc0 	call	422bc <_free_r>
   408f4:	8080030b 	ldhu	r2,12(r16)
   408f8:	00ffdfc4 	movi	r3,-129
   408fc:	1884703a 	and	r2,r3,r2
   40900:	00c00304 	movi	r3,12
   40904:	a0c00015 	stw	r3,0(r20)
   40908:	003f5306 	br	40658 <__alt_data_end+0xfffce658>
   4090c:	94c00044 	addi	r19,r18,1
   40910:	02000044 	movi	r8,1
   40914:	003f5a06 	br	40680 <__alt_data_end+0xfffce680>
   40918:	00bfffc4 	movi	r2,-1
   4091c:	003f0206 	br	40528 <__alt_data_end+0xfffce528>
   40920:	00800304 	movi	r2,12
   40924:	a0800015 	stw	r2,0(r20)
   40928:	8080030b 	ldhu	r2,12(r16)
   4092c:	003f4a06 	br	40658 <__alt_data_end+0xfffce658>

00040930 <_malloc_r>:
   40930:	defff504 	addi	sp,sp,-44
   40934:	dc800315 	stw	r18,12(sp)
   40938:	dfc00a15 	stw	ra,40(sp)
   4093c:	df000915 	stw	fp,36(sp)
   40940:	ddc00815 	stw	r23,32(sp)
   40944:	dd800715 	stw	r22,28(sp)
   40948:	dd400615 	stw	r21,24(sp)
   4094c:	dd000515 	stw	r20,20(sp)
   40950:	dcc00415 	stw	r19,16(sp)
   40954:	dc400215 	stw	r17,8(sp)
   40958:	dc000115 	stw	r16,4(sp)
   4095c:	288002c4 	addi	r2,r5,11
   40960:	00c00584 	movi	r3,22
   40964:	2025883a 	mov	r18,r4
   40968:	18802a2e 	bgeu	r3,r2,40a14 <_malloc_r+0xe4>
   4096c:	047ffe04 	movi	r17,-8
   40970:	1462703a 	and	r17,r2,r17
   40974:	88009e16 	blt	r17,zero,40bf0 <_malloc_r+0x2c0>
   40978:	89409d36 	bltu	r17,r5,40bf0 <_malloc_r+0x2c0>
   4097c:	00435500 	call	43550 <__malloc_lock>
   40980:	00807dc4 	movi	r2,503
   40984:	14402736 	bltu	r2,r17,40a24 <_malloc_r+0xf4>
   40988:	8806d0fa 	srli	r3,r17,3
   4098c:	04c00134 	movhi	r19,4
   40990:	9cd6b004 	addi	r19,r19,23232
   40994:	18c5883a 	add	r2,r3,r3
   40998:	1085883a 	add	r2,r2,r2
   4099c:	1085883a 	add	r2,r2,r2
   409a0:	9885883a 	add	r2,r19,r2
   409a4:	14000317 	ldw	r16,12(r2)
   409a8:	80814a26 	beq	r16,r2,40ed4 <_malloc_r+0x5a4>
   409ac:	80c00117 	ldw	r3,4(r16)
   409b0:	81000317 	ldw	r4,12(r16)
   409b4:	00bfff04 	movi	r2,-4
   409b8:	1884703a 	and	r2,r3,r2
   409bc:	81400217 	ldw	r5,8(r16)
   409c0:	8085883a 	add	r2,r16,r2
   409c4:	10c00117 	ldw	r3,4(r2)
   409c8:	29000315 	stw	r4,12(r5)
   409cc:	21400215 	stw	r5,8(r4)
   409d0:	18c00054 	ori	r3,r3,1
   409d4:	10c00115 	stw	r3,4(r2)
   409d8:	9009883a 	mov	r4,r18
   409dc:	00435700 	call	43570 <__malloc_unlock>
   409e0:	80800204 	addi	r2,r16,8
   409e4:	dfc00a17 	ldw	ra,40(sp)
   409e8:	df000917 	ldw	fp,36(sp)
   409ec:	ddc00817 	ldw	r23,32(sp)
   409f0:	dd800717 	ldw	r22,28(sp)
   409f4:	dd400617 	ldw	r21,24(sp)
   409f8:	dd000517 	ldw	r20,20(sp)
   409fc:	dcc00417 	ldw	r19,16(sp)
   40a00:	dc800317 	ldw	r18,12(sp)
   40a04:	dc400217 	ldw	r17,8(sp)
   40a08:	dc000117 	ldw	r16,4(sp)
   40a0c:	dec00b04 	addi	sp,sp,44
   40a10:	f800283a 	ret
   40a14:	04400404 	movi	r17,16
   40a18:	89407536 	bltu	r17,r5,40bf0 <_malloc_r+0x2c0>
   40a1c:	00435500 	call	43550 <__malloc_lock>
   40a20:	003fd906 	br	40988 <__alt_data_end+0xfffce988>
   40a24:	8806d27a 	srli	r3,r17,9
   40a28:	18007526 	beq	r3,zero,40c00 <_malloc_r+0x2d0>
   40a2c:	00800104 	movi	r2,4
   40a30:	10c0ef36 	bltu	r2,r3,40df0 <_malloc_r+0x4c0>
   40a34:	8806d1ba 	srli	r3,r17,6
   40a38:	19c00e04 	addi	r7,r3,56
   40a3c:	39cb883a 	add	r5,r7,r7
   40a40:	04c00134 	movhi	r19,4
   40a44:	294b883a 	add	r5,r5,r5
   40a48:	9cd6b004 	addi	r19,r19,23232
   40a4c:	294b883a 	add	r5,r5,r5
   40a50:	994b883a 	add	r5,r19,r5
   40a54:	2c000317 	ldw	r16,12(r5)
   40a58:	2c000e26 	beq	r5,r16,40a94 <_malloc_r+0x164>
   40a5c:	80800117 	ldw	r2,4(r16)
   40a60:	01bfff04 	movi	r6,-4
   40a64:	010003c4 	movi	r4,15
   40a68:	1184703a 	and	r2,r2,r6
   40a6c:	1447c83a 	sub	r3,r2,r17
   40a70:	20c00716 	blt	r4,r3,40a90 <_malloc_r+0x160>
   40a74:	1800650e 	bge	r3,zero,40c0c <_malloc_r+0x2dc>
   40a78:	84000317 	ldw	r16,12(r16)
   40a7c:	2c000526 	beq	r5,r16,40a94 <_malloc_r+0x164>
   40a80:	80800117 	ldw	r2,4(r16)
   40a84:	1184703a 	and	r2,r2,r6
   40a88:	1447c83a 	sub	r3,r2,r17
   40a8c:	20fff90e 	bge	r4,r3,40a74 <__alt_data_end+0xfffcea74>
   40a90:	39ffffc4 	addi	r7,r7,-1
   40a94:	38c00044 	addi	r3,r7,1
   40a98:	01800134 	movhi	r6,4
   40a9c:	9c000417 	ldw	r16,16(r19)
   40aa0:	3196b004 	addi	r6,r6,23232
   40aa4:	32400204 	addi	r9,r6,8
   40aa8:	82410326 	beq	r16,r9,40eb8 <_malloc_r+0x588>
   40aac:	81000117 	ldw	r4,4(r16)
   40ab0:	00bfff04 	movi	r2,-4
   40ab4:	208e703a 	and	r7,r4,r2
   40ab8:	3c45c83a 	sub	r2,r7,r17
   40abc:	010003c4 	movi	r4,15
   40ac0:	2080ee16 	blt	r4,r2,40e7c <_malloc_r+0x54c>
   40ac4:	32400515 	stw	r9,20(r6)
   40ac8:	32400415 	stw	r9,16(r6)
   40acc:	1000510e 	bge	r2,zero,40c14 <_malloc_r+0x2e4>
   40ad0:	00807fc4 	movi	r2,511
   40ad4:	11c0ce36 	bltu	r2,r7,40e10 <_malloc_r+0x4e0>
   40ad8:	3808d0fa 	srli	r4,r7,3
   40adc:	01c00044 	movi	r7,1
   40ae0:	30800117 	ldw	r2,4(r6)
   40ae4:	210b883a 	add	r5,r4,r4
   40ae8:	294b883a 	add	r5,r5,r5
   40aec:	2009d0ba 	srai	r4,r4,2
   40af0:	294b883a 	add	r5,r5,r5
   40af4:	298b883a 	add	r5,r5,r6
   40af8:	2a000217 	ldw	r8,8(r5)
   40afc:	3908983a 	sll	r4,r7,r4
   40b00:	81400315 	stw	r5,12(r16)
   40b04:	82000215 	stw	r8,8(r16)
   40b08:	2088b03a 	or	r4,r4,r2
   40b0c:	2c000215 	stw	r16,8(r5)
   40b10:	31000115 	stw	r4,4(r6)
   40b14:	44000315 	stw	r16,12(r8)
   40b18:	1805d0ba 	srai	r2,r3,2
   40b1c:	01400044 	movi	r5,1
   40b20:	288a983a 	sll	r5,r5,r2
   40b24:	21404336 	bltu	r4,r5,40c34 <_malloc_r+0x304>
   40b28:	2144703a 	and	r2,r4,r5
   40b2c:	10000a1e 	bne	r2,zero,40b58 <_malloc_r+0x228>
   40b30:	00bfff04 	movi	r2,-4
   40b34:	294b883a 	add	r5,r5,r5
   40b38:	1886703a 	and	r3,r3,r2
   40b3c:	2144703a 	and	r2,r4,r5
   40b40:	18c00104 	addi	r3,r3,4
   40b44:	1000041e 	bne	r2,zero,40b58 <_malloc_r+0x228>
   40b48:	294b883a 	add	r5,r5,r5
   40b4c:	2144703a 	and	r2,r4,r5
   40b50:	18c00104 	addi	r3,r3,4
   40b54:	103ffc26 	beq	r2,zero,40b48 <__alt_data_end+0xfffceb48>
   40b58:	023fff04 	movi	r8,-4
   40b5c:	01c003c4 	movi	r7,15
   40b60:	18c5883a 	add	r2,r3,r3
   40b64:	1085883a 	add	r2,r2,r2
   40b68:	1085883a 	add	r2,r2,r2
   40b6c:	9895883a 	add	r10,r19,r2
   40b70:	52c00304 	addi	r11,r10,12
   40b74:	1819883a 	mov	r12,r3
   40b78:	5c000017 	ldw	r16,0(r11)
   40b7c:	59bffd04 	addi	r6,r11,-12
   40b80:	8180041e 	bne	r16,r6,40b94 <_malloc_r+0x264>
   40b84:	0000ce06 	br	40ec0 <_malloc_r+0x590>
   40b88:	2000d70e 	bge	r4,zero,40ee8 <_malloc_r+0x5b8>
   40b8c:	84000317 	ldw	r16,12(r16)
   40b90:	8180cb26 	beq	r16,r6,40ec0 <_malloc_r+0x590>
   40b94:	80800117 	ldw	r2,4(r16)
   40b98:	1204703a 	and	r2,r2,r8
   40b9c:	1449c83a 	sub	r4,r2,r17
   40ba0:	393ff90e 	bge	r7,r4,40b88 <__alt_data_end+0xfffceb88>
   40ba4:	80800317 	ldw	r2,12(r16)
   40ba8:	80c00217 	ldw	r3,8(r16)
   40bac:	89400054 	ori	r5,r17,1
   40bb0:	81400115 	stw	r5,4(r16)
   40bb4:	18800315 	stw	r2,12(r3)
   40bb8:	10c00215 	stw	r3,8(r2)
   40bbc:	8463883a 	add	r17,r16,r17
   40bc0:	9c400515 	stw	r17,20(r19)
   40bc4:	9c400415 	stw	r17,16(r19)
   40bc8:	20800054 	ori	r2,r4,1
   40bcc:	88800115 	stw	r2,4(r17)
   40bd0:	8a400315 	stw	r9,12(r17)
   40bd4:	8a400215 	stw	r9,8(r17)
   40bd8:	8923883a 	add	r17,r17,r4
   40bdc:	89000015 	stw	r4,0(r17)
   40be0:	9009883a 	mov	r4,r18
   40be4:	00435700 	call	43570 <__malloc_unlock>
   40be8:	80800204 	addi	r2,r16,8
   40bec:	003f7d06 	br	409e4 <__alt_data_end+0xfffce9e4>
   40bf0:	00800304 	movi	r2,12
   40bf4:	90800015 	stw	r2,0(r18)
   40bf8:	0005883a 	mov	r2,zero
   40bfc:	003f7906 	br	409e4 <__alt_data_end+0xfffce9e4>
   40c00:	01401f84 	movi	r5,126
   40c04:	01c00fc4 	movi	r7,63
   40c08:	003f8d06 	br	40a40 <__alt_data_end+0xfffcea40>
   40c0c:	81000317 	ldw	r4,12(r16)
   40c10:	003f6a06 	br	409bc <__alt_data_end+0xfffce9bc>
   40c14:	81c5883a 	add	r2,r16,r7
   40c18:	10c00117 	ldw	r3,4(r2)
   40c1c:	9009883a 	mov	r4,r18
   40c20:	18c00054 	ori	r3,r3,1
   40c24:	10c00115 	stw	r3,4(r2)
   40c28:	00435700 	call	43570 <__malloc_unlock>
   40c2c:	80800204 	addi	r2,r16,8
   40c30:	003f6c06 	br	409e4 <__alt_data_end+0xfffce9e4>
   40c34:	9c000217 	ldw	r16,8(r19)
   40c38:	00bfff04 	movi	r2,-4
   40c3c:	85800117 	ldw	r22,4(r16)
   40c40:	b0ac703a 	and	r22,r22,r2
   40c44:	b4400336 	bltu	r22,r17,40c54 <_malloc_r+0x324>
   40c48:	b445c83a 	sub	r2,r22,r17
   40c4c:	00c003c4 	movi	r3,15
   40c50:	18805d16 	blt	r3,r2,40dc8 <_malloc_r+0x498>
   40c54:	05c00134 	movhi	r23,4
   40c58:	00800174 	movhi	r2,5
   40c5c:	bddc3604 	addi	r23,r23,28888
   40c60:	10a2df04 	addi	r2,r2,-29828
   40c64:	15400017 	ldw	r21,0(r2)
   40c68:	b9000017 	ldw	r4,0(r23)
   40c6c:	00ffffc4 	movi	r3,-1
   40c70:	858d883a 	add	r6,r16,r22
   40c74:	8d6b883a 	add	r21,r17,r21
   40c78:	20c0e426 	beq	r4,r3,4100c <_malloc_r+0x6dc>
   40c7c:	ad4403c4 	addi	r21,r21,4111
   40c80:	00fc0004 	movi	r3,-4096
   40c84:	a8ea703a 	and	r21,r21,r3
   40c88:	9009883a 	mov	r4,r18
   40c8c:	a80b883a 	mov	r5,r21
   40c90:	d9800015 	stw	r6,0(sp)
   40c94:	00419bc0 	call	419bc <_sbrk_r>
   40c98:	00ffffc4 	movi	r3,-1
   40c9c:	1029883a 	mov	r20,r2
   40ca0:	d9800017 	ldw	r6,0(sp)
   40ca4:	10c0a426 	beq	r2,r3,40f38 <_malloc_r+0x608>
   40ca8:	1180a236 	bltu	r2,r6,40f34 <_malloc_r+0x604>
   40cac:	07000174 	movhi	fp,5
   40cb0:	e722e704 	addi	fp,fp,-29796
   40cb4:	e0c00017 	ldw	r3,0(fp)
   40cb8:	a8c7883a 	add	r3,r21,r3
   40cbc:	e0c00015 	stw	r3,0(fp)
   40cc0:	3500da26 	beq	r6,r20,4102c <_malloc_r+0x6fc>
   40cc4:	b9000017 	ldw	r4,0(r23)
   40cc8:	00bfffc4 	movi	r2,-1
   40ccc:	2080e426 	beq	r4,r2,41060 <_malloc_r+0x730>
   40cd0:	a185c83a 	sub	r2,r20,r6
   40cd4:	1885883a 	add	r2,r3,r2
   40cd8:	e0800015 	stw	r2,0(fp)
   40cdc:	a0c001cc 	andi	r3,r20,7
   40ce0:	1800b526 	beq	r3,zero,40fb8 <_malloc_r+0x688>
   40ce4:	a0e9c83a 	sub	r20,r20,r3
   40ce8:	00840204 	movi	r2,4104
   40cec:	a5000204 	addi	r20,r20,8
   40cf0:	10c7c83a 	sub	r3,r2,r3
   40cf4:	a545883a 	add	r2,r20,r21
   40cf8:	1083ffcc 	andi	r2,r2,4095
   40cfc:	18abc83a 	sub	r21,r3,r2
   40d00:	9009883a 	mov	r4,r18
   40d04:	a80b883a 	mov	r5,r21
   40d08:	00419bc0 	call	419bc <_sbrk_r>
   40d0c:	00ffffc4 	movi	r3,-1
   40d10:	10c0d026 	beq	r2,r3,41054 <_malloc_r+0x724>
   40d14:	1507c83a 	sub	r3,r2,r20
   40d18:	a8c7883a 	add	r3,r21,r3
   40d1c:	18c00054 	ori	r3,r3,1
   40d20:	e0800017 	ldw	r2,0(fp)
   40d24:	9d000215 	stw	r20,8(r19)
   40d28:	a0c00115 	stw	r3,4(r20)
   40d2c:	a887883a 	add	r3,r21,r2
   40d30:	e0c00015 	stw	r3,0(fp)
   40d34:	84c00e26 	beq	r16,r19,40d70 <_malloc_r+0x440>
   40d38:	018003c4 	movi	r6,15
   40d3c:	3580a02e 	bgeu	r6,r22,40fc0 <_malloc_r+0x690>
   40d40:	81400117 	ldw	r5,4(r16)
   40d44:	013ffe04 	movi	r4,-8
   40d48:	b0bffd04 	addi	r2,r22,-12
   40d4c:	1104703a 	and	r2,r2,r4
   40d50:	2900004c 	andi	r4,r5,1
   40d54:	1108b03a 	or	r4,r2,r4
   40d58:	81000115 	stw	r4,4(r16)
   40d5c:	01400144 	movi	r5,5
   40d60:	8089883a 	add	r4,r16,r2
   40d64:	21400115 	stw	r5,4(r4)
   40d68:	21400215 	stw	r5,8(r4)
   40d6c:	3080c036 	bltu	r6,r2,41070 <_malloc_r+0x740>
   40d70:	00800174 	movhi	r2,5
   40d74:	10a2de04 	addi	r2,r2,-29832
   40d78:	11000017 	ldw	r4,0(r2)
   40d7c:	20c0012e 	bgeu	r4,r3,40d84 <_malloc_r+0x454>
   40d80:	10c00015 	stw	r3,0(r2)
   40d84:	00800174 	movhi	r2,5
   40d88:	10a2dd04 	addi	r2,r2,-29836
   40d8c:	11000017 	ldw	r4,0(r2)
   40d90:	9c000217 	ldw	r16,8(r19)
   40d94:	20c0012e 	bgeu	r4,r3,40d9c <_malloc_r+0x46c>
   40d98:	10c00015 	stw	r3,0(r2)
   40d9c:	80c00117 	ldw	r3,4(r16)
   40da0:	00bfff04 	movi	r2,-4
   40da4:	1886703a 	and	r3,r3,r2
   40da8:	1c45c83a 	sub	r2,r3,r17
   40dac:	1c400236 	bltu	r3,r17,40db8 <_malloc_r+0x488>
   40db0:	00c003c4 	movi	r3,15
   40db4:	18800416 	blt	r3,r2,40dc8 <_malloc_r+0x498>
   40db8:	9009883a 	mov	r4,r18
   40dbc:	00435700 	call	43570 <__malloc_unlock>
   40dc0:	0005883a 	mov	r2,zero
   40dc4:	003f0706 	br	409e4 <__alt_data_end+0xfffce9e4>
   40dc8:	88c00054 	ori	r3,r17,1
   40dcc:	80c00115 	stw	r3,4(r16)
   40dd0:	8463883a 	add	r17,r16,r17
   40dd4:	10800054 	ori	r2,r2,1
   40dd8:	9c400215 	stw	r17,8(r19)
   40ddc:	88800115 	stw	r2,4(r17)
   40de0:	9009883a 	mov	r4,r18
   40de4:	00435700 	call	43570 <__malloc_unlock>
   40de8:	80800204 	addi	r2,r16,8
   40dec:	003efd06 	br	409e4 <__alt_data_end+0xfffce9e4>
   40df0:	00800504 	movi	r2,20
   40df4:	10c0482e 	bgeu	r2,r3,40f18 <_malloc_r+0x5e8>
   40df8:	00801504 	movi	r2,84
   40dfc:	10c06836 	bltu	r2,r3,40fa0 <_malloc_r+0x670>
   40e00:	8806d33a 	srli	r3,r17,12
   40e04:	19c01b84 	addi	r7,r3,110
   40e08:	39cb883a 	add	r5,r7,r7
   40e0c:	003f0c06 	br	40a40 <__alt_data_end+0xfffcea40>
   40e10:	3804d27a 	srli	r2,r7,9
   40e14:	01000104 	movi	r4,4
   40e18:	2080422e 	bgeu	r4,r2,40f24 <_malloc_r+0x5f4>
   40e1c:	01000504 	movi	r4,20
   40e20:	20807c36 	bltu	r4,r2,41014 <_malloc_r+0x6e4>
   40e24:	110016c4 	addi	r4,r2,91
   40e28:	210b883a 	add	r5,r4,r4
   40e2c:	294b883a 	add	r5,r5,r5
   40e30:	294b883a 	add	r5,r5,r5
   40e34:	994b883a 	add	r5,r19,r5
   40e38:	28800217 	ldw	r2,8(r5)
   40e3c:	02000134 	movhi	r8,4
   40e40:	4216b004 	addi	r8,r8,23232
   40e44:	11406326 	beq	r2,r5,40fd4 <_malloc_r+0x6a4>
   40e48:	01bfff04 	movi	r6,-4
   40e4c:	11000117 	ldw	r4,4(r2)
   40e50:	2188703a 	and	r4,r4,r6
   40e54:	3900022e 	bgeu	r7,r4,40e60 <_malloc_r+0x530>
   40e58:	10800217 	ldw	r2,8(r2)
   40e5c:	28bffb1e 	bne	r5,r2,40e4c <__alt_data_end+0xfffcee4c>
   40e60:	11800317 	ldw	r6,12(r2)
   40e64:	99000117 	ldw	r4,4(r19)
   40e68:	81800315 	stw	r6,12(r16)
   40e6c:	80800215 	stw	r2,8(r16)
   40e70:	34000215 	stw	r16,8(r6)
   40e74:	14000315 	stw	r16,12(r2)
   40e78:	003f2706 	br	40b18 <__alt_data_end+0xfffceb18>
   40e7c:	88c00054 	ori	r3,r17,1
   40e80:	80c00115 	stw	r3,4(r16)
   40e84:	8463883a 	add	r17,r16,r17
   40e88:	34400515 	stw	r17,20(r6)
   40e8c:	34400415 	stw	r17,16(r6)
   40e90:	10c00054 	ori	r3,r2,1
   40e94:	8a400315 	stw	r9,12(r17)
   40e98:	8a400215 	stw	r9,8(r17)
   40e9c:	88c00115 	stw	r3,4(r17)
   40ea0:	88a3883a 	add	r17,r17,r2
   40ea4:	88800015 	stw	r2,0(r17)
   40ea8:	9009883a 	mov	r4,r18
   40eac:	00435700 	call	43570 <__malloc_unlock>
   40eb0:	80800204 	addi	r2,r16,8
   40eb4:	003ecb06 	br	409e4 <__alt_data_end+0xfffce9e4>
   40eb8:	31000117 	ldw	r4,4(r6)
   40ebc:	003f1606 	br	40b18 <__alt_data_end+0xfffceb18>
   40ec0:	63000044 	addi	r12,r12,1
   40ec4:	608000cc 	andi	r2,r12,3
   40ec8:	5ac00204 	addi	r11,r11,8
   40ecc:	103f2a1e 	bne	r2,zero,40b78 <__alt_data_end+0xfffceb78>
   40ed0:	00002106 	br	40f58 <_malloc_r+0x628>
   40ed4:	80800204 	addi	r2,r16,8
   40ed8:	84000517 	ldw	r16,20(r16)
   40edc:	143eb31e 	bne	r2,r16,409ac <__alt_data_end+0xfffce9ac>
   40ee0:	18c00084 	addi	r3,r3,2
   40ee4:	003eec06 	br	40a98 <__alt_data_end+0xfffcea98>
   40ee8:	8085883a 	add	r2,r16,r2
   40eec:	10c00117 	ldw	r3,4(r2)
   40ef0:	81000317 	ldw	r4,12(r16)
   40ef4:	81400217 	ldw	r5,8(r16)
   40ef8:	18c00054 	ori	r3,r3,1
   40efc:	10c00115 	stw	r3,4(r2)
   40f00:	29000315 	stw	r4,12(r5)
   40f04:	21400215 	stw	r5,8(r4)
   40f08:	9009883a 	mov	r4,r18
   40f0c:	00435700 	call	43570 <__malloc_unlock>
   40f10:	80800204 	addi	r2,r16,8
   40f14:	003eb306 	br	409e4 <__alt_data_end+0xfffce9e4>
   40f18:	19c016c4 	addi	r7,r3,91
   40f1c:	39cb883a 	add	r5,r7,r7
   40f20:	003ec706 	br	40a40 <__alt_data_end+0xfffcea40>
   40f24:	3804d1ba 	srli	r2,r7,6
   40f28:	11000e04 	addi	r4,r2,56
   40f2c:	210b883a 	add	r5,r4,r4
   40f30:	003fbe06 	br	40e2c <__alt_data_end+0xfffcee2c>
   40f34:	84ff5d26 	beq	r16,r19,40cac <__alt_data_end+0xfffcecac>
   40f38:	9c000217 	ldw	r16,8(r19)
   40f3c:	00bfff04 	movi	r2,-4
   40f40:	80c00117 	ldw	r3,4(r16)
   40f44:	1886703a 	and	r3,r3,r2
   40f48:	003f9706 	br	40da8 <__alt_data_end+0xfffceda8>
   40f4c:	52800017 	ldw	r10,0(r10)
   40f50:	18ffffc4 	addi	r3,r3,-1
   40f54:	50805c1e 	bne	r10,r2,410c8 <_malloc_r+0x798>
   40f58:	190000cc 	andi	r4,r3,3
   40f5c:	50bffe04 	addi	r2,r10,-8
   40f60:	203ffa1e 	bne	r4,zero,40f4c <__alt_data_end+0xfffcef4c>
   40f64:	98800117 	ldw	r2,4(r19)
   40f68:	0146303a 	nor	r3,zero,r5
   40f6c:	1884703a 	and	r2,r3,r2
   40f70:	98800115 	stw	r2,4(r19)
   40f74:	294b883a 	add	r5,r5,r5
   40f78:	117f2e36 	bltu	r2,r5,40c34 <__alt_data_end+0xfffcec34>
   40f7c:	283f2d26 	beq	r5,zero,40c34 <__alt_data_end+0xfffcec34>
   40f80:	1146703a 	and	r3,r2,r5
   40f84:	1800521e 	bne	r3,zero,410d0 <_malloc_r+0x7a0>
   40f88:	6007883a 	mov	r3,r12
   40f8c:	294b883a 	add	r5,r5,r5
   40f90:	1148703a 	and	r4,r2,r5
   40f94:	18c00104 	addi	r3,r3,4
   40f98:	203ffc26 	beq	r4,zero,40f8c <__alt_data_end+0xfffcef8c>
   40f9c:	003ef006 	br	40b60 <__alt_data_end+0xfffceb60>
   40fa0:	00805504 	movi	r2,340
   40fa4:	10c01336 	bltu	r2,r3,40ff4 <_malloc_r+0x6c4>
   40fa8:	8806d3fa 	srli	r3,r17,15
   40fac:	19c01dc4 	addi	r7,r3,119
   40fb0:	39cb883a 	add	r5,r7,r7
   40fb4:	003ea206 	br	40a40 <__alt_data_end+0xfffcea40>
   40fb8:	00c40004 	movi	r3,4096
   40fbc:	003f4d06 	br	40cf4 <__alt_data_end+0xfffcecf4>
   40fc0:	00800044 	movi	r2,1
   40fc4:	a0800115 	stw	r2,4(r20)
   40fc8:	a021883a 	mov	r16,r20
   40fcc:	0007883a 	mov	r3,zero
   40fd0:	003f7506 	br	40da8 <__alt_data_end+0xfffceda8>
   40fd4:	200bd0ba 	srai	r5,r4,2
   40fd8:	01800044 	movi	r6,1
   40fdc:	41000117 	ldw	r4,4(r8)
   40fe0:	314a983a 	sll	r5,r6,r5
   40fe4:	100d883a 	mov	r6,r2
   40fe8:	2908b03a 	or	r4,r5,r4
   40fec:	41000115 	stw	r4,4(r8)
   40ff0:	003f9d06 	br	40e68 <__alt_data_end+0xfffcee68>
   40ff4:	00815504 	movi	r2,1364
   40ff8:	10c01336 	bltu	r2,r3,41048 <_malloc_r+0x718>
   40ffc:	8806d4ba 	srli	r3,r17,18
   41000:	19c01f04 	addi	r7,r3,124
   41004:	39cb883a 	add	r5,r7,r7
   41008:	003e8d06 	br	40a40 <__alt_data_end+0xfffcea40>
   4100c:	ad400404 	addi	r21,r21,16
   41010:	003f1d06 	br	40c88 <__alt_data_end+0xfffcec88>
   41014:	01001504 	movi	r4,84
   41018:	20801c36 	bltu	r4,r2,4108c <_malloc_r+0x75c>
   4101c:	3804d33a 	srli	r2,r7,12
   41020:	11001b84 	addi	r4,r2,110
   41024:	210b883a 	add	r5,r4,r4
   41028:	003f8006 	br	40e2c <__alt_data_end+0xfffcee2c>
   4102c:	3083ffcc 	andi	r2,r6,4095
   41030:	103f241e 	bne	r2,zero,40cc4 <__alt_data_end+0xfffcecc4>
   41034:	99000217 	ldw	r4,8(r19)
   41038:	ad85883a 	add	r2,r21,r22
   4103c:	10800054 	ori	r2,r2,1
   41040:	20800115 	stw	r2,4(r4)
   41044:	003f4a06 	br	40d70 <__alt_data_end+0xfffced70>
   41048:	01403f04 	movi	r5,252
   4104c:	01c01f84 	movi	r7,126
   41050:	003e7b06 	br	40a40 <__alt_data_end+0xfffcea40>
   41054:	00c00044 	movi	r3,1
   41058:	002b883a 	mov	r21,zero
   4105c:	003f3006 	br	40d20 <__alt_data_end+0xfffced20>
   41060:	00800134 	movhi	r2,4
   41064:	109c3604 	addi	r2,r2,28888
   41068:	15000015 	stw	r20,0(r2)
   4106c:	003f1b06 	br	40cdc <__alt_data_end+0xfffcecdc>
   41070:	9009883a 	mov	r4,r18
   41074:	81400204 	addi	r5,r16,8
   41078:	00422bc0 	call	422bc <_free_r>
   4107c:	00800174 	movhi	r2,5
   41080:	10a2e704 	addi	r2,r2,-29796
   41084:	10c00017 	ldw	r3,0(r2)
   41088:	003f3906 	br	40d70 <__alt_data_end+0xfffced70>
   4108c:	01005504 	movi	r4,340
   41090:	20800436 	bltu	r4,r2,410a4 <_malloc_r+0x774>
   41094:	3804d3fa 	srli	r2,r7,15
   41098:	11001dc4 	addi	r4,r2,119
   4109c:	210b883a 	add	r5,r4,r4
   410a0:	003f6206 	br	40e2c <__alt_data_end+0xfffcee2c>
   410a4:	01015504 	movi	r4,1364
   410a8:	20800436 	bltu	r4,r2,410bc <_malloc_r+0x78c>
   410ac:	3804d4ba 	srli	r2,r7,18
   410b0:	11001f04 	addi	r4,r2,124
   410b4:	210b883a 	add	r5,r4,r4
   410b8:	003f5c06 	br	40e2c <__alt_data_end+0xfffcee2c>
   410bc:	01403f04 	movi	r5,252
   410c0:	01001f84 	movi	r4,126
   410c4:	003f5906 	br	40e2c <__alt_data_end+0xfffcee2c>
   410c8:	98800117 	ldw	r2,4(r19)
   410cc:	003fa906 	br	40f74 <__alt_data_end+0xfffcef74>
   410d0:	6007883a 	mov	r3,r12
   410d4:	003ea206 	br	40b60 <__alt_data_end+0xfffceb60>

000410d8 <memchr>:
   410d8:	208000cc 	andi	r2,r4,3
   410dc:	280f883a 	mov	r7,r5
   410e0:	10003526 	beq	r2,zero,411b8 <memchr+0xe0>
   410e4:	30bfffc4 	addi	r2,r6,-1
   410e8:	30001b26 	beq	r6,zero,41158 <memchr+0x80>
   410ec:	21800003 	ldbu	r6,0(r4)
   410f0:	28c03fcc 	andi	r3,r5,255
   410f4:	30c01a26 	beq	r6,r3,41160 <memchr+0x88>
   410f8:	180d883a 	mov	r6,r3
   410fc:	00000406 	br	41110 <memchr+0x38>
   41100:	10001526 	beq	r2,zero,41158 <memchr+0x80>
   41104:	20c00003 	ldbu	r3,0(r4)
   41108:	10bfffc4 	addi	r2,r2,-1
   4110c:	19801426 	beq	r3,r6,41160 <memchr+0x88>
   41110:	21000044 	addi	r4,r4,1
   41114:	20c000cc 	andi	r3,r4,3
   41118:	183ff91e 	bne	r3,zero,41100 <__alt_data_end+0xfffcf100>
   4111c:	024000c4 	movi	r9,3
   41120:	48801136 	bltu	r9,r2,41168 <memchr+0x90>
   41124:	10000c26 	beq	r2,zero,41158 <memchr+0x80>
   41128:	20c00003 	ldbu	r3,0(r4)
   4112c:	29403fcc 	andi	r5,r5,255
   41130:	19400b26 	beq	r3,r5,41160 <memchr+0x88>
   41134:	20c00044 	addi	r3,r4,1
   41138:	2085883a 	add	r2,r4,r2
   4113c:	39803fcc 	andi	r6,r7,255
   41140:	00000306 	br	41150 <memchr+0x78>
   41144:	18c00044 	addi	r3,r3,1
   41148:	197fffc3 	ldbu	r5,-1(r3)
   4114c:	29800426 	beq	r5,r6,41160 <memchr+0x88>
   41150:	1809883a 	mov	r4,r3
   41154:	18bffb1e 	bne	r3,r2,41144 <__alt_data_end+0xfffcf144>
   41158:	0005883a 	mov	r2,zero
   4115c:	f800283a 	ret
   41160:	2005883a 	mov	r2,r4
   41164:	f800283a 	ret
   41168:	28c03fcc 	andi	r3,r5,255
   4116c:	1810923a 	slli	r8,r3,8
   41170:	02ffbff4 	movhi	r11,65279
   41174:	02a02074 	movhi	r10,32897
   41178:	40c6b03a 	or	r3,r8,r3
   4117c:	1810943a 	slli	r8,r3,16
   41180:	5affbfc4 	addi	r11,r11,-257
   41184:	52a02004 	addi	r10,r10,-32640
   41188:	40d0b03a 	or	r8,r8,r3
   4118c:	20c00017 	ldw	r3,0(r4)
   41190:	40c6f03a 	xor	r3,r8,r3
   41194:	1acd883a 	add	r6,r3,r11
   41198:	00c6303a 	nor	r3,zero,r3
   4119c:	30c6703a 	and	r3,r6,r3
   411a0:	1a86703a 	and	r3,r3,r10
   411a4:	183fdf1e 	bne	r3,zero,41124 <__alt_data_end+0xfffcf124>
   411a8:	10bfff04 	addi	r2,r2,-4
   411ac:	21000104 	addi	r4,r4,4
   411b0:	48bff636 	bltu	r9,r2,4118c <__alt_data_end+0xfffcf18c>
   411b4:	003fdb06 	br	41124 <__alt_data_end+0xfffcf124>
   411b8:	3005883a 	mov	r2,r6
   411bc:	003fd706 	br	4111c <__alt_data_end+0xfffcf11c>

000411c0 <memcpy>:
   411c0:	deffff04 	addi	sp,sp,-4
   411c4:	dc000015 	stw	r16,0(sp)
   411c8:	00c003c4 	movi	r3,15
   411cc:	2005883a 	mov	r2,r4
   411d0:	1980432e 	bgeu	r3,r6,412e0 <memcpy+0x120>
   411d4:	2146b03a 	or	r3,r4,r5
   411d8:	18c000cc 	andi	r3,r3,3
   411dc:	1800421e 	bne	r3,zero,412e8 <memcpy+0x128>
   411e0:	343ffc04 	addi	r16,r6,-16
   411e4:	8020d13a 	srli	r16,r16,4
   411e8:	28c00104 	addi	r3,r5,4
   411ec:	23400104 	addi	r13,r4,4
   411f0:	801e913a 	slli	r15,r16,4
   411f4:	2b000204 	addi	r12,r5,8
   411f8:	22c00204 	addi	r11,r4,8
   411fc:	7bc00504 	addi	r15,r15,20
   41200:	2a800304 	addi	r10,r5,12
   41204:	22400304 	addi	r9,r4,12
   41208:	2bdf883a 	add	r15,r5,r15
   4120c:	2811883a 	mov	r8,r5
   41210:	200f883a 	mov	r7,r4
   41214:	41000017 	ldw	r4,0(r8)
   41218:	39c00404 	addi	r7,r7,16
   4121c:	18c00404 	addi	r3,r3,16
   41220:	393ffc15 	stw	r4,-16(r7)
   41224:	1bbffc17 	ldw	r14,-16(r3)
   41228:	6b400404 	addi	r13,r13,16
   4122c:	5ac00404 	addi	r11,r11,16
   41230:	6bbffc15 	stw	r14,-16(r13)
   41234:	63800017 	ldw	r14,0(r12)
   41238:	4a400404 	addi	r9,r9,16
   4123c:	42000404 	addi	r8,r8,16
   41240:	5bbffc15 	stw	r14,-16(r11)
   41244:	53800017 	ldw	r14,0(r10)
   41248:	63000404 	addi	r12,r12,16
   4124c:	52800404 	addi	r10,r10,16
   41250:	4bbffc15 	stw	r14,-16(r9)
   41254:	1bffef1e 	bne	r3,r15,41214 <__alt_data_end+0xfffcf214>
   41258:	81c00044 	addi	r7,r16,1
   4125c:	380e913a 	slli	r7,r7,4
   41260:	310003cc 	andi	r4,r6,15
   41264:	02c000c4 	movi	r11,3
   41268:	11c7883a 	add	r3,r2,r7
   4126c:	29cb883a 	add	r5,r5,r7
   41270:	59001f2e 	bgeu	r11,r4,412f0 <memcpy+0x130>
   41274:	1813883a 	mov	r9,r3
   41278:	2811883a 	mov	r8,r5
   4127c:	200f883a 	mov	r7,r4
   41280:	42800017 	ldw	r10,0(r8)
   41284:	4a400104 	addi	r9,r9,4
   41288:	39ffff04 	addi	r7,r7,-4
   4128c:	4abfff15 	stw	r10,-4(r9)
   41290:	42000104 	addi	r8,r8,4
   41294:	59fffa36 	bltu	r11,r7,41280 <__alt_data_end+0xfffcf280>
   41298:	213fff04 	addi	r4,r4,-4
   4129c:	2008d0ba 	srli	r4,r4,2
   412a0:	318000cc 	andi	r6,r6,3
   412a4:	21000044 	addi	r4,r4,1
   412a8:	2109883a 	add	r4,r4,r4
   412ac:	2109883a 	add	r4,r4,r4
   412b0:	1907883a 	add	r3,r3,r4
   412b4:	290b883a 	add	r5,r5,r4
   412b8:	30000626 	beq	r6,zero,412d4 <memcpy+0x114>
   412bc:	198d883a 	add	r6,r3,r6
   412c0:	29c00003 	ldbu	r7,0(r5)
   412c4:	18c00044 	addi	r3,r3,1
   412c8:	29400044 	addi	r5,r5,1
   412cc:	19ffffc5 	stb	r7,-1(r3)
   412d0:	19bffb1e 	bne	r3,r6,412c0 <__alt_data_end+0xfffcf2c0>
   412d4:	dc000017 	ldw	r16,0(sp)
   412d8:	dec00104 	addi	sp,sp,4
   412dc:	f800283a 	ret
   412e0:	2007883a 	mov	r3,r4
   412e4:	003ff406 	br	412b8 <__alt_data_end+0xfffcf2b8>
   412e8:	2007883a 	mov	r3,r4
   412ec:	003ff306 	br	412bc <__alt_data_end+0xfffcf2bc>
   412f0:	200d883a 	mov	r6,r4
   412f4:	003ff006 	br	412b8 <__alt_data_end+0xfffcf2b8>

000412f8 <memmove>:
   412f8:	2005883a 	mov	r2,r4
   412fc:	29000b2e 	bgeu	r5,r4,4132c <memmove+0x34>
   41300:	298f883a 	add	r7,r5,r6
   41304:	21c0092e 	bgeu	r4,r7,4132c <memmove+0x34>
   41308:	2187883a 	add	r3,r4,r6
   4130c:	198bc83a 	sub	r5,r3,r6
   41310:	30004b26 	beq	r6,zero,41440 <memmove+0x148>
   41314:	39ffffc4 	addi	r7,r7,-1
   41318:	39000003 	ldbu	r4,0(r7)
   4131c:	18ffffc4 	addi	r3,r3,-1
   41320:	19000005 	stb	r4,0(r3)
   41324:	197ffb1e 	bne	r3,r5,41314 <__alt_data_end+0xfffcf314>
   41328:	f800283a 	ret
   4132c:	00c003c4 	movi	r3,15
   41330:	1980412e 	bgeu	r3,r6,41438 <memmove+0x140>
   41334:	1146b03a 	or	r3,r2,r5
   41338:	18c000cc 	andi	r3,r3,3
   4133c:	1800411e 	bne	r3,zero,41444 <memmove+0x14c>
   41340:	33fffc04 	addi	r15,r6,-16
   41344:	781ed13a 	srli	r15,r15,4
   41348:	28c00104 	addi	r3,r5,4
   4134c:	13400104 	addi	r13,r2,4
   41350:	781c913a 	slli	r14,r15,4
   41354:	2b000204 	addi	r12,r5,8
   41358:	12c00204 	addi	r11,r2,8
   4135c:	73800504 	addi	r14,r14,20
   41360:	2a800304 	addi	r10,r5,12
   41364:	12400304 	addi	r9,r2,12
   41368:	2b9d883a 	add	r14,r5,r14
   4136c:	2811883a 	mov	r8,r5
   41370:	100f883a 	mov	r7,r2
   41374:	41000017 	ldw	r4,0(r8)
   41378:	39c00404 	addi	r7,r7,16
   4137c:	18c00404 	addi	r3,r3,16
   41380:	393ffc15 	stw	r4,-16(r7)
   41384:	193ffc17 	ldw	r4,-16(r3)
   41388:	6b400404 	addi	r13,r13,16
   4138c:	5ac00404 	addi	r11,r11,16
   41390:	693ffc15 	stw	r4,-16(r13)
   41394:	61000017 	ldw	r4,0(r12)
   41398:	4a400404 	addi	r9,r9,16
   4139c:	42000404 	addi	r8,r8,16
   413a0:	593ffc15 	stw	r4,-16(r11)
   413a4:	51000017 	ldw	r4,0(r10)
   413a8:	63000404 	addi	r12,r12,16
   413ac:	52800404 	addi	r10,r10,16
   413b0:	493ffc15 	stw	r4,-16(r9)
   413b4:	1bbfef1e 	bne	r3,r14,41374 <__alt_data_end+0xfffcf374>
   413b8:	79000044 	addi	r4,r15,1
   413bc:	2008913a 	slli	r4,r4,4
   413c0:	328003cc 	andi	r10,r6,15
   413c4:	02c000c4 	movi	r11,3
   413c8:	1107883a 	add	r3,r2,r4
   413cc:	290b883a 	add	r5,r5,r4
   413d0:	5a801e2e 	bgeu	r11,r10,4144c <memmove+0x154>
   413d4:	1813883a 	mov	r9,r3
   413d8:	2811883a 	mov	r8,r5
   413dc:	500f883a 	mov	r7,r10
   413e0:	41000017 	ldw	r4,0(r8)
   413e4:	4a400104 	addi	r9,r9,4
   413e8:	39ffff04 	addi	r7,r7,-4
   413ec:	493fff15 	stw	r4,-4(r9)
   413f0:	42000104 	addi	r8,r8,4
   413f4:	59fffa36 	bltu	r11,r7,413e0 <__alt_data_end+0xfffcf3e0>
   413f8:	513fff04 	addi	r4,r10,-4
   413fc:	2008d0ba 	srli	r4,r4,2
   41400:	318000cc 	andi	r6,r6,3
   41404:	21000044 	addi	r4,r4,1
   41408:	2109883a 	add	r4,r4,r4
   4140c:	2109883a 	add	r4,r4,r4
   41410:	1907883a 	add	r3,r3,r4
   41414:	290b883a 	add	r5,r5,r4
   41418:	30000926 	beq	r6,zero,41440 <memmove+0x148>
   4141c:	198d883a 	add	r6,r3,r6
   41420:	29c00003 	ldbu	r7,0(r5)
   41424:	18c00044 	addi	r3,r3,1
   41428:	29400044 	addi	r5,r5,1
   4142c:	19ffffc5 	stb	r7,-1(r3)
   41430:	19bffb1e 	bne	r3,r6,41420 <__alt_data_end+0xfffcf420>
   41434:	f800283a 	ret
   41438:	1007883a 	mov	r3,r2
   4143c:	003ff606 	br	41418 <__alt_data_end+0xfffcf418>
   41440:	f800283a 	ret
   41444:	1007883a 	mov	r3,r2
   41448:	003ff406 	br	4141c <__alt_data_end+0xfffcf41c>
   4144c:	500d883a 	mov	r6,r10
   41450:	003ff106 	br	41418 <__alt_data_end+0xfffcf418>

00041454 <_realloc_r>:
   41454:	defff604 	addi	sp,sp,-40
   41458:	dd000415 	stw	r20,16(sp)
   4145c:	dc400115 	stw	r17,4(sp)
   41460:	dfc00915 	stw	ra,36(sp)
   41464:	df000815 	stw	fp,32(sp)
   41468:	ddc00715 	stw	r23,28(sp)
   4146c:	dd800615 	stw	r22,24(sp)
   41470:	dd400515 	stw	r21,20(sp)
   41474:	dcc00315 	stw	r19,12(sp)
   41478:	dc800215 	stw	r18,8(sp)
   4147c:	dc000015 	stw	r16,0(sp)
   41480:	2829883a 	mov	r20,r5
   41484:	3023883a 	mov	r17,r6
   41488:	2800ad26 	beq	r5,zero,41740 <_realloc_r+0x2ec>
   4148c:	2025883a 	mov	r18,r4
   41490:	00435500 	call	43550 <__malloc_lock>
   41494:	a0ffff17 	ldw	r3,-4(r20)
   41498:	043fff04 	movi	r16,-4
   4149c:	890002c4 	addi	r4,r17,11
   414a0:	01c00584 	movi	r7,22
   414a4:	a57ffe04 	addi	r21,r20,-8
   414a8:	1c20703a 	and	r16,r3,r16
   414ac:	39001d2e 	bgeu	r7,r4,41524 <_realloc_r+0xd0>
   414b0:	05bffe04 	movi	r22,-8
   414b4:	25ac703a 	and	r22,r4,r22
   414b8:	b00f883a 	mov	r7,r22
   414bc:	b0006516 	blt	r22,zero,41654 <_realloc_r+0x200>
   414c0:	b4406436 	bltu	r22,r17,41654 <_realloc_r+0x200>
   414c4:	81c01a0e 	bge	r16,r7,41530 <_realloc_r+0xdc>
   414c8:	07000134 	movhi	fp,4
   414cc:	e716b004 	addi	fp,fp,23232
   414d0:	e1400217 	ldw	r5,8(fp)
   414d4:	ac11883a 	add	r8,r21,r16
   414d8:	2a006226 	beq	r5,r8,41664 <_realloc_r+0x210>
   414dc:	41800117 	ldw	r6,4(r8)
   414e0:	027fff84 	movi	r9,-2
   414e4:	3252703a 	and	r9,r6,r9
   414e8:	4253883a 	add	r9,r8,r9
   414ec:	49000117 	ldw	r4,4(r9)
   414f0:	2100004c 	andi	r4,r4,1
   414f4:	2000281e 	bne	r4,zero,41598 <_realloc_r+0x144>
   414f8:	00bfff04 	movi	r2,-4
   414fc:	3084703a 	and	r2,r6,r2
   41500:	1409883a 	add	r4,r2,r16
   41504:	21c05e16 	blt	r4,r7,41680 <_realloc_r+0x22c>
   41508:	40800317 	ldw	r2,12(r8)
   4150c:	41400217 	ldw	r5,8(r8)
   41510:	a023883a 	mov	r17,r20
   41514:	2021883a 	mov	r16,r4
   41518:	28800315 	stw	r2,12(r5)
   4151c:	11400215 	stw	r5,8(r2)
   41520:	00000406 	br	41534 <_realloc_r+0xe0>
   41524:	01c00404 	movi	r7,16
   41528:	382d883a 	mov	r22,r7
   4152c:	003fe406 	br	414c0 <__alt_data_end+0xfffcf4c0>
   41530:	a023883a 	mov	r17,r20
   41534:	858fc83a 	sub	r7,r16,r22
   41538:	008003c4 	movi	r2,15
   4153c:	18c0004c 	andi	r3,r3,1
   41540:	11c07236 	bltu	r2,r7,4170c <_realloc_r+0x2b8>
   41544:	1c06b03a 	or	r3,r3,r16
   41548:	a8c00115 	stw	r3,4(r21)
   4154c:	ac21883a 	add	r16,r21,r16
   41550:	80800117 	ldw	r2,4(r16)
   41554:	10800054 	ori	r2,r2,1
   41558:	80800115 	stw	r2,4(r16)
   4155c:	9009883a 	mov	r4,r18
   41560:	00435700 	call	43570 <__malloc_unlock>
   41564:	8805883a 	mov	r2,r17
   41568:	dfc00917 	ldw	ra,36(sp)
   4156c:	df000817 	ldw	fp,32(sp)
   41570:	ddc00717 	ldw	r23,28(sp)
   41574:	dd800617 	ldw	r22,24(sp)
   41578:	dd400517 	ldw	r21,20(sp)
   4157c:	dd000417 	ldw	r20,16(sp)
   41580:	dcc00317 	ldw	r19,12(sp)
   41584:	dc800217 	ldw	r18,8(sp)
   41588:	dc400117 	ldw	r17,4(sp)
   4158c:	dc000017 	ldw	r16,0(sp)
   41590:	dec00a04 	addi	sp,sp,40
   41594:	f800283a 	ret
   41598:	18c0004c 	andi	r3,r3,1
   4159c:	1800081e 	bne	r3,zero,415c0 <_realloc_r+0x16c>
   415a0:	a4fffe17 	ldw	r19,-8(r20)
   415a4:	00bfff04 	movi	r2,-4
   415a8:	ace7c83a 	sub	r19,r21,r19
   415ac:	98c00117 	ldw	r3,4(r19)
   415b0:	1886703a 	and	r3,r3,r2
   415b4:	98000226 	beq	r19,zero,415c0 <_realloc_r+0x16c>
   415b8:	1c2f883a 	add	r23,r3,r16
   415bc:	b9c06d0e 	bge	r23,r7,41774 <_realloc_r+0x320>
   415c0:	880b883a 	mov	r5,r17
   415c4:	9009883a 	mov	r4,r18
   415c8:	00409300 	call	40930 <_malloc_r>
   415cc:	1023883a 	mov	r17,r2
   415d0:	1000ef26 	beq	r2,zero,41990 <_realloc_r+0x53c>
   415d4:	a0ffff17 	ldw	r3,-4(r20)
   415d8:	113ffe04 	addi	r4,r2,-8
   415dc:	00bfff84 	movi	r2,-2
   415e0:	1884703a 	and	r2,r3,r2
   415e4:	a885883a 	add	r2,r21,r2
   415e8:	2080bf26 	beq	r4,r2,418e8 <_realloc_r+0x494>
   415ec:	81bfff04 	addi	r6,r16,-4
   415f0:	00800904 	movi	r2,36
   415f4:	11808936 	bltu	r2,r6,4181c <_realloc_r+0x3c8>
   415f8:	00c004c4 	movi	r3,19
   415fc:	19806c2e 	bgeu	r3,r6,417b0 <_realloc_r+0x35c>
   41600:	a0c00017 	ldw	r3,0(r20)
   41604:	88c00015 	stw	r3,0(r17)
   41608:	a0c00117 	ldw	r3,4(r20)
   4160c:	88c00115 	stw	r3,4(r17)
   41610:	00c006c4 	movi	r3,27
   41614:	1980ac36 	bltu	r3,r6,418c8 <_realloc_r+0x474>
   41618:	88800204 	addi	r2,r17,8
   4161c:	a0c00204 	addi	r3,r20,8
   41620:	19000017 	ldw	r4,0(r3)
   41624:	11000015 	stw	r4,0(r2)
   41628:	19000117 	ldw	r4,4(r3)
   4162c:	11000115 	stw	r4,4(r2)
   41630:	18c00217 	ldw	r3,8(r3)
   41634:	10c00215 	stw	r3,8(r2)
   41638:	a00b883a 	mov	r5,r20
   4163c:	9009883a 	mov	r4,r18
   41640:	00422bc0 	call	422bc <_free_r>
   41644:	9009883a 	mov	r4,r18
   41648:	00435700 	call	43570 <__malloc_unlock>
   4164c:	8805883a 	mov	r2,r17
   41650:	003fc506 	br	41568 <__alt_data_end+0xfffcf568>
   41654:	00800304 	movi	r2,12
   41658:	90800015 	stw	r2,0(r18)
   4165c:	0005883a 	mov	r2,zero
   41660:	003fc106 	br	41568 <__alt_data_end+0xfffcf568>
   41664:	29800117 	ldw	r6,4(r5)
   41668:	00bfff04 	movi	r2,-4
   4166c:	b1000404 	addi	r4,r22,16
   41670:	3084703a 	and	r2,r6,r2
   41674:	140d883a 	add	r6,r2,r16
   41678:	31005b0e 	bge	r6,r4,417e8 <_realloc_r+0x394>
   4167c:	2811883a 	mov	r8,r5
   41680:	18c0004c 	andi	r3,r3,1
   41684:	183fce1e 	bne	r3,zero,415c0 <__alt_data_end+0xfffcf5c0>
   41688:	a4fffe17 	ldw	r19,-8(r20)
   4168c:	00ffff04 	movi	r3,-4
   41690:	ace7c83a 	sub	r19,r21,r19
   41694:	99000117 	ldw	r4,4(r19)
   41698:	20c6703a 	and	r3,r4,r3
   4169c:	403fc526 	beq	r8,zero,415b4 <__alt_data_end+0xfffcf5b4>
   416a0:	1c2f883a 	add	r23,r3,r16
   416a4:	b8af883a 	add	r23,r23,r2
   416a8:	41406026 	beq	r8,r5,4182c <_realloc_r+0x3d8>
   416ac:	b9ffc116 	blt	r23,r7,415b4 <__alt_data_end+0xfffcf5b4>
   416b0:	40c00217 	ldw	r3,8(r8)
   416b4:	40800317 	ldw	r2,12(r8)
   416b8:	81bfff04 	addi	r6,r16,-4
   416bc:	01000904 	movi	r4,36
   416c0:	18800315 	stw	r2,12(r3)
   416c4:	10c00215 	stw	r3,8(r2)
   416c8:	99400217 	ldw	r5,8(r19)
   416cc:	98c00317 	ldw	r3,12(r19)
   416d0:	9c400204 	addi	r17,r19,8
   416d4:	28c00315 	stw	r3,12(r5)
   416d8:	19400215 	stw	r5,8(r3)
   416dc:	21802d36 	bltu	r4,r6,41794 <_realloc_r+0x340>
   416e0:	008004c4 	movi	r2,19
   416e4:	1180352e 	bgeu	r2,r6,417bc <_realloc_r+0x368>
   416e8:	a0800017 	ldw	r2,0(r20)
   416ec:	98800215 	stw	r2,8(r19)
   416f0:	a0800117 	ldw	r2,4(r20)
   416f4:	98800315 	stw	r2,12(r19)
   416f8:	008006c4 	movi	r2,27
   416fc:	11808036 	bltu	r2,r6,41900 <_realloc_r+0x4ac>
   41700:	98c00404 	addi	r3,r19,16
   41704:	a5000204 	addi	r20,r20,8
   41708:	00002d06 	br	417c0 <_realloc_r+0x36c>
   4170c:	1d86b03a 	or	r3,r3,r22
   41710:	ad8b883a 	add	r5,r21,r22
   41714:	a8c00115 	stw	r3,4(r21)
   41718:	38800054 	ori	r2,r7,1
   4171c:	28800115 	stw	r2,4(r5)
   41720:	29cf883a 	add	r7,r5,r7
   41724:	38800117 	ldw	r2,4(r7)
   41728:	9009883a 	mov	r4,r18
   4172c:	29400204 	addi	r5,r5,8
   41730:	10800054 	ori	r2,r2,1
   41734:	38800115 	stw	r2,4(r7)
   41738:	00422bc0 	call	422bc <_free_r>
   4173c:	003f8706 	br	4155c <__alt_data_end+0xfffcf55c>
   41740:	300b883a 	mov	r5,r6
   41744:	dfc00917 	ldw	ra,36(sp)
   41748:	df000817 	ldw	fp,32(sp)
   4174c:	ddc00717 	ldw	r23,28(sp)
   41750:	dd800617 	ldw	r22,24(sp)
   41754:	dd400517 	ldw	r21,20(sp)
   41758:	dd000417 	ldw	r20,16(sp)
   4175c:	dcc00317 	ldw	r19,12(sp)
   41760:	dc800217 	ldw	r18,8(sp)
   41764:	dc400117 	ldw	r17,4(sp)
   41768:	dc000017 	ldw	r16,0(sp)
   4176c:	dec00a04 	addi	sp,sp,40
   41770:	00409301 	jmpi	40930 <_malloc_r>
   41774:	98800317 	ldw	r2,12(r19)
   41778:	98c00217 	ldw	r3,8(r19)
   4177c:	81bfff04 	addi	r6,r16,-4
   41780:	01000904 	movi	r4,36
   41784:	18800315 	stw	r2,12(r3)
   41788:	10c00215 	stw	r3,8(r2)
   4178c:	9c400204 	addi	r17,r19,8
   41790:	21bfd32e 	bgeu	r4,r6,416e0 <__alt_data_end+0xfffcf6e0>
   41794:	8809883a 	mov	r4,r17
   41798:	a00b883a 	mov	r5,r20
   4179c:	00412f80 	call	412f8 <memmove>
   417a0:	98c00117 	ldw	r3,4(r19)
   417a4:	b821883a 	mov	r16,r23
   417a8:	982b883a 	mov	r21,r19
   417ac:	003f6106 	br	41534 <__alt_data_end+0xfffcf534>
   417b0:	8805883a 	mov	r2,r17
   417b4:	a007883a 	mov	r3,r20
   417b8:	003f9906 	br	41620 <__alt_data_end+0xfffcf620>
   417bc:	8807883a 	mov	r3,r17
   417c0:	a0800017 	ldw	r2,0(r20)
   417c4:	b821883a 	mov	r16,r23
   417c8:	982b883a 	mov	r21,r19
   417cc:	18800015 	stw	r2,0(r3)
   417d0:	a0800117 	ldw	r2,4(r20)
   417d4:	18800115 	stw	r2,4(r3)
   417d8:	a0800217 	ldw	r2,8(r20)
   417dc:	18800215 	stw	r2,8(r3)
   417e0:	98c00117 	ldw	r3,4(r19)
   417e4:	003f5306 	br	41534 <__alt_data_end+0xfffcf534>
   417e8:	adab883a 	add	r21,r21,r22
   417ec:	3585c83a 	sub	r2,r6,r22
   417f0:	e5400215 	stw	r21,8(fp)
   417f4:	10800054 	ori	r2,r2,1
   417f8:	a8800115 	stw	r2,4(r21)
   417fc:	a0bfff17 	ldw	r2,-4(r20)
   41800:	9009883a 	mov	r4,r18
   41804:	1080004c 	andi	r2,r2,1
   41808:	b0acb03a 	or	r22,r22,r2
   4180c:	a5bfff15 	stw	r22,-4(r20)
   41810:	00435700 	call	43570 <__malloc_unlock>
   41814:	a005883a 	mov	r2,r20
   41818:	003f5306 	br	41568 <__alt_data_end+0xfffcf568>
   4181c:	8809883a 	mov	r4,r17
   41820:	a00b883a 	mov	r5,r20
   41824:	00412f80 	call	412f8 <memmove>
   41828:	003f8306 	br	41638 <__alt_data_end+0xfffcf638>
   4182c:	b0800404 	addi	r2,r22,16
   41830:	b8bf6016 	blt	r23,r2,415b4 <__alt_data_end+0xfffcf5b4>
   41834:	98800317 	ldw	r2,12(r19)
   41838:	98c00217 	ldw	r3,8(r19)
   4183c:	81bfff04 	addi	r6,r16,-4
   41840:	01000904 	movi	r4,36
   41844:	18800315 	stw	r2,12(r3)
   41848:	10c00215 	stw	r3,8(r2)
   4184c:	9c400204 	addi	r17,r19,8
   41850:	21804336 	bltu	r4,r6,41960 <_realloc_r+0x50c>
   41854:	008004c4 	movi	r2,19
   41858:	11803f2e 	bgeu	r2,r6,41958 <_realloc_r+0x504>
   4185c:	a0800017 	ldw	r2,0(r20)
   41860:	98800215 	stw	r2,8(r19)
   41864:	a0800117 	ldw	r2,4(r20)
   41868:	98800315 	stw	r2,12(r19)
   4186c:	008006c4 	movi	r2,27
   41870:	11803f36 	bltu	r2,r6,41970 <_realloc_r+0x51c>
   41874:	98800404 	addi	r2,r19,16
   41878:	a5000204 	addi	r20,r20,8
   4187c:	a0c00017 	ldw	r3,0(r20)
   41880:	10c00015 	stw	r3,0(r2)
   41884:	a0c00117 	ldw	r3,4(r20)
   41888:	10c00115 	stw	r3,4(r2)
   4188c:	a0c00217 	ldw	r3,8(r20)
   41890:	10c00215 	stw	r3,8(r2)
   41894:	9d87883a 	add	r3,r19,r22
   41898:	bd85c83a 	sub	r2,r23,r22
   4189c:	e0c00215 	stw	r3,8(fp)
   418a0:	10800054 	ori	r2,r2,1
   418a4:	18800115 	stw	r2,4(r3)
   418a8:	98800117 	ldw	r2,4(r19)
   418ac:	9009883a 	mov	r4,r18
   418b0:	1080004c 	andi	r2,r2,1
   418b4:	b0acb03a 	or	r22,r22,r2
   418b8:	9d800115 	stw	r22,4(r19)
   418bc:	00435700 	call	43570 <__malloc_unlock>
   418c0:	8805883a 	mov	r2,r17
   418c4:	003f2806 	br	41568 <__alt_data_end+0xfffcf568>
   418c8:	a0c00217 	ldw	r3,8(r20)
   418cc:	88c00215 	stw	r3,8(r17)
   418d0:	a0c00317 	ldw	r3,12(r20)
   418d4:	88c00315 	stw	r3,12(r17)
   418d8:	30801126 	beq	r6,r2,41920 <_realloc_r+0x4cc>
   418dc:	88800404 	addi	r2,r17,16
   418e0:	a0c00404 	addi	r3,r20,16
   418e4:	003f4e06 	br	41620 <__alt_data_end+0xfffcf620>
   418e8:	893fff17 	ldw	r4,-4(r17)
   418ec:	00bfff04 	movi	r2,-4
   418f0:	a023883a 	mov	r17,r20
   418f4:	2084703a 	and	r2,r4,r2
   418f8:	80a1883a 	add	r16,r16,r2
   418fc:	003f0d06 	br	41534 <__alt_data_end+0xfffcf534>
   41900:	a0800217 	ldw	r2,8(r20)
   41904:	98800415 	stw	r2,16(r19)
   41908:	a0800317 	ldw	r2,12(r20)
   4190c:	98800515 	stw	r2,20(r19)
   41910:	31000a26 	beq	r6,r4,4193c <_realloc_r+0x4e8>
   41914:	98c00604 	addi	r3,r19,24
   41918:	a5000404 	addi	r20,r20,16
   4191c:	003fa806 	br	417c0 <__alt_data_end+0xfffcf7c0>
   41920:	a1000417 	ldw	r4,16(r20)
   41924:	88800604 	addi	r2,r17,24
   41928:	a0c00604 	addi	r3,r20,24
   4192c:	89000415 	stw	r4,16(r17)
   41930:	a1000517 	ldw	r4,20(r20)
   41934:	89000515 	stw	r4,20(r17)
   41938:	003f3906 	br	41620 <__alt_data_end+0xfffcf620>
   4193c:	a0800417 	ldw	r2,16(r20)
   41940:	a5000604 	addi	r20,r20,24
   41944:	98c00804 	addi	r3,r19,32
   41948:	98800615 	stw	r2,24(r19)
   4194c:	a0bfff17 	ldw	r2,-4(r20)
   41950:	98800715 	stw	r2,28(r19)
   41954:	003f9a06 	br	417c0 <__alt_data_end+0xfffcf7c0>
   41958:	8805883a 	mov	r2,r17
   4195c:	003fc706 	br	4187c <__alt_data_end+0xfffcf87c>
   41960:	8809883a 	mov	r4,r17
   41964:	a00b883a 	mov	r5,r20
   41968:	00412f80 	call	412f8 <memmove>
   4196c:	003fc906 	br	41894 <__alt_data_end+0xfffcf894>
   41970:	a0800217 	ldw	r2,8(r20)
   41974:	98800415 	stw	r2,16(r19)
   41978:	a0800317 	ldw	r2,12(r20)
   4197c:	98800515 	stw	r2,20(r19)
   41980:	31000726 	beq	r6,r4,419a0 <_realloc_r+0x54c>
   41984:	98800604 	addi	r2,r19,24
   41988:	a5000404 	addi	r20,r20,16
   4198c:	003fbb06 	br	4187c <__alt_data_end+0xfffcf87c>
   41990:	9009883a 	mov	r4,r18
   41994:	00435700 	call	43570 <__malloc_unlock>
   41998:	0005883a 	mov	r2,zero
   4199c:	003ef206 	br	41568 <__alt_data_end+0xfffcf568>
   419a0:	a0c00417 	ldw	r3,16(r20)
   419a4:	a5000604 	addi	r20,r20,24
   419a8:	98800804 	addi	r2,r19,32
   419ac:	98c00615 	stw	r3,24(r19)
   419b0:	a0ffff17 	ldw	r3,-4(r20)
   419b4:	98c00715 	stw	r3,28(r19)
   419b8:	003fb006 	br	4187c <__alt_data_end+0xfffcf87c>

000419bc <_sbrk_r>:
   419bc:	defffd04 	addi	sp,sp,-12
   419c0:	dc000015 	stw	r16,0(sp)
   419c4:	04000174 	movhi	r16,5
   419c8:	dc400115 	stw	r17,4(sp)
   419cc:	8422e004 	addi	r16,r16,-29824
   419d0:	2023883a 	mov	r17,r4
   419d4:	2809883a 	mov	r4,r5
   419d8:	dfc00215 	stw	ra,8(sp)
   419dc:	80000015 	stw	zero,0(r16)
   419e0:	004373c0 	call	4373c <sbrk>
   419e4:	00ffffc4 	movi	r3,-1
   419e8:	10c00526 	beq	r2,r3,41a00 <_sbrk_r+0x44>
   419ec:	dfc00217 	ldw	ra,8(sp)
   419f0:	dc400117 	ldw	r17,4(sp)
   419f4:	dc000017 	ldw	r16,0(sp)
   419f8:	dec00304 	addi	sp,sp,12
   419fc:	f800283a 	ret
   41a00:	80c00017 	ldw	r3,0(r16)
   41a04:	183ff926 	beq	r3,zero,419ec <__alt_data_end+0xfffcf9ec>
   41a08:	88c00015 	stw	r3,0(r17)
   41a0c:	003ff706 	br	419ec <__alt_data_end+0xfffcf9ec>

00041a10 <__swsetup_r>:
   41a10:	00800134 	movhi	r2,4
   41a14:	defffd04 	addi	sp,sp,-12
   41a18:	109c3504 	addi	r2,r2,28884
   41a1c:	dc400115 	stw	r17,4(sp)
   41a20:	2023883a 	mov	r17,r4
   41a24:	11000017 	ldw	r4,0(r2)
   41a28:	dc000015 	stw	r16,0(sp)
   41a2c:	dfc00215 	stw	ra,8(sp)
   41a30:	2821883a 	mov	r16,r5
   41a34:	20000226 	beq	r4,zero,41a40 <__swsetup_r+0x30>
   41a38:	20c00e17 	ldw	r3,56(r4)
   41a3c:	18003126 	beq	r3,zero,41b04 <__swsetup_r+0xf4>
   41a40:	8080030b 	ldhu	r2,12(r16)
   41a44:	10c0020c 	andi	r3,r2,8
   41a48:	100d883a 	mov	r6,r2
   41a4c:	18000f26 	beq	r3,zero,41a8c <__swsetup_r+0x7c>
   41a50:	80c00417 	ldw	r3,16(r16)
   41a54:	18001526 	beq	r3,zero,41aac <__swsetup_r+0x9c>
   41a58:	1100004c 	andi	r4,r2,1
   41a5c:	20001c1e 	bne	r4,zero,41ad0 <__swsetup_r+0xc0>
   41a60:	1080008c 	andi	r2,r2,2
   41a64:	1000291e 	bne	r2,zero,41b0c <__swsetup_r+0xfc>
   41a68:	80800517 	ldw	r2,20(r16)
   41a6c:	80800215 	stw	r2,8(r16)
   41a70:	18001c26 	beq	r3,zero,41ae4 <__swsetup_r+0xd4>
   41a74:	0005883a 	mov	r2,zero
   41a78:	dfc00217 	ldw	ra,8(sp)
   41a7c:	dc400117 	ldw	r17,4(sp)
   41a80:	dc000017 	ldw	r16,0(sp)
   41a84:	dec00304 	addi	sp,sp,12
   41a88:	f800283a 	ret
   41a8c:	3080040c 	andi	r2,r6,16
   41a90:	10002e26 	beq	r2,zero,41b4c <__swsetup_r+0x13c>
   41a94:	3080010c 	andi	r2,r6,4
   41a98:	10001e1e 	bne	r2,zero,41b14 <__swsetup_r+0x104>
   41a9c:	80c00417 	ldw	r3,16(r16)
   41aa0:	30800214 	ori	r2,r6,8
   41aa4:	8080030d 	sth	r2,12(r16)
   41aa8:	183feb1e 	bne	r3,zero,41a58 <__alt_data_end+0xfffcfa58>
   41aac:	1140a00c 	andi	r5,r2,640
   41ab0:	01008004 	movi	r4,512
   41ab4:	293fe826 	beq	r5,r4,41a58 <__alt_data_end+0xfffcfa58>
   41ab8:	8809883a 	mov	r4,r17
   41abc:	800b883a 	mov	r5,r16
   41ac0:	00427340 	call	42734 <__smakebuf_r>
   41ac4:	8080030b 	ldhu	r2,12(r16)
   41ac8:	80c00417 	ldw	r3,16(r16)
   41acc:	003fe206 	br	41a58 <__alt_data_end+0xfffcfa58>
   41ad0:	80800517 	ldw	r2,20(r16)
   41ad4:	80000215 	stw	zero,8(r16)
   41ad8:	0085c83a 	sub	r2,zero,r2
   41adc:	80800615 	stw	r2,24(r16)
   41ae0:	183fe41e 	bne	r3,zero,41a74 <__alt_data_end+0xfffcfa74>
   41ae4:	80c0030b 	ldhu	r3,12(r16)
   41ae8:	0005883a 	mov	r2,zero
   41aec:	1900200c 	andi	r4,r3,128
   41af0:	203fe126 	beq	r4,zero,41a78 <__alt_data_end+0xfffcfa78>
   41af4:	18c01014 	ori	r3,r3,64
   41af8:	80c0030d 	sth	r3,12(r16)
   41afc:	00bfffc4 	movi	r2,-1
   41b00:	003fdd06 	br	41a78 <__alt_data_end+0xfffcfa78>
   41b04:	00421480 	call	42148 <__sinit>
   41b08:	003fcd06 	br	41a40 <__alt_data_end+0xfffcfa40>
   41b0c:	0005883a 	mov	r2,zero
   41b10:	003fd606 	br	41a6c <__alt_data_end+0xfffcfa6c>
   41b14:	81400c17 	ldw	r5,48(r16)
   41b18:	28000626 	beq	r5,zero,41b34 <__swsetup_r+0x124>
   41b1c:	80801004 	addi	r2,r16,64
   41b20:	28800326 	beq	r5,r2,41b30 <__swsetup_r+0x120>
   41b24:	8809883a 	mov	r4,r17
   41b28:	00422bc0 	call	422bc <_free_r>
   41b2c:	8180030b 	ldhu	r6,12(r16)
   41b30:	80000c15 	stw	zero,48(r16)
   41b34:	80c00417 	ldw	r3,16(r16)
   41b38:	00bff6c4 	movi	r2,-37
   41b3c:	118c703a 	and	r6,r2,r6
   41b40:	80000115 	stw	zero,4(r16)
   41b44:	80c00015 	stw	r3,0(r16)
   41b48:	003fd506 	br	41aa0 <__alt_data_end+0xfffcfaa0>
   41b4c:	00800244 	movi	r2,9
   41b50:	88800015 	stw	r2,0(r17)
   41b54:	30801014 	ori	r2,r6,64
   41b58:	8080030d 	sth	r2,12(r16)
   41b5c:	00bfffc4 	movi	r2,-1
   41b60:	003fc506 	br	41a78 <__alt_data_end+0xfffcfa78>

00041b64 <__sflush_r>:
   41b64:	2880030b 	ldhu	r2,12(r5)
   41b68:	defffb04 	addi	sp,sp,-20
   41b6c:	dcc00315 	stw	r19,12(sp)
   41b70:	dc400115 	stw	r17,4(sp)
   41b74:	dfc00415 	stw	ra,16(sp)
   41b78:	dc800215 	stw	r18,8(sp)
   41b7c:	dc000015 	stw	r16,0(sp)
   41b80:	10c0020c 	andi	r3,r2,8
   41b84:	2823883a 	mov	r17,r5
   41b88:	2027883a 	mov	r19,r4
   41b8c:	1800311e 	bne	r3,zero,41c54 <__sflush_r+0xf0>
   41b90:	28c00117 	ldw	r3,4(r5)
   41b94:	10820014 	ori	r2,r2,2048
   41b98:	2880030d 	sth	r2,12(r5)
   41b9c:	00c04b0e 	bge	zero,r3,41ccc <__sflush_r+0x168>
   41ba0:	8a000a17 	ldw	r8,40(r17)
   41ba4:	40002326 	beq	r8,zero,41c34 <__sflush_r+0xd0>
   41ba8:	9c000017 	ldw	r16,0(r19)
   41bac:	10c4000c 	andi	r3,r2,4096
   41bb0:	98000015 	stw	zero,0(r19)
   41bb4:	18004826 	beq	r3,zero,41cd8 <__sflush_r+0x174>
   41bb8:	89801417 	ldw	r6,80(r17)
   41bbc:	10c0010c 	andi	r3,r2,4
   41bc0:	18000626 	beq	r3,zero,41bdc <__sflush_r+0x78>
   41bc4:	88c00117 	ldw	r3,4(r17)
   41bc8:	88800c17 	ldw	r2,48(r17)
   41bcc:	30cdc83a 	sub	r6,r6,r3
   41bd0:	10000226 	beq	r2,zero,41bdc <__sflush_r+0x78>
   41bd4:	88800f17 	ldw	r2,60(r17)
   41bd8:	308dc83a 	sub	r6,r6,r2
   41bdc:	89400717 	ldw	r5,28(r17)
   41be0:	9809883a 	mov	r4,r19
   41be4:	000f883a 	mov	r7,zero
   41be8:	403ee83a 	callr	r8
   41bec:	00ffffc4 	movi	r3,-1
   41bf0:	10c04426 	beq	r2,r3,41d04 <__sflush_r+0x1a0>
   41bf4:	88c0030b 	ldhu	r3,12(r17)
   41bf8:	89000417 	ldw	r4,16(r17)
   41bfc:	88000115 	stw	zero,4(r17)
   41c00:	197dffcc 	andi	r5,r3,63487
   41c04:	8940030d 	sth	r5,12(r17)
   41c08:	89000015 	stw	r4,0(r17)
   41c0c:	18c4000c 	andi	r3,r3,4096
   41c10:	18002c1e 	bne	r3,zero,41cc4 <__sflush_r+0x160>
   41c14:	89400c17 	ldw	r5,48(r17)
   41c18:	9c000015 	stw	r16,0(r19)
   41c1c:	28000526 	beq	r5,zero,41c34 <__sflush_r+0xd0>
   41c20:	88801004 	addi	r2,r17,64
   41c24:	28800226 	beq	r5,r2,41c30 <__sflush_r+0xcc>
   41c28:	9809883a 	mov	r4,r19
   41c2c:	00422bc0 	call	422bc <_free_r>
   41c30:	88000c15 	stw	zero,48(r17)
   41c34:	0005883a 	mov	r2,zero
   41c38:	dfc00417 	ldw	ra,16(sp)
   41c3c:	dcc00317 	ldw	r19,12(sp)
   41c40:	dc800217 	ldw	r18,8(sp)
   41c44:	dc400117 	ldw	r17,4(sp)
   41c48:	dc000017 	ldw	r16,0(sp)
   41c4c:	dec00504 	addi	sp,sp,20
   41c50:	f800283a 	ret
   41c54:	2c800417 	ldw	r18,16(r5)
   41c58:	903ff626 	beq	r18,zero,41c34 <__alt_data_end+0xfffcfc34>
   41c5c:	2c000017 	ldw	r16,0(r5)
   41c60:	108000cc 	andi	r2,r2,3
   41c64:	2c800015 	stw	r18,0(r5)
   41c68:	84a1c83a 	sub	r16,r16,r18
   41c6c:	1000131e 	bne	r2,zero,41cbc <__sflush_r+0x158>
   41c70:	28800517 	ldw	r2,20(r5)
   41c74:	88800215 	stw	r2,8(r17)
   41c78:	04000316 	blt	zero,r16,41c88 <__sflush_r+0x124>
   41c7c:	003fed06 	br	41c34 <__alt_data_end+0xfffcfc34>
   41c80:	90a5883a 	add	r18,r18,r2
   41c84:	043feb0e 	bge	zero,r16,41c34 <__alt_data_end+0xfffcfc34>
   41c88:	88800917 	ldw	r2,36(r17)
   41c8c:	89400717 	ldw	r5,28(r17)
   41c90:	800f883a 	mov	r7,r16
   41c94:	900d883a 	mov	r6,r18
   41c98:	9809883a 	mov	r4,r19
   41c9c:	103ee83a 	callr	r2
   41ca0:	80a1c83a 	sub	r16,r16,r2
   41ca4:	00bff616 	blt	zero,r2,41c80 <__alt_data_end+0xfffcfc80>
   41ca8:	88c0030b 	ldhu	r3,12(r17)
   41cac:	00bfffc4 	movi	r2,-1
   41cb0:	18c01014 	ori	r3,r3,64
   41cb4:	88c0030d 	sth	r3,12(r17)
   41cb8:	003fdf06 	br	41c38 <__alt_data_end+0xfffcfc38>
   41cbc:	0005883a 	mov	r2,zero
   41cc0:	003fec06 	br	41c74 <__alt_data_end+0xfffcfc74>
   41cc4:	88801415 	stw	r2,80(r17)
   41cc8:	003fd206 	br	41c14 <__alt_data_end+0xfffcfc14>
   41ccc:	28c00f17 	ldw	r3,60(r5)
   41cd0:	00ffb316 	blt	zero,r3,41ba0 <__alt_data_end+0xfffcfba0>
   41cd4:	003fd706 	br	41c34 <__alt_data_end+0xfffcfc34>
   41cd8:	89400717 	ldw	r5,28(r17)
   41cdc:	000d883a 	mov	r6,zero
   41ce0:	9809883a 	mov	r4,r19
   41ce4:	01c00044 	movi	r7,1
   41ce8:	403ee83a 	callr	r8
   41cec:	100d883a 	mov	r6,r2
   41cf0:	00bfffc4 	movi	r2,-1
   41cf4:	30801426 	beq	r6,r2,41d48 <__sflush_r+0x1e4>
   41cf8:	8880030b 	ldhu	r2,12(r17)
   41cfc:	8a000a17 	ldw	r8,40(r17)
   41d00:	003fae06 	br	41bbc <__alt_data_end+0xfffcfbbc>
   41d04:	98c00017 	ldw	r3,0(r19)
   41d08:	183fba26 	beq	r3,zero,41bf4 <__alt_data_end+0xfffcfbf4>
   41d0c:	01000744 	movi	r4,29
   41d10:	19000626 	beq	r3,r4,41d2c <__sflush_r+0x1c8>
   41d14:	01000584 	movi	r4,22
   41d18:	19000426 	beq	r3,r4,41d2c <__sflush_r+0x1c8>
   41d1c:	88c0030b 	ldhu	r3,12(r17)
   41d20:	18c01014 	ori	r3,r3,64
   41d24:	88c0030d 	sth	r3,12(r17)
   41d28:	003fc306 	br	41c38 <__alt_data_end+0xfffcfc38>
   41d2c:	8880030b 	ldhu	r2,12(r17)
   41d30:	88c00417 	ldw	r3,16(r17)
   41d34:	88000115 	stw	zero,4(r17)
   41d38:	10bdffcc 	andi	r2,r2,63487
   41d3c:	8880030d 	sth	r2,12(r17)
   41d40:	88c00015 	stw	r3,0(r17)
   41d44:	003fb306 	br	41c14 <__alt_data_end+0xfffcfc14>
   41d48:	98800017 	ldw	r2,0(r19)
   41d4c:	103fea26 	beq	r2,zero,41cf8 <__alt_data_end+0xfffcfcf8>
   41d50:	00c00744 	movi	r3,29
   41d54:	10c00226 	beq	r2,r3,41d60 <__sflush_r+0x1fc>
   41d58:	00c00584 	movi	r3,22
   41d5c:	10ffd21e 	bne	r2,r3,41ca8 <__alt_data_end+0xfffcfca8>
   41d60:	9c000015 	stw	r16,0(r19)
   41d64:	0005883a 	mov	r2,zero
   41d68:	003fb306 	br	41c38 <__alt_data_end+0xfffcfc38>

00041d6c <_fflush_r>:
   41d6c:	defffd04 	addi	sp,sp,-12
   41d70:	dc000115 	stw	r16,4(sp)
   41d74:	dfc00215 	stw	ra,8(sp)
   41d78:	2021883a 	mov	r16,r4
   41d7c:	20000226 	beq	r4,zero,41d88 <_fflush_r+0x1c>
   41d80:	20800e17 	ldw	r2,56(r4)
   41d84:	10000c26 	beq	r2,zero,41db8 <_fflush_r+0x4c>
   41d88:	2880030f 	ldh	r2,12(r5)
   41d8c:	1000051e 	bne	r2,zero,41da4 <_fflush_r+0x38>
   41d90:	0005883a 	mov	r2,zero
   41d94:	dfc00217 	ldw	ra,8(sp)
   41d98:	dc000117 	ldw	r16,4(sp)
   41d9c:	dec00304 	addi	sp,sp,12
   41da0:	f800283a 	ret
   41da4:	8009883a 	mov	r4,r16
   41da8:	dfc00217 	ldw	ra,8(sp)
   41dac:	dc000117 	ldw	r16,4(sp)
   41db0:	dec00304 	addi	sp,sp,12
   41db4:	0041b641 	jmpi	41b64 <__sflush_r>
   41db8:	d9400015 	stw	r5,0(sp)
   41dbc:	00421480 	call	42148 <__sinit>
   41dc0:	d9400017 	ldw	r5,0(sp)
   41dc4:	003ff006 	br	41d88 <__alt_data_end+0xfffcfd88>

00041dc8 <fflush>:
   41dc8:	20000526 	beq	r4,zero,41de0 <fflush+0x18>
   41dcc:	00800134 	movhi	r2,4
   41dd0:	109c3504 	addi	r2,r2,28884
   41dd4:	200b883a 	mov	r5,r4
   41dd8:	11000017 	ldw	r4,0(r2)
   41ddc:	0041d6c1 	jmpi	41d6c <_fflush_r>
   41de0:	00800134 	movhi	r2,4
   41de4:	109c3404 	addi	r2,r2,28880
   41de8:	11000017 	ldw	r4,0(r2)
   41dec:	01400134 	movhi	r5,4
   41df0:	29475b04 	addi	r5,r5,7532
   41df4:	00426701 	jmpi	42670 <_fwalk_reent>

00041df8 <__fp_lock>:
   41df8:	0005883a 	mov	r2,zero
   41dfc:	f800283a 	ret

00041e00 <__fp_unlock>:
   41e00:	0005883a 	mov	r2,zero
   41e04:	f800283a 	ret

00041e08 <_cleanup_r>:
   41e08:	01400134 	movhi	r5,4
   41e0c:	294aff04 	addi	r5,r5,11260
   41e10:	00426701 	jmpi	42670 <_fwalk_reent>

00041e14 <__sinit.part.1>:
   41e14:	defff704 	addi	sp,sp,-36
   41e18:	00c00134 	movhi	r3,4
   41e1c:	dfc00815 	stw	ra,32(sp)
   41e20:	ddc00715 	stw	r23,28(sp)
   41e24:	dd800615 	stw	r22,24(sp)
   41e28:	dd400515 	stw	r21,20(sp)
   41e2c:	dd000415 	stw	r20,16(sp)
   41e30:	dcc00315 	stw	r19,12(sp)
   41e34:	dc800215 	stw	r18,8(sp)
   41e38:	dc400115 	stw	r17,4(sp)
   41e3c:	dc000015 	stw	r16,0(sp)
   41e40:	18c78204 	addi	r3,r3,7688
   41e44:	24000117 	ldw	r16,4(r4)
   41e48:	20c00f15 	stw	r3,60(r4)
   41e4c:	2080bb04 	addi	r2,r4,748
   41e50:	00c000c4 	movi	r3,3
   41e54:	20c0b915 	stw	r3,740(r4)
   41e58:	2080ba15 	stw	r2,744(r4)
   41e5c:	2000b815 	stw	zero,736(r4)
   41e60:	05c00204 	movi	r23,8
   41e64:	00800104 	movi	r2,4
   41e68:	2025883a 	mov	r18,r4
   41e6c:	b80d883a 	mov	r6,r23
   41e70:	81001704 	addi	r4,r16,92
   41e74:	000b883a 	mov	r5,zero
   41e78:	80000015 	stw	zero,0(r16)
   41e7c:	80000115 	stw	zero,4(r16)
   41e80:	80000215 	stw	zero,8(r16)
   41e84:	8080030d 	sth	r2,12(r16)
   41e88:	80001915 	stw	zero,100(r16)
   41e8c:	8000038d 	sth	zero,14(r16)
   41e90:	80000415 	stw	zero,16(r16)
   41e94:	80000515 	stw	zero,20(r16)
   41e98:	80000615 	stw	zero,24(r16)
   41e9c:	00428ec0 	call	428ec <memset>
   41ea0:	05800134 	movhi	r22,4
   41ea4:	94400217 	ldw	r17,8(r18)
   41ea8:	05400134 	movhi	r21,4
   41eac:	05000134 	movhi	r20,4
   41eb0:	04c00134 	movhi	r19,4
   41eb4:	b58a8404 	addi	r22,r22,10768
   41eb8:	ad4a9b04 	addi	r21,r21,10860
   41ebc:	a50aba04 	addi	r20,r20,10984
   41ec0:	9ccad104 	addi	r19,r19,11076
   41ec4:	85800815 	stw	r22,32(r16)
   41ec8:	85400915 	stw	r21,36(r16)
   41ecc:	85000a15 	stw	r20,40(r16)
   41ed0:	84c00b15 	stw	r19,44(r16)
   41ed4:	84000715 	stw	r16,28(r16)
   41ed8:	00800284 	movi	r2,10
   41edc:	8880030d 	sth	r2,12(r17)
   41ee0:	00800044 	movi	r2,1
   41ee4:	89001704 	addi	r4,r17,92
   41ee8:	b80d883a 	mov	r6,r23
   41eec:	000b883a 	mov	r5,zero
   41ef0:	88000015 	stw	zero,0(r17)
   41ef4:	88000115 	stw	zero,4(r17)
   41ef8:	88000215 	stw	zero,8(r17)
   41efc:	88001915 	stw	zero,100(r17)
   41f00:	8880038d 	sth	r2,14(r17)
   41f04:	88000415 	stw	zero,16(r17)
   41f08:	88000515 	stw	zero,20(r17)
   41f0c:	88000615 	stw	zero,24(r17)
   41f10:	00428ec0 	call	428ec <memset>
   41f14:	94000317 	ldw	r16,12(r18)
   41f18:	00800484 	movi	r2,18
   41f1c:	8c400715 	stw	r17,28(r17)
   41f20:	8d800815 	stw	r22,32(r17)
   41f24:	8d400915 	stw	r21,36(r17)
   41f28:	8d000a15 	stw	r20,40(r17)
   41f2c:	8cc00b15 	stw	r19,44(r17)
   41f30:	8080030d 	sth	r2,12(r16)
   41f34:	00800084 	movi	r2,2
   41f38:	80000015 	stw	zero,0(r16)
   41f3c:	80000115 	stw	zero,4(r16)
   41f40:	80000215 	stw	zero,8(r16)
   41f44:	80001915 	stw	zero,100(r16)
   41f48:	8080038d 	sth	r2,14(r16)
   41f4c:	80000415 	stw	zero,16(r16)
   41f50:	80000515 	stw	zero,20(r16)
   41f54:	80000615 	stw	zero,24(r16)
   41f58:	81001704 	addi	r4,r16,92
   41f5c:	000b883a 	mov	r5,zero
   41f60:	b80d883a 	mov	r6,r23
   41f64:	00428ec0 	call	428ec <memset>
   41f68:	00800044 	movi	r2,1
   41f6c:	84000715 	stw	r16,28(r16)
   41f70:	85800815 	stw	r22,32(r16)
   41f74:	85400915 	stw	r21,36(r16)
   41f78:	85000a15 	stw	r20,40(r16)
   41f7c:	84c00b15 	stw	r19,44(r16)
   41f80:	90800e15 	stw	r2,56(r18)
   41f84:	dfc00817 	ldw	ra,32(sp)
   41f88:	ddc00717 	ldw	r23,28(sp)
   41f8c:	dd800617 	ldw	r22,24(sp)
   41f90:	dd400517 	ldw	r21,20(sp)
   41f94:	dd000417 	ldw	r20,16(sp)
   41f98:	dcc00317 	ldw	r19,12(sp)
   41f9c:	dc800217 	ldw	r18,8(sp)
   41fa0:	dc400117 	ldw	r17,4(sp)
   41fa4:	dc000017 	ldw	r16,0(sp)
   41fa8:	dec00904 	addi	sp,sp,36
   41fac:	f800283a 	ret

00041fb0 <__sfmoreglue>:
   41fb0:	defffc04 	addi	sp,sp,-16
   41fb4:	dc400115 	stw	r17,4(sp)
   41fb8:	2c7fffc4 	addi	r17,r5,-1
   41fbc:	8c401a24 	muli	r17,r17,104
   41fc0:	dc800215 	stw	r18,8(sp)
   41fc4:	2825883a 	mov	r18,r5
   41fc8:	89401d04 	addi	r5,r17,116
   41fcc:	dc000015 	stw	r16,0(sp)
   41fd0:	dfc00315 	stw	ra,12(sp)
   41fd4:	00409300 	call	40930 <_malloc_r>
   41fd8:	1021883a 	mov	r16,r2
   41fdc:	10000726 	beq	r2,zero,41ffc <__sfmoreglue+0x4c>
   41fe0:	11000304 	addi	r4,r2,12
   41fe4:	10000015 	stw	zero,0(r2)
   41fe8:	14800115 	stw	r18,4(r2)
   41fec:	11000215 	stw	r4,8(r2)
   41ff0:	000b883a 	mov	r5,zero
   41ff4:	89801a04 	addi	r6,r17,104
   41ff8:	00428ec0 	call	428ec <memset>
   41ffc:	8005883a 	mov	r2,r16
   42000:	dfc00317 	ldw	ra,12(sp)
   42004:	dc800217 	ldw	r18,8(sp)
   42008:	dc400117 	ldw	r17,4(sp)
   4200c:	dc000017 	ldw	r16,0(sp)
   42010:	dec00404 	addi	sp,sp,16
   42014:	f800283a 	ret

00042018 <__sfp>:
   42018:	00800134 	movhi	r2,4
   4201c:	defffb04 	addi	sp,sp,-20
   42020:	109c3404 	addi	r2,r2,28880
   42024:	dc800215 	stw	r18,8(sp)
   42028:	14800017 	ldw	r18,0(r2)
   4202c:	dcc00315 	stw	r19,12(sp)
   42030:	dfc00415 	stw	ra,16(sp)
   42034:	90800e17 	ldw	r2,56(r18)
   42038:	dc400115 	stw	r17,4(sp)
   4203c:	dc000015 	stw	r16,0(sp)
   42040:	2027883a 	mov	r19,r4
   42044:	1000021e 	bne	r2,zero,42050 <__sfp+0x38>
   42048:	9009883a 	mov	r4,r18
   4204c:	0041e140 	call	41e14 <__sinit.part.1>
   42050:	9480b804 	addi	r18,r18,736
   42054:	047fffc4 	movi	r17,-1
   42058:	91400117 	ldw	r5,4(r18)
   4205c:	94000217 	ldw	r16,8(r18)
   42060:	297fffc4 	addi	r5,r5,-1
   42064:	28000a16 	blt	r5,zero,42090 <__sfp+0x78>
   42068:	8080030f 	ldh	r2,12(r16)
   4206c:	10000c26 	beq	r2,zero,420a0 <__sfp+0x88>
   42070:	80c01d04 	addi	r3,r16,116
   42074:	00000206 	br	42080 <__sfp+0x68>
   42078:	18bfe60f 	ldh	r2,-104(r3)
   4207c:	10000826 	beq	r2,zero,420a0 <__sfp+0x88>
   42080:	297fffc4 	addi	r5,r5,-1
   42084:	1c3ffd04 	addi	r16,r3,-12
   42088:	18c01a04 	addi	r3,r3,104
   4208c:	2c7ffa1e 	bne	r5,r17,42078 <__alt_data_end+0xfffd0078>
   42090:	90800017 	ldw	r2,0(r18)
   42094:	10001d26 	beq	r2,zero,4210c <__sfp+0xf4>
   42098:	1025883a 	mov	r18,r2
   4209c:	003fee06 	br	42058 <__alt_data_end+0xfffd0058>
   420a0:	00bfffc4 	movi	r2,-1
   420a4:	8080038d 	sth	r2,14(r16)
   420a8:	00800044 	movi	r2,1
   420ac:	8080030d 	sth	r2,12(r16)
   420b0:	80001915 	stw	zero,100(r16)
   420b4:	80000015 	stw	zero,0(r16)
   420b8:	80000215 	stw	zero,8(r16)
   420bc:	80000115 	stw	zero,4(r16)
   420c0:	80000415 	stw	zero,16(r16)
   420c4:	80000515 	stw	zero,20(r16)
   420c8:	80000615 	stw	zero,24(r16)
   420cc:	81001704 	addi	r4,r16,92
   420d0:	000b883a 	mov	r5,zero
   420d4:	01800204 	movi	r6,8
   420d8:	00428ec0 	call	428ec <memset>
   420dc:	8005883a 	mov	r2,r16
   420e0:	80000c15 	stw	zero,48(r16)
   420e4:	80000d15 	stw	zero,52(r16)
   420e8:	80001115 	stw	zero,68(r16)
   420ec:	80001215 	stw	zero,72(r16)
   420f0:	dfc00417 	ldw	ra,16(sp)
   420f4:	dcc00317 	ldw	r19,12(sp)
   420f8:	dc800217 	ldw	r18,8(sp)
   420fc:	dc400117 	ldw	r17,4(sp)
   42100:	dc000017 	ldw	r16,0(sp)
   42104:	dec00504 	addi	sp,sp,20
   42108:	f800283a 	ret
   4210c:	9809883a 	mov	r4,r19
   42110:	01400104 	movi	r5,4
   42114:	0041fb00 	call	41fb0 <__sfmoreglue>
   42118:	90800015 	stw	r2,0(r18)
   4211c:	103fde1e 	bne	r2,zero,42098 <__alt_data_end+0xfffd0098>
   42120:	00800304 	movi	r2,12
   42124:	98800015 	stw	r2,0(r19)
   42128:	0005883a 	mov	r2,zero
   4212c:	003ff006 	br	420f0 <__alt_data_end+0xfffd00f0>

00042130 <_cleanup>:
   42130:	00800134 	movhi	r2,4
   42134:	109c3404 	addi	r2,r2,28880
   42138:	11000017 	ldw	r4,0(r2)
   4213c:	01400134 	movhi	r5,4
   42140:	294aff04 	addi	r5,r5,11260
   42144:	00426701 	jmpi	42670 <_fwalk_reent>

00042148 <__sinit>:
   42148:	20800e17 	ldw	r2,56(r4)
   4214c:	10000126 	beq	r2,zero,42154 <__sinit+0xc>
   42150:	f800283a 	ret
   42154:	0041e141 	jmpi	41e14 <__sinit.part.1>

00042158 <__sfp_lock_acquire>:
   42158:	f800283a 	ret

0004215c <__sfp_lock_release>:
   4215c:	f800283a 	ret

00042160 <__sinit_lock_acquire>:
   42160:	f800283a 	ret

00042164 <__sinit_lock_release>:
   42164:	f800283a 	ret

00042168 <__fp_lock_all>:
   42168:	00800134 	movhi	r2,4
   4216c:	109c3504 	addi	r2,r2,28884
   42170:	11000017 	ldw	r4,0(r2)
   42174:	01400134 	movhi	r5,4
   42178:	29477e04 	addi	r5,r5,7672
   4217c:	00425ac1 	jmpi	425ac <_fwalk>

00042180 <__fp_unlock_all>:
   42180:	00800134 	movhi	r2,4
   42184:	109c3504 	addi	r2,r2,28884
   42188:	11000017 	ldw	r4,0(r2)
   4218c:	01400134 	movhi	r5,4
   42190:	29478004 	addi	r5,r5,7680
   42194:	00425ac1 	jmpi	425ac <_fwalk>

00042198 <_malloc_trim_r>:
   42198:	defffb04 	addi	sp,sp,-20
   4219c:	dcc00315 	stw	r19,12(sp)
   421a0:	04c00134 	movhi	r19,4
   421a4:	dc800215 	stw	r18,8(sp)
   421a8:	dc400115 	stw	r17,4(sp)
   421ac:	dc000015 	stw	r16,0(sp)
   421b0:	dfc00415 	stw	ra,16(sp)
   421b4:	2821883a 	mov	r16,r5
   421b8:	9cd6b004 	addi	r19,r19,23232
   421bc:	2025883a 	mov	r18,r4
   421c0:	00435500 	call	43550 <__malloc_lock>
   421c4:	98800217 	ldw	r2,8(r19)
   421c8:	14400117 	ldw	r17,4(r2)
   421cc:	00bfff04 	movi	r2,-4
   421d0:	88a2703a 	and	r17,r17,r2
   421d4:	8c21c83a 	sub	r16,r17,r16
   421d8:	8403fbc4 	addi	r16,r16,4079
   421dc:	8020d33a 	srli	r16,r16,12
   421e0:	0083ffc4 	movi	r2,4095
   421e4:	843fffc4 	addi	r16,r16,-1
   421e8:	8020933a 	slli	r16,r16,12
   421ec:	1400060e 	bge	r2,r16,42208 <_malloc_trim_r+0x70>
   421f0:	9009883a 	mov	r4,r18
   421f4:	000b883a 	mov	r5,zero
   421f8:	00419bc0 	call	419bc <_sbrk_r>
   421fc:	98c00217 	ldw	r3,8(r19)
   42200:	1c47883a 	add	r3,r3,r17
   42204:	10c00a26 	beq	r2,r3,42230 <_malloc_trim_r+0x98>
   42208:	9009883a 	mov	r4,r18
   4220c:	00435700 	call	43570 <__malloc_unlock>
   42210:	0005883a 	mov	r2,zero
   42214:	dfc00417 	ldw	ra,16(sp)
   42218:	dcc00317 	ldw	r19,12(sp)
   4221c:	dc800217 	ldw	r18,8(sp)
   42220:	dc400117 	ldw	r17,4(sp)
   42224:	dc000017 	ldw	r16,0(sp)
   42228:	dec00504 	addi	sp,sp,20
   4222c:	f800283a 	ret
   42230:	9009883a 	mov	r4,r18
   42234:	040bc83a 	sub	r5,zero,r16
   42238:	00419bc0 	call	419bc <_sbrk_r>
   4223c:	00ffffc4 	movi	r3,-1
   42240:	10c00d26 	beq	r2,r3,42278 <_malloc_trim_r+0xe0>
   42244:	00c00174 	movhi	r3,5
   42248:	18e2e704 	addi	r3,r3,-29796
   4224c:	18800017 	ldw	r2,0(r3)
   42250:	99000217 	ldw	r4,8(r19)
   42254:	8c23c83a 	sub	r17,r17,r16
   42258:	8c400054 	ori	r17,r17,1
   4225c:	1421c83a 	sub	r16,r2,r16
   42260:	24400115 	stw	r17,4(r4)
   42264:	9009883a 	mov	r4,r18
   42268:	1c000015 	stw	r16,0(r3)
   4226c:	00435700 	call	43570 <__malloc_unlock>
   42270:	00800044 	movi	r2,1
   42274:	003fe706 	br	42214 <__alt_data_end+0xfffd0214>
   42278:	9009883a 	mov	r4,r18
   4227c:	000b883a 	mov	r5,zero
   42280:	00419bc0 	call	419bc <_sbrk_r>
   42284:	99000217 	ldw	r4,8(r19)
   42288:	014003c4 	movi	r5,15
   4228c:	1107c83a 	sub	r3,r2,r4
   42290:	28ffdd0e 	bge	r5,r3,42208 <__alt_data_end+0xfffd0208>
   42294:	01400134 	movhi	r5,4
   42298:	295c3604 	addi	r5,r5,28888
   4229c:	29400017 	ldw	r5,0(r5)
   422a0:	18c00054 	ori	r3,r3,1
   422a4:	20c00115 	stw	r3,4(r4)
   422a8:	00c00174 	movhi	r3,5
   422ac:	1145c83a 	sub	r2,r2,r5
   422b0:	18e2e704 	addi	r3,r3,-29796
   422b4:	18800015 	stw	r2,0(r3)
   422b8:	003fd306 	br	42208 <__alt_data_end+0xfffd0208>

000422bc <_free_r>:
   422bc:	28004c26 	beq	r5,zero,423f0 <_free_r+0x134>
   422c0:	defffd04 	addi	sp,sp,-12
   422c4:	dc400115 	stw	r17,4(sp)
   422c8:	dc000015 	stw	r16,0(sp)
   422cc:	2023883a 	mov	r17,r4
   422d0:	2821883a 	mov	r16,r5
   422d4:	dfc00215 	stw	ra,8(sp)
   422d8:	00435500 	call	43550 <__malloc_lock>
   422dc:	813fff17 	ldw	r4,-4(r16)
   422e0:	00bfff84 	movi	r2,-2
   422e4:	02400134 	movhi	r9,4
   422e8:	81bffe04 	addi	r6,r16,-8
   422ec:	2084703a 	and	r2,r4,r2
   422f0:	4a56b004 	addi	r9,r9,23232
   422f4:	308b883a 	add	r5,r6,r2
   422f8:	2a000117 	ldw	r8,4(r5)
   422fc:	49c00217 	ldw	r7,8(r9)
   42300:	00ffff04 	movi	r3,-4
   42304:	40c6703a 	and	r3,r8,r3
   42308:	39405326 	beq	r7,r5,42458 <_free_r+0x19c>
   4230c:	28c00115 	stw	r3,4(r5)
   42310:	2100004c 	andi	r4,r4,1
   42314:	2000091e 	bne	r4,zero,4233c <_free_r+0x80>
   42318:	81fffe17 	ldw	r7,-8(r16)
   4231c:	4a000204 	addi	r8,r9,8
   42320:	31cdc83a 	sub	r6,r6,r7
   42324:	31000217 	ldw	r4,8(r6)
   42328:	11c5883a 	add	r2,r2,r7
   4232c:	22006126 	beq	r4,r8,424b4 <_free_r+0x1f8>
   42330:	31c00317 	ldw	r7,12(r6)
   42334:	21c00315 	stw	r7,12(r4)
   42338:	39000215 	stw	r4,8(r7)
   4233c:	28c9883a 	add	r4,r5,r3
   42340:	21c00117 	ldw	r7,4(r4)
   42344:	39c0004c 	andi	r7,r7,1
   42348:	38000d1e 	bne	r7,zero,42380 <_free_r+0xc4>
   4234c:	29000217 	ldw	r4,8(r5)
   42350:	10c5883a 	add	r2,r2,r3
   42354:	00c00134 	movhi	r3,4
   42358:	18d6b204 	addi	r3,r3,23240
   4235c:	20c07526 	beq	r4,r3,42534 <_free_r+0x278>
   42360:	29c00317 	ldw	r7,12(r5)
   42364:	11400054 	ori	r5,r2,1
   42368:	3087883a 	add	r3,r6,r2
   4236c:	21c00315 	stw	r7,12(r4)
   42370:	39000215 	stw	r4,8(r7)
   42374:	31400115 	stw	r5,4(r6)
   42378:	18800015 	stw	r2,0(r3)
   4237c:	00000406 	br	42390 <_free_r+0xd4>
   42380:	10c00054 	ori	r3,r2,1
   42384:	30c00115 	stw	r3,4(r6)
   42388:	3087883a 	add	r3,r6,r2
   4238c:	18800015 	stw	r2,0(r3)
   42390:	00c07fc4 	movi	r3,511
   42394:	18801736 	bltu	r3,r2,423f4 <_free_r+0x138>
   42398:	1004d0fa 	srli	r2,r2,3
   4239c:	01400044 	movi	r5,1
   423a0:	49000117 	ldw	r4,4(r9)
   423a4:	1087883a 	add	r3,r2,r2
   423a8:	18c7883a 	add	r3,r3,r3
   423ac:	1005d0ba 	srai	r2,r2,2
   423b0:	18c7883a 	add	r3,r3,r3
   423b4:	1a47883a 	add	r3,r3,r9
   423b8:	19c00217 	ldw	r7,8(r3)
   423bc:	2884983a 	sll	r2,r5,r2
   423c0:	30c00315 	stw	r3,12(r6)
   423c4:	31c00215 	stw	r7,8(r6)
   423c8:	1104b03a 	or	r2,r2,r4
   423cc:	19800215 	stw	r6,8(r3)
   423d0:	48800115 	stw	r2,4(r9)
   423d4:	39800315 	stw	r6,12(r7)
   423d8:	8809883a 	mov	r4,r17
   423dc:	dfc00217 	ldw	ra,8(sp)
   423e0:	dc400117 	ldw	r17,4(sp)
   423e4:	dc000017 	ldw	r16,0(sp)
   423e8:	dec00304 	addi	sp,sp,12
   423ec:	00435701 	jmpi	43570 <__malloc_unlock>
   423f0:	f800283a 	ret
   423f4:	1006d27a 	srli	r3,r2,9
   423f8:	01000104 	movi	r4,4
   423fc:	20c04036 	bltu	r4,r3,42500 <_free_r+0x244>
   42400:	1006d1ba 	srli	r3,r2,6
   42404:	19400e04 	addi	r5,r3,56
   42408:	2947883a 	add	r3,r5,r5
   4240c:	18c7883a 	add	r3,r3,r3
   42410:	18c7883a 	add	r3,r3,r3
   42414:	1a49883a 	add	r4,r3,r9
   42418:	20c00217 	ldw	r3,8(r4)
   4241c:	01c00134 	movhi	r7,4
   42420:	39d6b004 	addi	r7,r7,23232
   42424:	19003b26 	beq	r3,r4,42514 <_free_r+0x258>
   42428:	01ffff04 	movi	r7,-4
   4242c:	19400117 	ldw	r5,4(r3)
   42430:	29ca703a 	and	r5,r5,r7
   42434:	1140022e 	bgeu	r2,r5,42440 <_free_r+0x184>
   42438:	18c00217 	ldw	r3,8(r3)
   4243c:	20fffb1e 	bne	r4,r3,4242c <__alt_data_end+0xfffd042c>
   42440:	18800317 	ldw	r2,12(r3)
   42444:	30800315 	stw	r2,12(r6)
   42448:	30c00215 	stw	r3,8(r6)
   4244c:	11800215 	stw	r6,8(r2)
   42450:	19800315 	stw	r6,12(r3)
   42454:	003fe006 	br	423d8 <__alt_data_end+0xfffd03d8>
   42458:	2100004c 	andi	r4,r4,1
   4245c:	1885883a 	add	r2,r3,r2
   42460:	2000071e 	bne	r4,zero,42480 <_free_r+0x1c4>
   42464:	817ffe17 	ldw	r5,-8(r16)
   42468:	314dc83a 	sub	r6,r6,r5
   4246c:	30c00317 	ldw	r3,12(r6)
   42470:	31000217 	ldw	r4,8(r6)
   42474:	1145883a 	add	r2,r2,r5
   42478:	20c00315 	stw	r3,12(r4)
   4247c:	19000215 	stw	r4,8(r3)
   42480:	10c00054 	ori	r3,r2,1
   42484:	30c00115 	stw	r3,4(r6)
   42488:	00c00134 	movhi	r3,4
   4248c:	18dc3704 	addi	r3,r3,28892
   42490:	18c00017 	ldw	r3,0(r3)
   42494:	49800215 	stw	r6,8(r9)
   42498:	10ffcf36 	bltu	r2,r3,423d8 <__alt_data_end+0xfffd03d8>
   4249c:	00800174 	movhi	r2,5
   424a0:	10a2df04 	addi	r2,r2,-29828
   424a4:	11400017 	ldw	r5,0(r2)
   424a8:	8809883a 	mov	r4,r17
   424ac:	00421980 	call	42198 <_malloc_trim_r>
   424b0:	003fc906 	br	423d8 <__alt_data_end+0xfffd03d8>
   424b4:	28c9883a 	add	r4,r5,r3
   424b8:	21000117 	ldw	r4,4(r4)
   424bc:	2100004c 	andi	r4,r4,1
   424c0:	20000a1e 	bne	r4,zero,424ec <_free_r+0x230>
   424c4:	29000317 	ldw	r4,12(r5)
   424c8:	29400217 	ldw	r5,8(r5)
   424cc:	10c5883a 	add	r2,r2,r3
   424d0:	10c00054 	ori	r3,r2,1
   424d4:	29000315 	stw	r4,12(r5)
   424d8:	21400215 	stw	r5,8(r4)
   424dc:	30c00115 	stw	r3,4(r6)
   424e0:	308d883a 	add	r6,r6,r2
   424e4:	30800015 	stw	r2,0(r6)
   424e8:	003fbb06 	br	423d8 <__alt_data_end+0xfffd03d8>
   424ec:	10c00054 	ori	r3,r2,1
   424f0:	30c00115 	stw	r3,4(r6)
   424f4:	308d883a 	add	r6,r6,r2
   424f8:	30800015 	stw	r2,0(r6)
   424fc:	003fb606 	br	423d8 <__alt_data_end+0xfffd03d8>
   42500:	01000504 	movi	r4,20
   42504:	20c01436 	bltu	r4,r3,42558 <_free_r+0x29c>
   42508:	194016c4 	addi	r5,r3,91
   4250c:	2947883a 	add	r3,r5,r5
   42510:	003fbe06 	br	4240c <__alt_data_end+0xfffd040c>
   42514:	280bd0ba 	srai	r5,r5,2
   42518:	00800044 	movi	r2,1
   4251c:	39000117 	ldw	r4,4(r7)
   42520:	114a983a 	sll	r5,r2,r5
   42524:	1805883a 	mov	r2,r3
   42528:	2908b03a 	or	r4,r5,r4
   4252c:	39000115 	stw	r4,4(r7)
   42530:	003fc406 	br	42444 <__alt_data_end+0xfffd0444>
   42534:	49800515 	stw	r6,20(r9)
   42538:	49800415 	stw	r6,16(r9)
   4253c:	10c00054 	ori	r3,r2,1
   42540:	31000315 	stw	r4,12(r6)
   42544:	31000215 	stw	r4,8(r6)
   42548:	30c00115 	stw	r3,4(r6)
   4254c:	308d883a 	add	r6,r6,r2
   42550:	30800015 	stw	r2,0(r6)
   42554:	003fa006 	br	423d8 <__alt_data_end+0xfffd03d8>
   42558:	01001504 	movi	r4,84
   4255c:	20c00436 	bltu	r4,r3,42570 <_free_r+0x2b4>
   42560:	1006d33a 	srli	r3,r2,12
   42564:	19401b84 	addi	r5,r3,110
   42568:	2947883a 	add	r3,r5,r5
   4256c:	003fa706 	br	4240c <__alt_data_end+0xfffd040c>
   42570:	01005504 	movi	r4,340
   42574:	20c00436 	bltu	r4,r3,42588 <_free_r+0x2cc>
   42578:	1006d3fa 	srli	r3,r2,15
   4257c:	19401dc4 	addi	r5,r3,119
   42580:	2947883a 	add	r3,r5,r5
   42584:	003fa106 	br	4240c <__alt_data_end+0xfffd040c>
   42588:	01015504 	movi	r4,1364
   4258c:	20c00436 	bltu	r4,r3,425a0 <_free_r+0x2e4>
   42590:	1006d4ba 	srli	r3,r2,18
   42594:	19401f04 	addi	r5,r3,124
   42598:	2947883a 	add	r3,r5,r5
   4259c:	003f9b06 	br	4240c <__alt_data_end+0xfffd040c>
   425a0:	00c03f04 	movi	r3,252
   425a4:	01401f84 	movi	r5,126
   425a8:	003f9806 	br	4240c <__alt_data_end+0xfffd040c>

000425ac <_fwalk>:
   425ac:	defff704 	addi	sp,sp,-36
   425b0:	dd000415 	stw	r20,16(sp)
   425b4:	dfc00815 	stw	ra,32(sp)
   425b8:	ddc00715 	stw	r23,28(sp)
   425bc:	dd800615 	stw	r22,24(sp)
   425c0:	dd400515 	stw	r21,20(sp)
   425c4:	dcc00315 	stw	r19,12(sp)
   425c8:	dc800215 	stw	r18,8(sp)
   425cc:	dc400115 	stw	r17,4(sp)
   425d0:	dc000015 	stw	r16,0(sp)
   425d4:	2500b804 	addi	r20,r4,736
   425d8:	a0002326 	beq	r20,zero,42668 <_fwalk+0xbc>
   425dc:	282b883a 	mov	r21,r5
   425e0:	002f883a 	mov	r23,zero
   425e4:	05800044 	movi	r22,1
   425e8:	04ffffc4 	movi	r19,-1
   425ec:	a4400117 	ldw	r17,4(r20)
   425f0:	a4800217 	ldw	r18,8(r20)
   425f4:	8c7fffc4 	addi	r17,r17,-1
   425f8:	88000d16 	blt	r17,zero,42630 <_fwalk+0x84>
   425fc:	94000304 	addi	r16,r18,12
   42600:	94800384 	addi	r18,r18,14
   42604:	80c0000b 	ldhu	r3,0(r16)
   42608:	8c7fffc4 	addi	r17,r17,-1
   4260c:	813ffd04 	addi	r4,r16,-12
   42610:	b0c0042e 	bgeu	r22,r3,42624 <_fwalk+0x78>
   42614:	90c0000f 	ldh	r3,0(r18)
   42618:	1cc00226 	beq	r3,r19,42624 <_fwalk+0x78>
   4261c:	a83ee83a 	callr	r21
   42620:	b8aeb03a 	or	r23,r23,r2
   42624:	84001a04 	addi	r16,r16,104
   42628:	94801a04 	addi	r18,r18,104
   4262c:	8cfff51e 	bne	r17,r19,42604 <__alt_data_end+0xfffd0604>
   42630:	a5000017 	ldw	r20,0(r20)
   42634:	a03fed1e 	bne	r20,zero,425ec <__alt_data_end+0xfffd05ec>
   42638:	b805883a 	mov	r2,r23
   4263c:	dfc00817 	ldw	ra,32(sp)
   42640:	ddc00717 	ldw	r23,28(sp)
   42644:	dd800617 	ldw	r22,24(sp)
   42648:	dd400517 	ldw	r21,20(sp)
   4264c:	dd000417 	ldw	r20,16(sp)
   42650:	dcc00317 	ldw	r19,12(sp)
   42654:	dc800217 	ldw	r18,8(sp)
   42658:	dc400117 	ldw	r17,4(sp)
   4265c:	dc000017 	ldw	r16,0(sp)
   42660:	dec00904 	addi	sp,sp,36
   42664:	f800283a 	ret
   42668:	002f883a 	mov	r23,zero
   4266c:	003ff206 	br	42638 <__alt_data_end+0xfffd0638>

00042670 <_fwalk_reent>:
   42670:	defff704 	addi	sp,sp,-36
   42674:	dd400515 	stw	r21,20(sp)
   42678:	dfc00815 	stw	ra,32(sp)
   4267c:	ddc00715 	stw	r23,28(sp)
   42680:	dd800615 	stw	r22,24(sp)
   42684:	dd000415 	stw	r20,16(sp)
   42688:	dcc00315 	stw	r19,12(sp)
   4268c:	dc800215 	stw	r18,8(sp)
   42690:	dc400115 	stw	r17,4(sp)
   42694:	dc000015 	stw	r16,0(sp)
   42698:	2540b804 	addi	r21,r4,736
   4269c:	a8002326 	beq	r21,zero,4272c <_fwalk_reent+0xbc>
   426a0:	2829883a 	mov	r20,r5
   426a4:	202d883a 	mov	r22,r4
   426a8:	002f883a 	mov	r23,zero
   426ac:	04c00044 	movi	r19,1
   426b0:	04bfffc4 	movi	r18,-1
   426b4:	ac400117 	ldw	r17,4(r21)
   426b8:	ac000217 	ldw	r16,8(r21)
   426bc:	8c7fffc4 	addi	r17,r17,-1
   426c0:	88000c16 	blt	r17,zero,426f4 <_fwalk_reent+0x84>
   426c4:	84000304 	addi	r16,r16,12
   426c8:	80c0000b 	ldhu	r3,0(r16)
   426cc:	8c7fffc4 	addi	r17,r17,-1
   426d0:	817ffd04 	addi	r5,r16,-12
   426d4:	98c0052e 	bgeu	r19,r3,426ec <_fwalk_reent+0x7c>
   426d8:	80c0008f 	ldh	r3,2(r16)
   426dc:	b009883a 	mov	r4,r22
   426e0:	1c800226 	beq	r3,r18,426ec <_fwalk_reent+0x7c>
   426e4:	a03ee83a 	callr	r20
   426e8:	b8aeb03a 	or	r23,r23,r2
   426ec:	84001a04 	addi	r16,r16,104
   426f0:	8cbff51e 	bne	r17,r18,426c8 <__alt_data_end+0xfffd06c8>
   426f4:	ad400017 	ldw	r21,0(r21)
   426f8:	a83fee1e 	bne	r21,zero,426b4 <__alt_data_end+0xfffd06b4>
   426fc:	b805883a 	mov	r2,r23
   42700:	dfc00817 	ldw	ra,32(sp)
   42704:	ddc00717 	ldw	r23,28(sp)
   42708:	dd800617 	ldw	r22,24(sp)
   4270c:	dd400517 	ldw	r21,20(sp)
   42710:	dd000417 	ldw	r20,16(sp)
   42714:	dcc00317 	ldw	r19,12(sp)
   42718:	dc800217 	ldw	r18,8(sp)
   4271c:	dc400117 	ldw	r17,4(sp)
   42720:	dc000017 	ldw	r16,0(sp)
   42724:	dec00904 	addi	sp,sp,36
   42728:	f800283a 	ret
   4272c:	002f883a 	mov	r23,zero
   42730:	003ff206 	br	426fc <__alt_data_end+0xfffd06fc>

00042734 <__smakebuf_r>:
   42734:	2880030b 	ldhu	r2,12(r5)
   42738:	10c0008c 	andi	r3,r2,2
   4273c:	1800401e 	bne	r3,zero,42840 <__smakebuf_r+0x10c>
   42740:	deffec04 	addi	sp,sp,-80
   42744:	dc000f15 	stw	r16,60(sp)
   42748:	2821883a 	mov	r16,r5
   4274c:	2940038f 	ldh	r5,14(r5)
   42750:	dc401015 	stw	r17,64(sp)
   42754:	dfc01315 	stw	ra,76(sp)
   42758:	dcc01215 	stw	r19,72(sp)
   4275c:	dc801115 	stw	r18,68(sp)
   42760:	2023883a 	mov	r17,r4
   42764:	28001b16 	blt	r5,zero,427d4 <__smakebuf_r+0xa0>
   42768:	d80d883a 	mov	r6,sp
   4276c:	0042d000 	call	42d00 <_fstat_r>
   42770:	10001716 	blt	r2,zero,427d0 <__smakebuf_r+0x9c>
   42774:	d8800117 	ldw	r2,4(sp)
   42778:	00e00014 	movui	r3,32768
   4277c:	10bc000c 	andi	r2,r2,61440
   42780:	10c03726 	beq	r2,r3,42860 <__smakebuf_r+0x12c>
   42784:	80c0030b 	ldhu	r3,12(r16)
   42788:	18c20014 	ori	r3,r3,2048
   4278c:	80c0030d 	sth	r3,12(r16)
   42790:	00c80004 	movi	r3,8192
   42794:	10c03c1e 	bne	r2,r3,42888 <__smakebuf_r+0x154>
   42798:	8140038f 	ldh	r5,14(r16)
   4279c:	8809883a 	mov	r4,r17
   427a0:	0042d580 	call	42d58 <_isatty_r>
   427a4:	10004e26 	beq	r2,zero,428e0 <__smakebuf_r+0x1ac>
   427a8:	8080030b 	ldhu	r2,12(r16)
   427ac:	04c00044 	movi	r19,1
   427b0:	80c010c4 	addi	r3,r16,67
   427b4:	14c4b03a 	or	r2,r2,r19
   427b8:	8080030d 	sth	r2,12(r16)
   427bc:	80c00015 	stw	r3,0(r16)
   427c0:	80c00415 	stw	r3,16(r16)
   427c4:	84c00515 	stw	r19,20(r16)
   427c8:	04810004 	movi	r18,1024
   427cc:	00000706 	br	427ec <__smakebuf_r+0xb8>
   427d0:	8080030b 	ldhu	r2,12(r16)
   427d4:	10c0200c 	andi	r3,r2,128
   427d8:	18001f1e 	bne	r3,zero,42858 <__smakebuf_r+0x124>
   427dc:	04810004 	movi	r18,1024
   427e0:	10820014 	ori	r2,r2,2048
   427e4:	8080030d 	sth	r2,12(r16)
   427e8:	0027883a 	mov	r19,zero
   427ec:	8809883a 	mov	r4,r17
   427f0:	900b883a 	mov	r5,r18
   427f4:	00409300 	call	40930 <_malloc_r>
   427f8:	10002e26 	beq	r2,zero,428b4 <__smakebuf_r+0x180>
   427fc:	80c0030b 	ldhu	r3,12(r16)
   42800:	01000134 	movhi	r4,4
   42804:	21078204 	addi	r4,r4,7688
   42808:	89000f15 	stw	r4,60(r17)
   4280c:	18c02014 	ori	r3,r3,128
   42810:	80c0030d 	sth	r3,12(r16)
   42814:	80800015 	stw	r2,0(r16)
   42818:	80800415 	stw	r2,16(r16)
   4281c:	84800515 	stw	r18,20(r16)
   42820:	98001c1e 	bne	r19,zero,42894 <__smakebuf_r+0x160>
   42824:	dfc01317 	ldw	ra,76(sp)
   42828:	dcc01217 	ldw	r19,72(sp)
   4282c:	dc801117 	ldw	r18,68(sp)
   42830:	dc401017 	ldw	r17,64(sp)
   42834:	dc000f17 	ldw	r16,60(sp)
   42838:	dec01404 	addi	sp,sp,80
   4283c:	f800283a 	ret
   42840:	288010c4 	addi	r2,r5,67
   42844:	28800015 	stw	r2,0(r5)
   42848:	28800415 	stw	r2,16(r5)
   4284c:	00800044 	movi	r2,1
   42850:	28800515 	stw	r2,20(r5)
   42854:	f800283a 	ret
   42858:	04801004 	movi	r18,64
   4285c:	003fe006 	br	427e0 <__alt_data_end+0xfffd07e0>
   42860:	81000a17 	ldw	r4,40(r16)
   42864:	00c00134 	movhi	r3,4
   42868:	18caba04 	addi	r3,r3,10984
   4286c:	20ffc51e 	bne	r4,r3,42784 <__alt_data_end+0xfffd0784>
   42870:	80c0030b 	ldhu	r3,12(r16)
   42874:	01010004 	movi	r4,1024
   42878:	81001315 	stw	r4,76(r16)
   4287c:	1906b03a 	or	r3,r3,r4
   42880:	80c0030d 	sth	r3,12(r16)
   42884:	003fc206 	br	42790 <__alt_data_end+0xfffd0790>
   42888:	0027883a 	mov	r19,zero
   4288c:	04810004 	movi	r18,1024
   42890:	003fd606 	br	427ec <__alt_data_end+0xfffd07ec>
   42894:	8140038f 	ldh	r5,14(r16)
   42898:	8809883a 	mov	r4,r17
   4289c:	0042d580 	call	42d58 <_isatty_r>
   428a0:	103fe026 	beq	r2,zero,42824 <__alt_data_end+0xfffd0824>
   428a4:	8080030b 	ldhu	r2,12(r16)
   428a8:	10800054 	ori	r2,r2,1
   428ac:	8080030d 	sth	r2,12(r16)
   428b0:	003fdc06 	br	42824 <__alt_data_end+0xfffd0824>
   428b4:	8080030b 	ldhu	r2,12(r16)
   428b8:	10c0800c 	andi	r3,r2,512
   428bc:	183fd91e 	bne	r3,zero,42824 <__alt_data_end+0xfffd0824>
   428c0:	10800094 	ori	r2,r2,2
   428c4:	80c010c4 	addi	r3,r16,67
   428c8:	8080030d 	sth	r2,12(r16)
   428cc:	00800044 	movi	r2,1
   428d0:	80c00015 	stw	r3,0(r16)
   428d4:	80c00415 	stw	r3,16(r16)
   428d8:	80800515 	stw	r2,20(r16)
   428dc:	003fd106 	br	42824 <__alt_data_end+0xfffd0824>
   428e0:	04c00044 	movi	r19,1
   428e4:	04810004 	movi	r18,1024
   428e8:	003fc006 	br	427ec <__alt_data_end+0xfffd07ec>

000428ec <memset>:
   428ec:	20c000cc 	andi	r3,r4,3
   428f0:	2005883a 	mov	r2,r4
   428f4:	18004326 	beq	r3,zero,42a04 <memset+0x118>
   428f8:	31ffffc4 	addi	r7,r6,-1
   428fc:	30004026 	beq	r6,zero,42a00 <memset+0x114>
   42900:	2813883a 	mov	r9,r5
   42904:	200d883a 	mov	r6,r4
   42908:	2007883a 	mov	r3,r4
   4290c:	00000406 	br	42920 <memset+0x34>
   42910:	3a3fffc4 	addi	r8,r7,-1
   42914:	31800044 	addi	r6,r6,1
   42918:	38003926 	beq	r7,zero,42a00 <memset+0x114>
   4291c:	400f883a 	mov	r7,r8
   42920:	18c00044 	addi	r3,r3,1
   42924:	32400005 	stb	r9,0(r6)
   42928:	1a0000cc 	andi	r8,r3,3
   4292c:	403ff81e 	bne	r8,zero,42910 <__alt_data_end+0xfffd0910>
   42930:	010000c4 	movi	r4,3
   42934:	21c02d2e 	bgeu	r4,r7,429ec <memset+0x100>
   42938:	29803fcc 	andi	r6,r5,255
   4293c:	3008923a 	slli	r4,r6,8
   42940:	218cb03a 	or	r6,r4,r6
   42944:	3008943a 	slli	r4,r6,16
   42948:	218cb03a 	or	r6,r4,r6
   4294c:	010003c4 	movi	r4,15
   42950:	21c0182e 	bgeu	r4,r7,429b4 <memset+0xc8>
   42954:	3b3ffc04 	addi	r12,r7,-16
   42958:	6018d13a 	srli	r12,r12,4
   4295c:	1a000104 	addi	r8,r3,4
   42960:	1ac00204 	addi	r11,r3,8
   42964:	6008913a 	slli	r4,r12,4
   42968:	1a800304 	addi	r10,r3,12
   4296c:	1813883a 	mov	r9,r3
   42970:	21000504 	addi	r4,r4,20
   42974:	1909883a 	add	r4,r3,r4
   42978:	49800015 	stw	r6,0(r9)
   4297c:	41800015 	stw	r6,0(r8)
   42980:	59800015 	stw	r6,0(r11)
   42984:	51800015 	stw	r6,0(r10)
   42988:	42000404 	addi	r8,r8,16
   4298c:	4a400404 	addi	r9,r9,16
   42990:	5ac00404 	addi	r11,r11,16
   42994:	52800404 	addi	r10,r10,16
   42998:	413ff71e 	bne	r8,r4,42978 <__alt_data_end+0xfffd0978>
   4299c:	63000044 	addi	r12,r12,1
   429a0:	6018913a 	slli	r12,r12,4
   429a4:	39c003cc 	andi	r7,r7,15
   429a8:	010000c4 	movi	r4,3
   429ac:	1b07883a 	add	r3,r3,r12
   429b0:	21c00e2e 	bgeu	r4,r7,429ec <memset+0x100>
   429b4:	1813883a 	mov	r9,r3
   429b8:	3811883a 	mov	r8,r7
   429bc:	010000c4 	movi	r4,3
   429c0:	49800015 	stw	r6,0(r9)
   429c4:	423fff04 	addi	r8,r8,-4
   429c8:	4a400104 	addi	r9,r9,4
   429cc:	223ffc36 	bltu	r4,r8,429c0 <__alt_data_end+0xfffd09c0>
   429d0:	393fff04 	addi	r4,r7,-4
   429d4:	2008d0ba 	srli	r4,r4,2
   429d8:	39c000cc 	andi	r7,r7,3
   429dc:	21000044 	addi	r4,r4,1
   429e0:	2109883a 	add	r4,r4,r4
   429e4:	2109883a 	add	r4,r4,r4
   429e8:	1907883a 	add	r3,r3,r4
   429ec:	38000426 	beq	r7,zero,42a00 <memset+0x114>
   429f0:	19cf883a 	add	r7,r3,r7
   429f4:	19400005 	stb	r5,0(r3)
   429f8:	18c00044 	addi	r3,r3,1
   429fc:	19fffd1e 	bne	r3,r7,429f4 <__alt_data_end+0xfffd09f4>
   42a00:	f800283a 	ret
   42a04:	2007883a 	mov	r3,r4
   42a08:	300f883a 	mov	r7,r6
   42a0c:	003fc806 	br	42930 <__alt_data_end+0xfffd0930>

00042a10 <__sread>:
   42a10:	defffe04 	addi	sp,sp,-8
   42a14:	dc000015 	stw	r16,0(sp)
   42a18:	2821883a 	mov	r16,r5
   42a1c:	2940038f 	ldh	r5,14(r5)
   42a20:	dfc00115 	stw	ra,4(sp)
   42a24:	0042e080 	call	42e08 <_read_r>
   42a28:	10000716 	blt	r2,zero,42a48 <__sread+0x38>
   42a2c:	80c01417 	ldw	r3,80(r16)
   42a30:	1887883a 	add	r3,r3,r2
   42a34:	80c01415 	stw	r3,80(r16)
   42a38:	dfc00117 	ldw	ra,4(sp)
   42a3c:	dc000017 	ldw	r16,0(sp)
   42a40:	dec00204 	addi	sp,sp,8
   42a44:	f800283a 	ret
   42a48:	80c0030b 	ldhu	r3,12(r16)
   42a4c:	18fbffcc 	andi	r3,r3,61439
   42a50:	80c0030d 	sth	r3,12(r16)
   42a54:	dfc00117 	ldw	ra,4(sp)
   42a58:	dc000017 	ldw	r16,0(sp)
   42a5c:	dec00204 	addi	sp,sp,8
   42a60:	f800283a 	ret

00042a64 <__seofread>:
   42a64:	0005883a 	mov	r2,zero
   42a68:	f800283a 	ret

00042a6c <__swrite>:
   42a6c:	2880030b 	ldhu	r2,12(r5)
   42a70:	defffb04 	addi	sp,sp,-20
   42a74:	dcc00315 	stw	r19,12(sp)
   42a78:	dc800215 	stw	r18,8(sp)
   42a7c:	dc400115 	stw	r17,4(sp)
   42a80:	dc000015 	stw	r16,0(sp)
   42a84:	dfc00415 	stw	ra,16(sp)
   42a88:	10c0400c 	andi	r3,r2,256
   42a8c:	2821883a 	mov	r16,r5
   42a90:	2027883a 	mov	r19,r4
   42a94:	3025883a 	mov	r18,r6
   42a98:	3823883a 	mov	r17,r7
   42a9c:	18000526 	beq	r3,zero,42ab4 <__swrite+0x48>
   42aa0:	2940038f 	ldh	r5,14(r5)
   42aa4:	000d883a 	mov	r6,zero
   42aa8:	01c00084 	movi	r7,2
   42aac:	0042dac0 	call	42dac <_lseek_r>
   42ab0:	8080030b 	ldhu	r2,12(r16)
   42ab4:	8140038f 	ldh	r5,14(r16)
   42ab8:	10bbffcc 	andi	r2,r2,61439
   42abc:	9809883a 	mov	r4,r19
   42ac0:	900d883a 	mov	r6,r18
   42ac4:	880f883a 	mov	r7,r17
   42ac8:	8080030d 	sth	r2,12(r16)
   42acc:	dfc00417 	ldw	ra,16(sp)
   42ad0:	dcc00317 	ldw	r19,12(sp)
   42ad4:	dc800217 	ldw	r18,8(sp)
   42ad8:	dc400117 	ldw	r17,4(sp)
   42adc:	dc000017 	ldw	r16,0(sp)
   42ae0:	dec00504 	addi	sp,sp,20
   42ae4:	0042b4c1 	jmpi	42b4c <_write_r>

00042ae8 <__sseek>:
   42ae8:	defffe04 	addi	sp,sp,-8
   42aec:	dc000015 	stw	r16,0(sp)
   42af0:	2821883a 	mov	r16,r5
   42af4:	2940038f 	ldh	r5,14(r5)
   42af8:	dfc00115 	stw	ra,4(sp)
   42afc:	0042dac0 	call	42dac <_lseek_r>
   42b00:	00ffffc4 	movi	r3,-1
   42b04:	10c00826 	beq	r2,r3,42b28 <__sseek+0x40>
   42b08:	80c0030b 	ldhu	r3,12(r16)
   42b0c:	80801415 	stw	r2,80(r16)
   42b10:	18c40014 	ori	r3,r3,4096
   42b14:	80c0030d 	sth	r3,12(r16)
   42b18:	dfc00117 	ldw	ra,4(sp)
   42b1c:	dc000017 	ldw	r16,0(sp)
   42b20:	dec00204 	addi	sp,sp,8
   42b24:	f800283a 	ret
   42b28:	80c0030b 	ldhu	r3,12(r16)
   42b2c:	18fbffcc 	andi	r3,r3,61439
   42b30:	80c0030d 	sth	r3,12(r16)
   42b34:	dfc00117 	ldw	ra,4(sp)
   42b38:	dc000017 	ldw	r16,0(sp)
   42b3c:	dec00204 	addi	sp,sp,8
   42b40:	f800283a 	ret

00042b44 <__sclose>:
   42b44:	2940038f 	ldh	r5,14(r5)
   42b48:	0042ba81 	jmpi	42ba8 <_close_r>

00042b4c <_write_r>:
   42b4c:	defffd04 	addi	sp,sp,-12
   42b50:	dc000015 	stw	r16,0(sp)
   42b54:	04000174 	movhi	r16,5
   42b58:	dc400115 	stw	r17,4(sp)
   42b5c:	8422e004 	addi	r16,r16,-29824
   42b60:	2023883a 	mov	r17,r4
   42b64:	2809883a 	mov	r4,r5
   42b68:	300b883a 	mov	r5,r6
   42b6c:	380d883a 	mov	r6,r7
   42b70:	dfc00215 	stw	ra,8(sp)
   42b74:	80000015 	stw	zero,0(r16)
   42b78:	004383c0 	call	4383c <write>
   42b7c:	00ffffc4 	movi	r3,-1
   42b80:	10c00526 	beq	r2,r3,42b98 <_write_r+0x4c>
   42b84:	dfc00217 	ldw	ra,8(sp)
   42b88:	dc400117 	ldw	r17,4(sp)
   42b8c:	dc000017 	ldw	r16,0(sp)
   42b90:	dec00304 	addi	sp,sp,12
   42b94:	f800283a 	ret
   42b98:	80c00017 	ldw	r3,0(r16)
   42b9c:	183ff926 	beq	r3,zero,42b84 <__alt_data_end+0xfffd0b84>
   42ba0:	88c00015 	stw	r3,0(r17)
   42ba4:	003ff706 	br	42b84 <__alt_data_end+0xfffd0b84>

00042ba8 <_close_r>:
   42ba8:	defffd04 	addi	sp,sp,-12
   42bac:	dc000015 	stw	r16,0(sp)
   42bb0:	04000174 	movhi	r16,5
   42bb4:	dc400115 	stw	r17,4(sp)
   42bb8:	8422e004 	addi	r16,r16,-29824
   42bbc:	2023883a 	mov	r17,r4
   42bc0:	2809883a 	mov	r4,r5
   42bc4:	dfc00215 	stw	ra,8(sp)
   42bc8:	80000015 	stw	zero,0(r16)
   42bcc:	0042fe00 	call	42fe0 <close>
   42bd0:	00ffffc4 	movi	r3,-1
   42bd4:	10c00526 	beq	r2,r3,42bec <_close_r+0x44>
   42bd8:	dfc00217 	ldw	ra,8(sp)
   42bdc:	dc400117 	ldw	r17,4(sp)
   42be0:	dc000017 	ldw	r16,0(sp)
   42be4:	dec00304 	addi	sp,sp,12
   42be8:	f800283a 	ret
   42bec:	80c00017 	ldw	r3,0(r16)
   42bf0:	183ff926 	beq	r3,zero,42bd8 <__alt_data_end+0xfffd0bd8>
   42bf4:	88c00015 	stw	r3,0(r17)
   42bf8:	003ff706 	br	42bd8 <__alt_data_end+0xfffd0bd8>

00042bfc <_fclose_r>:
   42bfc:	28003926 	beq	r5,zero,42ce4 <_fclose_r+0xe8>
   42c00:	defffc04 	addi	sp,sp,-16
   42c04:	dc400115 	stw	r17,4(sp)
   42c08:	dc000015 	stw	r16,0(sp)
   42c0c:	dfc00315 	stw	ra,12(sp)
   42c10:	dc800215 	stw	r18,8(sp)
   42c14:	2023883a 	mov	r17,r4
   42c18:	2821883a 	mov	r16,r5
   42c1c:	20000226 	beq	r4,zero,42c28 <_fclose_r+0x2c>
   42c20:	20800e17 	ldw	r2,56(r4)
   42c24:	10002726 	beq	r2,zero,42cc4 <_fclose_r+0xc8>
   42c28:	8080030f 	ldh	r2,12(r16)
   42c2c:	1000071e 	bne	r2,zero,42c4c <_fclose_r+0x50>
   42c30:	0005883a 	mov	r2,zero
   42c34:	dfc00317 	ldw	ra,12(sp)
   42c38:	dc800217 	ldw	r18,8(sp)
   42c3c:	dc400117 	ldw	r17,4(sp)
   42c40:	dc000017 	ldw	r16,0(sp)
   42c44:	dec00404 	addi	sp,sp,16
   42c48:	f800283a 	ret
   42c4c:	8809883a 	mov	r4,r17
   42c50:	800b883a 	mov	r5,r16
   42c54:	0041b640 	call	41b64 <__sflush_r>
   42c58:	1025883a 	mov	r18,r2
   42c5c:	80800b17 	ldw	r2,44(r16)
   42c60:	10000426 	beq	r2,zero,42c74 <_fclose_r+0x78>
   42c64:	81400717 	ldw	r5,28(r16)
   42c68:	8809883a 	mov	r4,r17
   42c6c:	103ee83a 	callr	r2
   42c70:	10001616 	blt	r2,zero,42ccc <_fclose_r+0xd0>
   42c74:	8080030b 	ldhu	r2,12(r16)
   42c78:	1080200c 	andi	r2,r2,128
   42c7c:	1000151e 	bne	r2,zero,42cd4 <_fclose_r+0xd8>
   42c80:	81400c17 	ldw	r5,48(r16)
   42c84:	28000526 	beq	r5,zero,42c9c <_fclose_r+0xa0>
   42c88:	80801004 	addi	r2,r16,64
   42c8c:	28800226 	beq	r5,r2,42c98 <_fclose_r+0x9c>
   42c90:	8809883a 	mov	r4,r17
   42c94:	00422bc0 	call	422bc <_free_r>
   42c98:	80000c15 	stw	zero,48(r16)
   42c9c:	81401117 	ldw	r5,68(r16)
   42ca0:	28000326 	beq	r5,zero,42cb0 <_fclose_r+0xb4>
   42ca4:	8809883a 	mov	r4,r17
   42ca8:	00422bc0 	call	422bc <_free_r>
   42cac:	80001115 	stw	zero,68(r16)
   42cb0:	00421580 	call	42158 <__sfp_lock_acquire>
   42cb4:	8000030d 	sth	zero,12(r16)
   42cb8:	004215c0 	call	4215c <__sfp_lock_release>
   42cbc:	9005883a 	mov	r2,r18
   42cc0:	003fdc06 	br	42c34 <__alt_data_end+0xfffd0c34>
   42cc4:	00421480 	call	42148 <__sinit>
   42cc8:	003fd706 	br	42c28 <__alt_data_end+0xfffd0c28>
   42ccc:	04bfffc4 	movi	r18,-1
   42cd0:	003fe806 	br	42c74 <__alt_data_end+0xfffd0c74>
   42cd4:	81400417 	ldw	r5,16(r16)
   42cd8:	8809883a 	mov	r4,r17
   42cdc:	00422bc0 	call	422bc <_free_r>
   42ce0:	003fe706 	br	42c80 <__alt_data_end+0xfffd0c80>
   42ce4:	0005883a 	mov	r2,zero
   42ce8:	f800283a 	ret

00042cec <fclose>:
   42cec:	00800134 	movhi	r2,4
   42cf0:	109c3504 	addi	r2,r2,28884
   42cf4:	200b883a 	mov	r5,r4
   42cf8:	11000017 	ldw	r4,0(r2)
   42cfc:	0042bfc1 	jmpi	42bfc <_fclose_r>

00042d00 <_fstat_r>:
   42d00:	defffd04 	addi	sp,sp,-12
   42d04:	dc000015 	stw	r16,0(sp)
   42d08:	04000174 	movhi	r16,5
   42d0c:	dc400115 	stw	r17,4(sp)
   42d10:	8422e004 	addi	r16,r16,-29824
   42d14:	2023883a 	mov	r17,r4
   42d18:	2809883a 	mov	r4,r5
   42d1c:	300b883a 	mov	r5,r6
   42d20:	dfc00215 	stw	ra,8(sp)
   42d24:	80000015 	stw	zero,0(r16)
   42d28:	004312c0 	call	4312c <fstat>
   42d2c:	00ffffc4 	movi	r3,-1
   42d30:	10c00526 	beq	r2,r3,42d48 <_fstat_r+0x48>
   42d34:	dfc00217 	ldw	ra,8(sp)
   42d38:	dc400117 	ldw	r17,4(sp)
   42d3c:	dc000017 	ldw	r16,0(sp)
   42d40:	dec00304 	addi	sp,sp,12
   42d44:	f800283a 	ret
   42d48:	80c00017 	ldw	r3,0(r16)
   42d4c:	183ff926 	beq	r3,zero,42d34 <__alt_data_end+0xfffd0d34>
   42d50:	88c00015 	stw	r3,0(r17)
   42d54:	003ff706 	br	42d34 <__alt_data_end+0xfffd0d34>

00042d58 <_isatty_r>:
   42d58:	defffd04 	addi	sp,sp,-12
   42d5c:	dc000015 	stw	r16,0(sp)
   42d60:	04000174 	movhi	r16,5
   42d64:	dc400115 	stw	r17,4(sp)
   42d68:	8422e004 	addi	r16,r16,-29824
   42d6c:	2023883a 	mov	r17,r4
   42d70:	2809883a 	mov	r4,r5
   42d74:	dfc00215 	stw	ra,8(sp)
   42d78:	80000015 	stw	zero,0(r16)
   42d7c:	004322c0 	call	4322c <isatty>
   42d80:	00ffffc4 	movi	r3,-1
   42d84:	10c00526 	beq	r2,r3,42d9c <_isatty_r+0x44>
   42d88:	dfc00217 	ldw	ra,8(sp)
   42d8c:	dc400117 	ldw	r17,4(sp)
   42d90:	dc000017 	ldw	r16,0(sp)
   42d94:	dec00304 	addi	sp,sp,12
   42d98:	f800283a 	ret
   42d9c:	80c00017 	ldw	r3,0(r16)
   42da0:	183ff926 	beq	r3,zero,42d88 <__alt_data_end+0xfffd0d88>
   42da4:	88c00015 	stw	r3,0(r17)
   42da8:	003ff706 	br	42d88 <__alt_data_end+0xfffd0d88>

00042dac <_lseek_r>:
   42dac:	defffd04 	addi	sp,sp,-12
   42db0:	dc000015 	stw	r16,0(sp)
   42db4:	04000174 	movhi	r16,5
   42db8:	dc400115 	stw	r17,4(sp)
   42dbc:	8422e004 	addi	r16,r16,-29824
   42dc0:	2023883a 	mov	r17,r4
   42dc4:	2809883a 	mov	r4,r5
   42dc8:	300b883a 	mov	r5,r6
   42dcc:	380d883a 	mov	r6,r7
   42dd0:	dfc00215 	stw	ra,8(sp)
   42dd4:	80000015 	stw	zero,0(r16)
   42dd8:	00434040 	call	43404 <lseek>
   42ddc:	00ffffc4 	movi	r3,-1
   42de0:	10c00526 	beq	r2,r3,42df8 <_lseek_r+0x4c>
   42de4:	dfc00217 	ldw	ra,8(sp)
   42de8:	dc400117 	ldw	r17,4(sp)
   42dec:	dc000017 	ldw	r16,0(sp)
   42df0:	dec00304 	addi	sp,sp,12
   42df4:	f800283a 	ret
   42df8:	80c00017 	ldw	r3,0(r16)
   42dfc:	183ff926 	beq	r3,zero,42de4 <__alt_data_end+0xfffd0de4>
   42e00:	88c00015 	stw	r3,0(r17)
   42e04:	003ff706 	br	42de4 <__alt_data_end+0xfffd0de4>

00042e08 <_read_r>:
   42e08:	defffd04 	addi	sp,sp,-12
   42e0c:	dc000015 	stw	r16,0(sp)
   42e10:	04000174 	movhi	r16,5
   42e14:	dc400115 	stw	r17,4(sp)
   42e18:	8422e004 	addi	r16,r16,-29824
   42e1c:	2023883a 	mov	r17,r4
   42e20:	2809883a 	mov	r4,r5
   42e24:	300b883a 	mov	r5,r6
   42e28:	380d883a 	mov	r6,r7
   42e2c:	dfc00215 	stw	ra,8(sp)
   42e30:	80000015 	stw	zero,0(r16)
   42e34:	00435e00 	call	435e0 <read>
   42e38:	00ffffc4 	movi	r3,-1
   42e3c:	10c00526 	beq	r2,r3,42e54 <_read_r+0x4c>
   42e40:	dfc00217 	ldw	ra,8(sp)
   42e44:	dc400117 	ldw	r17,4(sp)
   42e48:	dc000017 	ldw	r16,0(sp)
   42e4c:	dec00304 	addi	sp,sp,12
   42e50:	f800283a 	ret
   42e54:	80c00017 	ldw	r3,0(r16)
   42e58:	183ff926 	beq	r3,zero,42e40 <__alt_data_end+0xfffd0e40>
   42e5c:	88c00015 	stw	r3,0(r17)
   42e60:	003ff706 	br	42e40 <__alt_data_end+0xfffd0e40>

00042e64 <udivmodsi4>:
   42e64:	2900182e 	bgeu	r5,r4,42ec8 <udivmodsi4+0x64>
   42e68:	28001716 	blt	r5,zero,42ec8 <udivmodsi4+0x64>
   42e6c:	00800804 	movi	r2,32
   42e70:	00c00044 	movi	r3,1
   42e74:	00000206 	br	42e80 <udivmodsi4+0x1c>
   42e78:	10001126 	beq	r2,zero,42ec0 <udivmodsi4+0x5c>
   42e7c:	28000516 	blt	r5,zero,42e94 <udivmodsi4+0x30>
   42e80:	294b883a 	add	r5,r5,r5
   42e84:	10bfffc4 	addi	r2,r2,-1
   42e88:	18c7883a 	add	r3,r3,r3
   42e8c:	293ffa36 	bltu	r5,r4,42e78 <__alt_data_end+0xfffd0e78>
   42e90:	18000b26 	beq	r3,zero,42ec0 <udivmodsi4+0x5c>
   42e94:	0005883a 	mov	r2,zero
   42e98:	21400236 	bltu	r4,r5,42ea4 <udivmodsi4+0x40>
   42e9c:	2149c83a 	sub	r4,r4,r5
   42ea0:	10c4b03a 	or	r2,r2,r3
   42ea4:	1806d07a 	srli	r3,r3,1
   42ea8:	280ad07a 	srli	r5,r5,1
   42eac:	183ffa1e 	bne	r3,zero,42e98 <__alt_data_end+0xfffd0e98>
   42eb0:	3000011e 	bne	r6,zero,42eb8 <udivmodsi4+0x54>
   42eb4:	f800283a 	ret
   42eb8:	2005883a 	mov	r2,r4
   42ebc:	f800283a 	ret
   42ec0:	0005883a 	mov	r2,zero
   42ec4:	003ffa06 	br	42eb0 <__alt_data_end+0xfffd0eb0>
   42ec8:	00c00044 	movi	r3,1
   42ecc:	003ff106 	br	42e94 <__alt_data_end+0xfffd0e94>

00042ed0 <__divsi3>:
   42ed0:	defffe04 	addi	sp,sp,-8
   42ed4:	dfc00115 	stw	ra,4(sp)
   42ed8:	dc000015 	stw	r16,0(sp)
   42edc:	20000b16 	blt	r4,zero,42f0c <__divsi3+0x3c>
   42ee0:	0021883a 	mov	r16,zero
   42ee4:	28000c16 	blt	r5,zero,42f18 <__divsi3+0x48>
   42ee8:	000d883a 	mov	r6,zero
   42eec:	0042e640 	call	42e64 <udivmodsi4>
   42ef0:	0407c83a 	sub	r3,zero,r16
   42ef4:	1884f03a 	xor	r2,r3,r2
   42ef8:	1405883a 	add	r2,r2,r16
   42efc:	dfc00117 	ldw	ra,4(sp)
   42f00:	dc000017 	ldw	r16,0(sp)
   42f04:	dec00204 	addi	sp,sp,8
   42f08:	f800283a 	ret
   42f0c:	0109c83a 	sub	r4,zero,r4
   42f10:	04000044 	movi	r16,1
   42f14:	283ff40e 	bge	r5,zero,42ee8 <__alt_data_end+0xfffd0ee8>
   42f18:	014bc83a 	sub	r5,zero,r5
   42f1c:	8400005c 	xori	r16,r16,1
   42f20:	003ff106 	br	42ee8 <__alt_data_end+0xfffd0ee8>

00042f24 <__modsi3>:
   42f24:	defffd04 	addi	sp,sp,-12
   42f28:	dfc00215 	stw	ra,8(sp)
   42f2c:	dc400115 	stw	r17,4(sp)
   42f30:	dc000015 	stw	r16,0(sp)
   42f34:	20000c16 	blt	r4,zero,42f68 <__modsi3+0x44>
   42f38:	0023883a 	mov	r17,zero
   42f3c:	0021883a 	mov	r16,zero
   42f40:	28000d16 	blt	r5,zero,42f78 <__modsi3+0x54>
   42f44:	01800044 	movi	r6,1
   42f48:	0042e640 	call	42e64 <udivmodsi4>
   42f4c:	1404f03a 	xor	r2,r2,r16
   42f50:	8885883a 	add	r2,r17,r2
   42f54:	dfc00217 	ldw	ra,8(sp)
   42f58:	dc400117 	ldw	r17,4(sp)
   42f5c:	dc000017 	ldw	r16,0(sp)
   42f60:	dec00304 	addi	sp,sp,12
   42f64:	f800283a 	ret
   42f68:	0109c83a 	sub	r4,zero,r4
   42f6c:	04400044 	movi	r17,1
   42f70:	043fffc4 	movi	r16,-1
   42f74:	283ff30e 	bge	r5,zero,42f44 <__alt_data_end+0xfffd0f44>
   42f78:	014bc83a 	sub	r5,zero,r5
   42f7c:	003ff106 	br	42f44 <__alt_data_end+0xfffd0f44>

00042f80 <__udivsi3>:
   42f80:	000d883a 	mov	r6,zero
   42f84:	0042e641 	jmpi	42e64 <udivmodsi4>

00042f88 <__umodsi3>:
   42f88:	01800044 	movi	r6,1
   42f8c:	0042e641 	jmpi	42e64 <udivmodsi4>

00042f90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42f90:	defffe04 	addi	sp,sp,-8
   42f94:	dfc00115 	stw	ra,4(sp)
   42f98:	df000015 	stw	fp,0(sp)
   42f9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42fa0:	00800134 	movhi	r2,4
   42fa4:	109c3d04 	addi	r2,r2,28916
   42fa8:	10800017 	ldw	r2,0(r2)
   42fac:	10000526 	beq	r2,zero,42fc4 <alt_get_errno+0x34>
   42fb0:	00800134 	movhi	r2,4
   42fb4:	109c3d04 	addi	r2,r2,28916
   42fb8:	10800017 	ldw	r2,0(r2)
   42fbc:	103ee83a 	callr	r2
   42fc0:	00000206 	br	42fcc <alt_get_errno+0x3c>
   42fc4:	00800174 	movhi	r2,5
   42fc8:	10a2e004 	addi	r2,r2,-29824
}
   42fcc:	e037883a 	mov	sp,fp
   42fd0:	dfc00117 	ldw	ra,4(sp)
   42fd4:	df000017 	ldw	fp,0(sp)
   42fd8:	dec00204 	addi	sp,sp,8
   42fdc:	f800283a 	ret

00042fe0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42fe0:	defffb04 	addi	sp,sp,-20
   42fe4:	dfc00415 	stw	ra,16(sp)
   42fe8:	df000315 	stw	fp,12(sp)
   42fec:	df000304 	addi	fp,sp,12
   42ff0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42ff4:	e0bfff17 	ldw	r2,-4(fp)
   42ff8:	10000616 	blt	r2,zero,43014 <close+0x34>
   42ffc:	e0bfff17 	ldw	r2,-4(fp)
   43000:	10c00324 	muli	r3,r2,12
   43004:	00800134 	movhi	r2,4
   43008:	1097bc04 	addi	r2,r2,24304
   4300c:	1885883a 	add	r2,r3,r2
   43010:	00000106 	br	43018 <close+0x38>
   43014:	0005883a 	mov	r2,zero
   43018:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4301c:	e0bffd17 	ldw	r2,-12(fp)
   43020:	10001926 	beq	r2,zero,43088 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43024:	e0bffd17 	ldw	r2,-12(fp)
   43028:	10800017 	ldw	r2,0(r2)
   4302c:	10800417 	ldw	r2,16(r2)
   43030:	10000626 	beq	r2,zero,4304c <close+0x6c>
   43034:	e0bffd17 	ldw	r2,-12(fp)
   43038:	10800017 	ldw	r2,0(r2)
   4303c:	10800417 	ldw	r2,16(r2)
   43040:	e13ffd17 	ldw	r4,-12(fp)
   43044:	103ee83a 	callr	r2
   43048:	00000106 	br	43050 <close+0x70>
   4304c:	0005883a 	mov	r2,zero
   43050:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43054:	e13fff17 	ldw	r4,-4(fp)
   43058:	00436dc0 	call	436dc <alt_release_fd>
    if (rval < 0)
   4305c:	e0bffe17 	ldw	r2,-8(fp)
   43060:	1000070e 	bge	r2,zero,43080 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43064:	0042f900 	call	42f90 <alt_get_errno>
   43068:	1007883a 	mov	r3,r2
   4306c:	e0bffe17 	ldw	r2,-8(fp)
   43070:	0085c83a 	sub	r2,zero,r2
   43074:	18800015 	stw	r2,0(r3)
      return -1;
   43078:	00bfffc4 	movi	r2,-1
   4307c:	00000706 	br	4309c <close+0xbc>
    }
    return 0;
   43080:	0005883a 	mov	r2,zero
   43084:	00000506 	br	4309c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43088:	0042f900 	call	42f90 <alt_get_errno>
   4308c:	1007883a 	mov	r3,r2
   43090:	00801444 	movi	r2,81
   43094:	18800015 	stw	r2,0(r3)
    return -1;
   43098:	00bfffc4 	movi	r2,-1
  }
}
   4309c:	e037883a 	mov	sp,fp
   430a0:	dfc00117 	ldw	ra,4(sp)
   430a4:	df000017 	ldw	fp,0(sp)
   430a8:	dec00204 	addi	sp,sp,8
   430ac:	f800283a 	ret

000430b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   430b0:	defffc04 	addi	sp,sp,-16
   430b4:	df000315 	stw	fp,12(sp)
   430b8:	df000304 	addi	fp,sp,12
   430bc:	e13ffd15 	stw	r4,-12(fp)
   430c0:	e17ffe15 	stw	r5,-8(fp)
   430c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   430c8:	e0bfff17 	ldw	r2,-4(fp)
}
   430cc:	e037883a 	mov	sp,fp
   430d0:	df000017 	ldw	fp,0(sp)
   430d4:	dec00104 	addi	sp,sp,4
   430d8:	f800283a 	ret

000430dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   430dc:	defffe04 	addi	sp,sp,-8
   430e0:	dfc00115 	stw	ra,4(sp)
   430e4:	df000015 	stw	fp,0(sp)
   430e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   430ec:	00800134 	movhi	r2,4
   430f0:	109c3d04 	addi	r2,r2,28916
   430f4:	10800017 	ldw	r2,0(r2)
   430f8:	10000526 	beq	r2,zero,43110 <alt_get_errno+0x34>
   430fc:	00800134 	movhi	r2,4
   43100:	109c3d04 	addi	r2,r2,28916
   43104:	10800017 	ldw	r2,0(r2)
   43108:	103ee83a 	callr	r2
   4310c:	00000206 	br	43118 <alt_get_errno+0x3c>
   43110:	00800174 	movhi	r2,5
   43114:	10a2e004 	addi	r2,r2,-29824
}
   43118:	e037883a 	mov	sp,fp
   4311c:	dfc00117 	ldw	ra,4(sp)
   43120:	df000017 	ldw	fp,0(sp)
   43124:	dec00204 	addi	sp,sp,8
   43128:	f800283a 	ret

0004312c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4312c:	defffb04 	addi	sp,sp,-20
   43130:	dfc00415 	stw	ra,16(sp)
   43134:	df000315 	stw	fp,12(sp)
   43138:	df000304 	addi	fp,sp,12
   4313c:	e13ffe15 	stw	r4,-8(fp)
   43140:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43144:	e0bffe17 	ldw	r2,-8(fp)
   43148:	10000616 	blt	r2,zero,43164 <fstat+0x38>
   4314c:	e0bffe17 	ldw	r2,-8(fp)
   43150:	10c00324 	muli	r3,r2,12
   43154:	00800134 	movhi	r2,4
   43158:	1097bc04 	addi	r2,r2,24304
   4315c:	1885883a 	add	r2,r3,r2
   43160:	00000106 	br	43168 <fstat+0x3c>
   43164:	0005883a 	mov	r2,zero
   43168:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4316c:	e0bffd17 	ldw	r2,-12(fp)
   43170:	10001026 	beq	r2,zero,431b4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43174:	e0bffd17 	ldw	r2,-12(fp)
   43178:	10800017 	ldw	r2,0(r2)
   4317c:	10800817 	ldw	r2,32(r2)
   43180:	10000726 	beq	r2,zero,431a0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   43184:	e0bffd17 	ldw	r2,-12(fp)
   43188:	10800017 	ldw	r2,0(r2)
   4318c:	10800817 	ldw	r2,32(r2)
   43190:	e13ffd17 	ldw	r4,-12(fp)
   43194:	e17fff17 	ldw	r5,-4(fp)
   43198:	103ee83a 	callr	r2
   4319c:	00000a06 	br	431c8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   431a0:	e0bfff17 	ldw	r2,-4(fp)
   431a4:	00c80004 	movi	r3,8192
   431a8:	10c00115 	stw	r3,4(r2)
      return 0;
   431ac:	0005883a 	mov	r2,zero
   431b0:	00000506 	br	431c8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   431b4:	00430dc0 	call	430dc <alt_get_errno>
   431b8:	1007883a 	mov	r3,r2
   431bc:	00801444 	movi	r2,81
   431c0:	18800015 	stw	r2,0(r3)
    return -1;
   431c4:	00bfffc4 	movi	r2,-1
  }
}
   431c8:	e037883a 	mov	sp,fp
   431cc:	dfc00117 	ldw	ra,4(sp)
   431d0:	df000017 	ldw	fp,0(sp)
   431d4:	dec00204 	addi	sp,sp,8
   431d8:	f800283a 	ret

000431dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   431dc:	defffe04 	addi	sp,sp,-8
   431e0:	dfc00115 	stw	ra,4(sp)
   431e4:	df000015 	stw	fp,0(sp)
   431e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   431ec:	00800134 	movhi	r2,4
   431f0:	109c3d04 	addi	r2,r2,28916
   431f4:	10800017 	ldw	r2,0(r2)
   431f8:	10000526 	beq	r2,zero,43210 <alt_get_errno+0x34>
   431fc:	00800134 	movhi	r2,4
   43200:	109c3d04 	addi	r2,r2,28916
   43204:	10800017 	ldw	r2,0(r2)
   43208:	103ee83a 	callr	r2
   4320c:	00000206 	br	43218 <alt_get_errno+0x3c>
   43210:	00800174 	movhi	r2,5
   43214:	10a2e004 	addi	r2,r2,-29824
}
   43218:	e037883a 	mov	sp,fp
   4321c:	dfc00117 	ldw	ra,4(sp)
   43220:	df000017 	ldw	fp,0(sp)
   43224:	dec00204 	addi	sp,sp,8
   43228:	f800283a 	ret

0004322c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4322c:	deffed04 	addi	sp,sp,-76
   43230:	dfc01215 	stw	ra,72(sp)
   43234:	df001115 	stw	fp,68(sp)
   43238:	df001104 	addi	fp,sp,68
   4323c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43240:	e0bfff17 	ldw	r2,-4(fp)
   43244:	10000616 	blt	r2,zero,43260 <isatty+0x34>
   43248:	e0bfff17 	ldw	r2,-4(fp)
   4324c:	10c00324 	muli	r3,r2,12
   43250:	00800134 	movhi	r2,4
   43254:	1097bc04 	addi	r2,r2,24304
   43258:	1885883a 	add	r2,r3,r2
   4325c:	00000106 	br	43264 <isatty+0x38>
   43260:	0005883a 	mov	r2,zero
   43264:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43268:	e0bfef17 	ldw	r2,-68(fp)
   4326c:	10000e26 	beq	r2,zero,432a8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43270:	e0bfef17 	ldw	r2,-68(fp)
   43274:	10800017 	ldw	r2,0(r2)
   43278:	10800817 	ldw	r2,32(r2)
   4327c:	1000021e 	bne	r2,zero,43288 <isatty+0x5c>
    {
      return 1;
   43280:	00800044 	movi	r2,1
   43284:	00000d06 	br	432bc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43288:	e0bff004 	addi	r2,fp,-64
   4328c:	e13fff17 	ldw	r4,-4(fp)
   43290:	100b883a 	mov	r5,r2
   43294:	004312c0 	call	4312c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43298:	e0bff117 	ldw	r2,-60(fp)
   4329c:	10880020 	cmpeqi	r2,r2,8192
   432a0:	10803fcc 	andi	r2,r2,255
   432a4:	00000506 	br	432bc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   432a8:	00431dc0 	call	431dc <alt_get_errno>
   432ac:	1007883a 	mov	r3,r2
   432b0:	00801444 	movi	r2,81
   432b4:	18800015 	stw	r2,0(r3)
    return 0;
   432b8:	0005883a 	mov	r2,zero
  }
}
   432bc:	e037883a 	mov	sp,fp
   432c0:	dfc00117 	ldw	ra,4(sp)
   432c4:	df000017 	ldw	fp,0(sp)
   432c8:	dec00204 	addi	sp,sp,8
   432cc:	f800283a 	ret

000432d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   432d0:	defffc04 	addi	sp,sp,-16
   432d4:	df000315 	stw	fp,12(sp)
   432d8:	df000304 	addi	fp,sp,12
   432dc:	e13ffd15 	stw	r4,-12(fp)
   432e0:	e17ffe15 	stw	r5,-8(fp)
   432e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   432e8:	e0fffe17 	ldw	r3,-8(fp)
   432ec:	e0bffd17 	ldw	r2,-12(fp)
   432f0:	18800c26 	beq	r3,r2,43324 <alt_load_section+0x54>
  {
    while( to != end )
   432f4:	00000806 	br	43318 <alt_load_section+0x48>
    {
      *to++ = *from++;
   432f8:	e0bffe17 	ldw	r2,-8(fp)
   432fc:	10c00104 	addi	r3,r2,4
   43300:	e0fffe15 	stw	r3,-8(fp)
   43304:	e0fffd17 	ldw	r3,-12(fp)
   43308:	19000104 	addi	r4,r3,4
   4330c:	e13ffd15 	stw	r4,-12(fp)
   43310:	18c00017 	ldw	r3,0(r3)
   43314:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   43318:	e0fffe17 	ldw	r3,-8(fp)
   4331c:	e0bfff17 	ldw	r2,-4(fp)
   43320:	18bff51e 	bne	r3,r2,432f8 <__alt_data_end+0xfffd12f8>
    {
      *to++ = *from++;
    }
  }
}
   43324:	e037883a 	mov	sp,fp
   43328:	df000017 	ldw	fp,0(sp)
   4332c:	dec00104 	addi	sp,sp,4
   43330:	f800283a 	ret

00043334 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43334:	defffe04 	addi	sp,sp,-8
   43338:	dfc00115 	stw	ra,4(sp)
   4333c:	df000015 	stw	fp,0(sp)
   43340:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43344:	01000134 	movhi	r4,4
   43348:	211c4204 	addi	r4,r4,28936
   4334c:	01400134 	movhi	r5,4
   43350:	2955a704 	addi	r5,r5,22172
   43354:	01800134 	movhi	r6,4
   43358:	319c4204 	addi	r6,r6,28936
   4335c:	00432d00 	call	432d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43360:	01000134 	movhi	r4,4
   43364:	21000804 	addi	r4,r4,32
   43368:	01400134 	movhi	r5,4
   4336c:	29400804 	addi	r5,r5,32
   43370:	01800134 	movhi	r6,4
   43374:	31806f04 	addi	r6,r6,444
   43378:	00432d00 	call	432d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4337c:	01000134 	movhi	r4,4
   43380:	21159504 	addi	r4,r4,22100
   43384:	01400134 	movhi	r5,4
   43388:	29559504 	addi	r5,r5,22100
   4338c:	01800134 	movhi	r6,4
   43390:	3195a704 	addi	r6,r6,22172
   43394:	00432d00 	call	432d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43398:	00445740 	call	44574 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4339c:	00447640 	call	44764 <alt_icache_flush_all>
}
   433a0:	e037883a 	mov	sp,fp
   433a4:	dfc00117 	ldw	ra,4(sp)
   433a8:	df000017 	ldw	fp,0(sp)
   433ac:	dec00204 	addi	sp,sp,8
   433b0:	f800283a 	ret

000433b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   433b4:	defffe04 	addi	sp,sp,-8
   433b8:	dfc00115 	stw	ra,4(sp)
   433bc:	df000015 	stw	fp,0(sp)
   433c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   433c4:	00800134 	movhi	r2,4
   433c8:	109c3d04 	addi	r2,r2,28916
   433cc:	10800017 	ldw	r2,0(r2)
   433d0:	10000526 	beq	r2,zero,433e8 <alt_get_errno+0x34>
   433d4:	00800134 	movhi	r2,4
   433d8:	109c3d04 	addi	r2,r2,28916
   433dc:	10800017 	ldw	r2,0(r2)
   433e0:	103ee83a 	callr	r2
   433e4:	00000206 	br	433f0 <alt_get_errno+0x3c>
   433e8:	00800174 	movhi	r2,5
   433ec:	10a2e004 	addi	r2,r2,-29824
}
   433f0:	e037883a 	mov	sp,fp
   433f4:	dfc00117 	ldw	ra,4(sp)
   433f8:	df000017 	ldw	fp,0(sp)
   433fc:	dec00204 	addi	sp,sp,8
   43400:	f800283a 	ret

00043404 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43404:	defff904 	addi	sp,sp,-28
   43408:	dfc00615 	stw	ra,24(sp)
   4340c:	df000515 	stw	fp,20(sp)
   43410:	df000504 	addi	fp,sp,20
   43414:	e13ffd15 	stw	r4,-12(fp)
   43418:	e17ffe15 	stw	r5,-8(fp)
   4341c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43420:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43424:	e0bffd17 	ldw	r2,-12(fp)
   43428:	10000616 	blt	r2,zero,43444 <lseek+0x40>
   4342c:	e0bffd17 	ldw	r2,-12(fp)
   43430:	10c00324 	muli	r3,r2,12
   43434:	00800134 	movhi	r2,4
   43438:	1097bc04 	addi	r2,r2,24304
   4343c:	1885883a 	add	r2,r3,r2
   43440:	00000106 	br	43448 <lseek+0x44>
   43444:	0005883a 	mov	r2,zero
   43448:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4344c:	e0bffc17 	ldw	r2,-16(fp)
   43450:	10001026 	beq	r2,zero,43494 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43454:	e0bffc17 	ldw	r2,-16(fp)
   43458:	10800017 	ldw	r2,0(r2)
   4345c:	10800717 	ldw	r2,28(r2)
   43460:	10000926 	beq	r2,zero,43488 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43464:	e0bffc17 	ldw	r2,-16(fp)
   43468:	10800017 	ldw	r2,0(r2)
   4346c:	10800717 	ldw	r2,28(r2)
   43470:	e13ffc17 	ldw	r4,-16(fp)
   43474:	e17ffe17 	ldw	r5,-8(fp)
   43478:	e1bfff17 	ldw	r6,-4(fp)
   4347c:	103ee83a 	callr	r2
   43480:	e0bffb15 	stw	r2,-20(fp)
   43484:	00000506 	br	4349c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43488:	00bfde84 	movi	r2,-134
   4348c:	e0bffb15 	stw	r2,-20(fp)
   43490:	00000206 	br	4349c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   43494:	00bfebc4 	movi	r2,-81
   43498:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4349c:	e0bffb17 	ldw	r2,-20(fp)
   434a0:	1000070e 	bge	r2,zero,434c0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   434a4:	00433b40 	call	433b4 <alt_get_errno>
   434a8:	1007883a 	mov	r3,r2
   434ac:	e0bffb17 	ldw	r2,-20(fp)
   434b0:	0085c83a 	sub	r2,zero,r2
   434b4:	18800015 	stw	r2,0(r3)
    rc = -1;
   434b8:	00bfffc4 	movi	r2,-1
   434bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   434c0:	e0bffb17 	ldw	r2,-20(fp)
}
   434c4:	e037883a 	mov	sp,fp
   434c8:	dfc00117 	ldw	ra,4(sp)
   434cc:	df000017 	ldw	fp,0(sp)
   434d0:	dec00204 	addi	sp,sp,8
   434d4:	f800283a 	ret

000434d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   434d8:	defffd04 	addi	sp,sp,-12
   434dc:	dfc00215 	stw	ra,8(sp)
   434e0:	df000115 	stw	fp,4(sp)
   434e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   434e8:	0009883a 	mov	r4,zero
   434ec:	004396c0 	call	4396c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   434f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   434f4:	00439a00 	call	439a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   434f8:	01000134 	movhi	r4,4
   434fc:	21159f04 	addi	r4,r4,22140
   43500:	01400134 	movhi	r5,4
   43504:	29559f04 	addi	r5,r5,22140
   43508:	01800134 	movhi	r6,4
   4350c:	31959f04 	addi	r6,r6,22140
   43510:	0044b240 	call	44b24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43514:	00446ac0 	call	446ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43518:	01000134 	movhi	r4,4
   4351c:	2111c204 	addi	r4,r4,18184
   43520:	00452b00 	call	452b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43524:	d126ad17 	ldw	r4,-25932(gp)
   43528:	d0e6ae17 	ldw	r3,-25928(gp)
   4352c:	d0a6af17 	ldw	r2,-25924(gp)
   43530:	180b883a 	mov	r5,r3
   43534:	100d883a 	mov	r6,r2
   43538:	00402080 	call	40208 <main>
   4353c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43540:	01000044 	movi	r4,1
   43544:	0042fe00 	call	42fe0 <close>
  exit (result);
   43548:	e13fff17 	ldw	r4,-4(fp)
   4354c:	00452c40 	call	452c4 <exit>

00043550 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43550:	defffe04 	addi	sp,sp,-8
   43554:	df000115 	stw	fp,4(sp)
   43558:	df000104 	addi	fp,sp,4
   4355c:	e13fff15 	stw	r4,-4(fp)
}
   43560:	e037883a 	mov	sp,fp
   43564:	df000017 	ldw	fp,0(sp)
   43568:	dec00104 	addi	sp,sp,4
   4356c:	f800283a 	ret

00043570 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43570:	defffe04 	addi	sp,sp,-8
   43574:	df000115 	stw	fp,4(sp)
   43578:	df000104 	addi	fp,sp,4
   4357c:	e13fff15 	stw	r4,-4(fp)
}
   43580:	e037883a 	mov	sp,fp
   43584:	df000017 	ldw	fp,0(sp)
   43588:	dec00104 	addi	sp,sp,4
   4358c:	f800283a 	ret

00043590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43590:	defffe04 	addi	sp,sp,-8
   43594:	dfc00115 	stw	ra,4(sp)
   43598:	df000015 	stw	fp,0(sp)
   4359c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   435a0:	00800134 	movhi	r2,4
   435a4:	109c3d04 	addi	r2,r2,28916
   435a8:	10800017 	ldw	r2,0(r2)
   435ac:	10000526 	beq	r2,zero,435c4 <alt_get_errno+0x34>
   435b0:	00800134 	movhi	r2,4
   435b4:	109c3d04 	addi	r2,r2,28916
   435b8:	10800017 	ldw	r2,0(r2)
   435bc:	103ee83a 	callr	r2
   435c0:	00000206 	br	435cc <alt_get_errno+0x3c>
   435c4:	00800174 	movhi	r2,5
   435c8:	10a2e004 	addi	r2,r2,-29824
}
   435cc:	e037883a 	mov	sp,fp
   435d0:	dfc00117 	ldw	ra,4(sp)
   435d4:	df000017 	ldw	fp,0(sp)
   435d8:	dec00204 	addi	sp,sp,8
   435dc:	f800283a 	ret

000435e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   435e0:	defff904 	addi	sp,sp,-28
   435e4:	dfc00615 	stw	ra,24(sp)
   435e8:	df000515 	stw	fp,20(sp)
   435ec:	df000504 	addi	fp,sp,20
   435f0:	e13ffd15 	stw	r4,-12(fp)
   435f4:	e17ffe15 	stw	r5,-8(fp)
   435f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   435fc:	e0bffd17 	ldw	r2,-12(fp)
   43600:	10000616 	blt	r2,zero,4361c <read+0x3c>
   43604:	e0bffd17 	ldw	r2,-12(fp)
   43608:	10c00324 	muli	r3,r2,12
   4360c:	00800134 	movhi	r2,4
   43610:	1097bc04 	addi	r2,r2,24304
   43614:	1885883a 	add	r2,r3,r2
   43618:	00000106 	br	43620 <read+0x40>
   4361c:	0005883a 	mov	r2,zero
   43620:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43624:	e0bffb17 	ldw	r2,-20(fp)
   43628:	10002226 	beq	r2,zero,436b4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4362c:	e0bffb17 	ldw	r2,-20(fp)
   43630:	10800217 	ldw	r2,8(r2)
   43634:	108000cc 	andi	r2,r2,3
   43638:	10800060 	cmpeqi	r2,r2,1
   4363c:	1000181e 	bne	r2,zero,436a0 <read+0xc0>
        (fd->dev->read))
   43640:	e0bffb17 	ldw	r2,-20(fp)
   43644:	10800017 	ldw	r2,0(r2)
   43648:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4364c:	10001426 	beq	r2,zero,436a0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43650:	e0bffb17 	ldw	r2,-20(fp)
   43654:	10800017 	ldw	r2,0(r2)
   43658:	10800517 	ldw	r2,20(r2)
   4365c:	e0ffff17 	ldw	r3,-4(fp)
   43660:	e13ffb17 	ldw	r4,-20(fp)
   43664:	e17ffe17 	ldw	r5,-8(fp)
   43668:	180d883a 	mov	r6,r3
   4366c:	103ee83a 	callr	r2
   43670:	e0bffc15 	stw	r2,-16(fp)
   43674:	e0bffc17 	ldw	r2,-16(fp)
   43678:	1000070e 	bge	r2,zero,43698 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4367c:	00435900 	call	43590 <alt_get_errno>
   43680:	1007883a 	mov	r3,r2
   43684:	e0bffc17 	ldw	r2,-16(fp)
   43688:	0085c83a 	sub	r2,zero,r2
   4368c:	18800015 	stw	r2,0(r3)
          return -1;
   43690:	00bfffc4 	movi	r2,-1
   43694:	00000c06 	br	436c8 <read+0xe8>
        }
        return rval;
   43698:	e0bffc17 	ldw	r2,-16(fp)
   4369c:	00000a06 	br	436c8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   436a0:	00435900 	call	43590 <alt_get_errno>
   436a4:	1007883a 	mov	r3,r2
   436a8:	00800344 	movi	r2,13
   436ac:	18800015 	stw	r2,0(r3)
   436b0:	00000406 	br	436c4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   436b4:	00435900 	call	43590 <alt_get_errno>
   436b8:	1007883a 	mov	r3,r2
   436bc:	00801444 	movi	r2,81
   436c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   436c4:	00bfffc4 	movi	r2,-1
}
   436c8:	e037883a 	mov	sp,fp
   436cc:	dfc00117 	ldw	ra,4(sp)
   436d0:	df000017 	ldw	fp,0(sp)
   436d4:	dec00204 	addi	sp,sp,8
   436d8:	f800283a 	ret

000436dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   436dc:	defffe04 	addi	sp,sp,-8
   436e0:	df000115 	stw	fp,4(sp)
   436e4:	df000104 	addi	fp,sp,4
   436e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   436ec:	e0bfff17 	ldw	r2,-4(fp)
   436f0:	108000d0 	cmplti	r2,r2,3
   436f4:	10000d1e 	bne	r2,zero,4372c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   436f8:	00800134 	movhi	r2,4
   436fc:	1097bc04 	addi	r2,r2,24304
   43700:	e0ffff17 	ldw	r3,-4(fp)
   43704:	18c00324 	muli	r3,r3,12
   43708:	18c00204 	addi	r3,r3,8
   4370c:	10c5883a 	add	r2,r2,r3
   43710:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43714:	00800134 	movhi	r2,4
   43718:	1097bc04 	addi	r2,r2,24304
   4371c:	e0ffff17 	ldw	r3,-4(fp)
   43720:	18c00324 	muli	r3,r3,12
   43724:	10c5883a 	add	r2,r2,r3
   43728:	10000015 	stw	zero,0(r2)
  }
}
   4372c:	e037883a 	mov	sp,fp
   43730:	df000017 	ldw	fp,0(sp)
   43734:	dec00104 	addi	sp,sp,4
   43738:	f800283a 	ret

0004373c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4373c:	defff904 	addi	sp,sp,-28
   43740:	df000615 	stw	fp,24(sp)
   43744:	df000604 	addi	fp,sp,24
   43748:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4374c:	0005303a 	rdctl	r2,status
   43750:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43754:	e0fffc17 	ldw	r3,-16(fp)
   43758:	00bfff84 	movi	r2,-2
   4375c:	1884703a 	and	r2,r3,r2
   43760:	1001703a 	wrctl	status,r2
  
  return context;
   43764:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43768:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4376c:	d0a00a17 	ldw	r2,-32728(gp)
   43770:	10c000c4 	addi	r3,r2,3
   43774:	00bfff04 	movi	r2,-4
   43778:	1884703a 	and	r2,r3,r2
   4377c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43780:	d0e00a17 	ldw	r3,-32728(gp)
   43784:	e0bfff17 	ldw	r2,-4(fp)
   43788:	1887883a 	add	r3,r3,r2
   4378c:	008001f4 	movhi	r2,7
   43790:	10880004 	addi	r2,r2,8192
   43794:	10c0062e 	bgeu	r2,r3,437b0 <sbrk+0x74>
   43798:	e0bffa17 	ldw	r2,-24(fp)
   4379c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   437a0:	e0bffd17 	ldw	r2,-12(fp)
   437a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   437a8:	00bfffc4 	movi	r2,-1
   437ac:	00000b06 	br	437dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   437b0:	d0a00a17 	ldw	r2,-32728(gp)
   437b4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   437b8:	d0e00a17 	ldw	r3,-32728(gp)
   437bc:	e0bfff17 	ldw	r2,-4(fp)
   437c0:	1885883a 	add	r2,r3,r2
   437c4:	d0a00a15 	stw	r2,-32728(gp)
   437c8:	e0bffa17 	ldw	r2,-24(fp)
   437cc:	e0bffe15 	stw	r2,-8(fp)
   437d0:	e0bffe17 	ldw	r2,-8(fp)
   437d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   437d8:	e0bffb17 	ldw	r2,-20(fp)
} 
   437dc:	e037883a 	mov	sp,fp
   437e0:	df000017 	ldw	fp,0(sp)
   437e4:	dec00104 	addi	sp,sp,4
   437e8:	f800283a 	ret

000437ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   437ec:	defffe04 	addi	sp,sp,-8
   437f0:	dfc00115 	stw	ra,4(sp)
   437f4:	df000015 	stw	fp,0(sp)
   437f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   437fc:	00800134 	movhi	r2,4
   43800:	109c3d04 	addi	r2,r2,28916
   43804:	10800017 	ldw	r2,0(r2)
   43808:	10000526 	beq	r2,zero,43820 <alt_get_errno+0x34>
   4380c:	00800134 	movhi	r2,4
   43810:	109c3d04 	addi	r2,r2,28916
   43814:	10800017 	ldw	r2,0(r2)
   43818:	103ee83a 	callr	r2
   4381c:	00000206 	br	43828 <alt_get_errno+0x3c>
   43820:	00800174 	movhi	r2,5
   43824:	10a2e004 	addi	r2,r2,-29824
}
   43828:	e037883a 	mov	sp,fp
   4382c:	dfc00117 	ldw	ra,4(sp)
   43830:	df000017 	ldw	fp,0(sp)
   43834:	dec00204 	addi	sp,sp,8
   43838:	f800283a 	ret

0004383c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4383c:	defff904 	addi	sp,sp,-28
   43840:	dfc00615 	stw	ra,24(sp)
   43844:	df000515 	stw	fp,20(sp)
   43848:	df000504 	addi	fp,sp,20
   4384c:	e13ffd15 	stw	r4,-12(fp)
   43850:	e17ffe15 	stw	r5,-8(fp)
   43854:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43858:	e0bffd17 	ldw	r2,-12(fp)
   4385c:	10000616 	blt	r2,zero,43878 <write+0x3c>
   43860:	e0bffd17 	ldw	r2,-12(fp)
   43864:	10c00324 	muli	r3,r2,12
   43868:	00800134 	movhi	r2,4
   4386c:	1097bc04 	addi	r2,r2,24304
   43870:	1885883a 	add	r2,r3,r2
   43874:	00000106 	br	4387c <write+0x40>
   43878:	0005883a 	mov	r2,zero
   4387c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43880:	e0bffb17 	ldw	r2,-20(fp)
   43884:	10002126 	beq	r2,zero,4390c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43888:	e0bffb17 	ldw	r2,-20(fp)
   4388c:	10800217 	ldw	r2,8(r2)
   43890:	108000cc 	andi	r2,r2,3
   43894:	10001826 	beq	r2,zero,438f8 <write+0xbc>
   43898:	e0bffb17 	ldw	r2,-20(fp)
   4389c:	10800017 	ldw	r2,0(r2)
   438a0:	10800617 	ldw	r2,24(r2)
   438a4:	10001426 	beq	r2,zero,438f8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   438a8:	e0bffb17 	ldw	r2,-20(fp)
   438ac:	10800017 	ldw	r2,0(r2)
   438b0:	10800617 	ldw	r2,24(r2)
   438b4:	e0ffff17 	ldw	r3,-4(fp)
   438b8:	e13ffb17 	ldw	r4,-20(fp)
   438bc:	e17ffe17 	ldw	r5,-8(fp)
   438c0:	180d883a 	mov	r6,r3
   438c4:	103ee83a 	callr	r2
   438c8:	e0bffc15 	stw	r2,-16(fp)
   438cc:	e0bffc17 	ldw	r2,-16(fp)
   438d0:	1000070e 	bge	r2,zero,438f0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   438d4:	00437ec0 	call	437ec <alt_get_errno>
   438d8:	1007883a 	mov	r3,r2
   438dc:	e0bffc17 	ldw	r2,-16(fp)
   438e0:	0085c83a 	sub	r2,zero,r2
   438e4:	18800015 	stw	r2,0(r3)
        return -1;
   438e8:	00bfffc4 	movi	r2,-1
   438ec:	00000c06 	br	43920 <write+0xe4>
      }
      return rval;
   438f0:	e0bffc17 	ldw	r2,-16(fp)
   438f4:	00000a06 	br	43920 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   438f8:	00437ec0 	call	437ec <alt_get_errno>
   438fc:	1007883a 	mov	r3,r2
   43900:	00800344 	movi	r2,13
   43904:	18800015 	stw	r2,0(r3)
   43908:	00000406 	br	4391c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4390c:	00437ec0 	call	437ec <alt_get_errno>
   43910:	1007883a 	mov	r3,r2
   43914:	00801444 	movi	r2,81
   43918:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4391c:	00bfffc4 	movi	r2,-1
}
   43920:	e037883a 	mov	sp,fp
   43924:	dfc00117 	ldw	ra,4(sp)
   43928:	df000017 	ldw	fp,0(sp)
   4392c:	dec00204 	addi	sp,sp,8
   43930:	f800283a 	ret

00043934 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43934:	defffd04 	addi	sp,sp,-12
   43938:	dfc00215 	stw	ra,8(sp)
   4393c:	df000115 	stw	fp,4(sp)
   43940:	df000104 	addi	fp,sp,4
   43944:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43948:	e13fff17 	ldw	r4,-4(fp)
   4394c:	01400134 	movhi	r5,4
   43950:	295c3a04 	addi	r5,r5,28904
   43954:	00446080 	call	44608 <alt_dev_llist_insert>
}
   43958:	e037883a 	mov	sp,fp
   4395c:	dfc00117 	ldw	ra,4(sp)
   43960:	df000017 	ldw	fp,0(sp)
   43964:	dec00204 	addi	sp,sp,8
   43968:	f800283a 	ret

0004396c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4396c:	defffd04 	addi	sp,sp,-12
   43970:	dfc00215 	stw	ra,8(sp)
   43974:	df000115 	stw	fp,4(sp)
   43978:	df000104 	addi	fp,sp,4
   4397c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   43980:	0044fac0 	call	44fac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43984:	00800044 	movi	r2,1
   43988:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4398c:	e037883a 	mov	sp,fp
   43990:	dfc00117 	ldw	ra,4(sp)
   43994:	df000017 	ldw	fp,0(sp)
   43998:	dec00204 	addi	sp,sp,8
   4399c:	f800283a 	ret

000439a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   439a0:	defffe04 	addi	sp,sp,-8
   439a4:	dfc00115 	stw	ra,4(sp)
   439a8:	df000015 	stw	fp,0(sp)
   439ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   439b0:	01000134 	movhi	r4,4
   439b4:	21182604 	addi	r4,r4,24728
   439b8:	000b883a 	mov	r5,zero
   439bc:	000d883a 	mov	r6,zero
   439c0:	0043b4c0 	call	43b4c <altera_avalon_jtag_uart_init>
   439c4:	01000134 	movhi	r4,4
   439c8:	21181c04 	addi	r4,r4,24688
   439cc:	00439340 	call	43934 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   439d0:	0001883a 	nop
}
   439d4:	e037883a 	mov	sp,fp
   439d8:	dfc00117 	ldw	ra,4(sp)
   439dc:	df000017 	ldw	fp,0(sp)
   439e0:	dec00204 	addi	sp,sp,8
   439e4:	f800283a 	ret

000439e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   439e8:	defffa04 	addi	sp,sp,-24
   439ec:	dfc00515 	stw	ra,20(sp)
   439f0:	df000415 	stw	fp,16(sp)
   439f4:	df000404 	addi	fp,sp,16
   439f8:	e13ffd15 	stw	r4,-12(fp)
   439fc:	e17ffe15 	stw	r5,-8(fp)
   43a00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43a04:	e0bffd17 	ldw	r2,-12(fp)
   43a08:	10800017 	ldw	r2,0(r2)
   43a0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43a10:	e0bffc17 	ldw	r2,-16(fp)
   43a14:	10c00a04 	addi	r3,r2,40
   43a18:	e0bffd17 	ldw	r2,-12(fp)
   43a1c:	10800217 	ldw	r2,8(r2)
   43a20:	1809883a 	mov	r4,r3
   43a24:	e17ffe17 	ldw	r5,-8(fp)
   43a28:	e1bfff17 	ldw	r6,-4(fp)
   43a2c:	100f883a 	mov	r7,r2
   43a30:	00440100 	call	44010 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43a34:	e037883a 	mov	sp,fp
   43a38:	dfc00117 	ldw	ra,4(sp)
   43a3c:	df000017 	ldw	fp,0(sp)
   43a40:	dec00204 	addi	sp,sp,8
   43a44:	f800283a 	ret

00043a48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43a48:	defffa04 	addi	sp,sp,-24
   43a4c:	dfc00515 	stw	ra,20(sp)
   43a50:	df000415 	stw	fp,16(sp)
   43a54:	df000404 	addi	fp,sp,16
   43a58:	e13ffd15 	stw	r4,-12(fp)
   43a5c:	e17ffe15 	stw	r5,-8(fp)
   43a60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43a64:	e0bffd17 	ldw	r2,-12(fp)
   43a68:	10800017 	ldw	r2,0(r2)
   43a6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43a70:	e0bffc17 	ldw	r2,-16(fp)
   43a74:	10c00a04 	addi	r3,r2,40
   43a78:	e0bffd17 	ldw	r2,-12(fp)
   43a7c:	10800217 	ldw	r2,8(r2)
   43a80:	1809883a 	mov	r4,r3
   43a84:	e17ffe17 	ldw	r5,-8(fp)
   43a88:	e1bfff17 	ldw	r6,-4(fp)
   43a8c:	100f883a 	mov	r7,r2
   43a90:	004421c0 	call	4421c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43a94:	e037883a 	mov	sp,fp
   43a98:	dfc00117 	ldw	ra,4(sp)
   43a9c:	df000017 	ldw	fp,0(sp)
   43aa0:	dec00204 	addi	sp,sp,8
   43aa4:	f800283a 	ret

00043aa8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43aa8:	defffc04 	addi	sp,sp,-16
   43aac:	dfc00315 	stw	ra,12(sp)
   43ab0:	df000215 	stw	fp,8(sp)
   43ab4:	df000204 	addi	fp,sp,8
   43ab8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43abc:	e0bfff17 	ldw	r2,-4(fp)
   43ac0:	10800017 	ldw	r2,0(r2)
   43ac4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43ac8:	e0bffe17 	ldw	r2,-8(fp)
   43acc:	10c00a04 	addi	r3,r2,40
   43ad0:	e0bfff17 	ldw	r2,-4(fp)
   43ad4:	10800217 	ldw	r2,8(r2)
   43ad8:	1809883a 	mov	r4,r3
   43adc:	100b883a 	mov	r5,r2
   43ae0:	0043ebc0 	call	43ebc <altera_avalon_jtag_uart_close>
}
   43ae4:	e037883a 	mov	sp,fp
   43ae8:	dfc00117 	ldw	ra,4(sp)
   43aec:	df000017 	ldw	fp,0(sp)
   43af0:	dec00204 	addi	sp,sp,8
   43af4:	f800283a 	ret

00043af8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43af8:	defffa04 	addi	sp,sp,-24
   43afc:	dfc00515 	stw	ra,20(sp)
   43b00:	df000415 	stw	fp,16(sp)
   43b04:	df000404 	addi	fp,sp,16
   43b08:	e13ffd15 	stw	r4,-12(fp)
   43b0c:	e17ffe15 	stw	r5,-8(fp)
   43b10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43b14:	e0bffd17 	ldw	r2,-12(fp)
   43b18:	10800017 	ldw	r2,0(r2)
   43b1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43b20:	e0bffc17 	ldw	r2,-16(fp)
   43b24:	10800a04 	addi	r2,r2,40
   43b28:	1009883a 	mov	r4,r2
   43b2c:	e17ffe17 	ldw	r5,-8(fp)
   43b30:	e1bfff17 	ldw	r6,-4(fp)
   43b34:	0043f240 	call	43f24 <altera_avalon_jtag_uart_ioctl>
}
   43b38:	e037883a 	mov	sp,fp
   43b3c:	dfc00117 	ldw	ra,4(sp)
   43b40:	df000017 	ldw	fp,0(sp)
   43b44:	dec00204 	addi	sp,sp,8
   43b48:	f800283a 	ret

00043b4c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43b4c:	defffa04 	addi	sp,sp,-24
   43b50:	dfc00515 	stw	ra,20(sp)
   43b54:	df000415 	stw	fp,16(sp)
   43b58:	df000404 	addi	fp,sp,16
   43b5c:	e13ffd15 	stw	r4,-12(fp)
   43b60:	e17ffe15 	stw	r5,-8(fp)
   43b64:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43b68:	e0bffd17 	ldw	r2,-12(fp)
   43b6c:	00c00044 	movi	r3,1
   43b70:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43b74:	e0bffd17 	ldw	r2,-12(fp)
   43b78:	10800017 	ldw	r2,0(r2)
   43b7c:	10800104 	addi	r2,r2,4
   43b80:	1007883a 	mov	r3,r2
   43b84:	e0bffd17 	ldw	r2,-12(fp)
   43b88:	10800817 	ldw	r2,32(r2)
   43b8c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43b90:	e0fffe17 	ldw	r3,-8(fp)
   43b94:	e0bfff17 	ldw	r2,-4(fp)
   43b98:	d8000015 	stw	zero,0(sp)
   43b9c:	1809883a 	mov	r4,r3
   43ba0:	100b883a 	mov	r5,r2
   43ba4:	01800134 	movhi	r6,4
   43ba8:	318f0404 	addi	r6,r6,15376
   43bac:	e1fffd17 	ldw	r7,-12(fp)
   43bb0:	00447940 	call	44794 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43bb4:	e0bffd17 	ldw	r2,-12(fp)
   43bb8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43bbc:	e0bffd17 	ldw	r2,-12(fp)
   43bc0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43bc4:	00800174 	movhi	r2,5
   43bc8:	10a2e504 	addi	r2,r2,-29804
   43bcc:	10800017 	ldw	r2,0(r2)
   43bd0:	1809883a 	mov	r4,r3
   43bd4:	100b883a 	mov	r5,r2
   43bd8:	01800134 	movhi	r6,4
   43bdc:	318f8504 	addi	r6,r6,15892
   43be0:	e1fffd17 	ldw	r7,-12(fp)
   43be4:	00444340 	call	44434 <alt_alarm_start>
   43be8:	1000040e 	bge	r2,zero,43bfc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43bec:	e0fffd17 	ldw	r3,-12(fp)
   43bf0:	00a00034 	movhi	r2,32768
   43bf4:	10bfffc4 	addi	r2,r2,-1
   43bf8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43bfc:	e037883a 	mov	sp,fp
   43c00:	dfc00117 	ldw	ra,4(sp)
   43c04:	df000017 	ldw	fp,0(sp)
   43c08:	dec00204 	addi	sp,sp,8
   43c0c:	f800283a 	ret

00043c10 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43c10:	defff804 	addi	sp,sp,-32
   43c14:	df000715 	stw	fp,28(sp)
   43c18:	df000704 	addi	fp,sp,28
   43c1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43c20:	e0bfff17 	ldw	r2,-4(fp)
   43c24:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   43c28:	e0bffb17 	ldw	r2,-20(fp)
   43c2c:	10800017 	ldw	r2,0(r2)
   43c30:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43c34:	e0bffc17 	ldw	r2,-16(fp)
   43c38:	10800104 	addi	r2,r2,4
   43c3c:	10800037 	ldwio	r2,0(r2)
   43c40:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43c44:	e0bffd17 	ldw	r2,-12(fp)
   43c48:	1080c00c 	andi	r2,r2,768
   43c4c:	1000011e 	bne	r2,zero,43c54 <altera_avalon_jtag_uart_irq+0x44>
      break;
   43c50:	00006c06 	br	43e04 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43c54:	e0bffd17 	ldw	r2,-12(fp)
   43c58:	1080400c 	andi	r2,r2,256
   43c5c:	10003426 	beq	r2,zero,43d30 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43c60:	00800074 	movhi	r2,1
   43c64:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43c68:	e0bffb17 	ldw	r2,-20(fp)
   43c6c:	10800a17 	ldw	r2,40(r2)
   43c70:	10800044 	addi	r2,r2,1
   43c74:	1081ffcc 	andi	r2,r2,2047
   43c78:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   43c7c:	e0bffb17 	ldw	r2,-20(fp)
   43c80:	10c00b17 	ldw	r3,44(r2)
   43c84:	e0bffe17 	ldw	r2,-8(fp)
   43c88:	1880011e 	bne	r3,r2,43c90 <altera_avalon_jtag_uart_irq+0x80>
          break;
   43c8c:	00001606 	br	43ce8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43c90:	e0bffc17 	ldw	r2,-16(fp)
   43c94:	10800037 	ldwio	r2,0(r2)
   43c98:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43c9c:	e0bff917 	ldw	r2,-28(fp)
   43ca0:	10a0000c 	andi	r2,r2,32768
   43ca4:	1000011e 	bne	r2,zero,43cac <altera_avalon_jtag_uart_irq+0x9c>
          break;
   43ca8:	00000f06 	br	43ce8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43cac:	e0bffb17 	ldw	r2,-20(fp)
   43cb0:	10800a17 	ldw	r2,40(r2)
   43cb4:	e0fff917 	ldw	r3,-28(fp)
   43cb8:	1809883a 	mov	r4,r3
   43cbc:	e0fffb17 	ldw	r3,-20(fp)
   43cc0:	1885883a 	add	r2,r3,r2
   43cc4:	10800e04 	addi	r2,r2,56
   43cc8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43ccc:	e0bffb17 	ldw	r2,-20(fp)
   43cd0:	10800a17 	ldw	r2,40(r2)
   43cd4:	10800044 	addi	r2,r2,1
   43cd8:	10c1ffcc 	andi	r3,r2,2047
   43cdc:	e0bffb17 	ldw	r2,-20(fp)
   43ce0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   43ce4:	003fe006 	br	43c68 <__alt_data_end+0xfffd1c68>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43ce8:	e0bff917 	ldw	r2,-28(fp)
   43cec:	10bfffec 	andhi	r2,r2,65535
   43cf0:	10000f26 	beq	r2,zero,43d30 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43cf4:	e0bffb17 	ldw	r2,-20(fp)
   43cf8:	10c00817 	ldw	r3,32(r2)
   43cfc:	00bfff84 	movi	r2,-2
   43d00:	1886703a 	and	r3,r3,r2
   43d04:	e0bffb17 	ldw	r2,-20(fp)
   43d08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43d0c:	e0bffc17 	ldw	r2,-16(fp)
   43d10:	10800104 	addi	r2,r2,4
   43d14:	1007883a 	mov	r3,r2
   43d18:	e0bffb17 	ldw	r2,-20(fp)
   43d1c:	10800817 	ldw	r2,32(r2)
   43d20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43d24:	e0bffc17 	ldw	r2,-16(fp)
   43d28:	10800104 	addi	r2,r2,4
   43d2c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43d30:	e0bffd17 	ldw	r2,-12(fp)
   43d34:	1080800c 	andi	r2,r2,512
   43d38:	10003126 	beq	r2,zero,43e00 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43d3c:	e0bffd17 	ldw	r2,-12(fp)
   43d40:	1004d43a 	srli	r2,r2,16
   43d44:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43d48:	00001406 	br	43d9c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43d4c:	e0bffc17 	ldw	r2,-16(fp)
   43d50:	e0fffb17 	ldw	r3,-20(fp)
   43d54:	18c00d17 	ldw	r3,52(r3)
   43d58:	e13ffb17 	ldw	r4,-20(fp)
   43d5c:	20c7883a 	add	r3,r4,r3
   43d60:	18c20e04 	addi	r3,r3,2104
   43d64:	18c00003 	ldbu	r3,0(r3)
   43d68:	18c03fcc 	andi	r3,r3,255
   43d6c:	18c0201c 	xori	r3,r3,128
   43d70:	18ffe004 	addi	r3,r3,-128
   43d74:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43d78:	e0bffb17 	ldw	r2,-20(fp)
   43d7c:	10800d17 	ldw	r2,52(r2)
   43d80:	10800044 	addi	r2,r2,1
   43d84:	10c1ffcc 	andi	r3,r2,2047
   43d88:	e0bffb17 	ldw	r2,-20(fp)
   43d8c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43d90:	e0bffa17 	ldw	r2,-24(fp)
   43d94:	10bfffc4 	addi	r2,r2,-1
   43d98:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   43d9c:	e0bffa17 	ldw	r2,-24(fp)
   43da0:	10000526 	beq	r2,zero,43db8 <altera_avalon_jtag_uart_irq+0x1a8>
   43da4:	e0bffb17 	ldw	r2,-20(fp)
   43da8:	10c00d17 	ldw	r3,52(r2)
   43dac:	e0bffb17 	ldw	r2,-20(fp)
   43db0:	10800c17 	ldw	r2,48(r2)
   43db4:	18bfe51e 	bne	r3,r2,43d4c <__alt_data_end+0xfffd1d4c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   43db8:	e0bffa17 	ldw	r2,-24(fp)
   43dbc:	10001026 	beq	r2,zero,43e00 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43dc0:	e0bffb17 	ldw	r2,-20(fp)
   43dc4:	10c00817 	ldw	r3,32(r2)
   43dc8:	00bfff44 	movi	r2,-3
   43dcc:	1886703a 	and	r3,r3,r2
   43dd0:	e0bffb17 	ldw	r2,-20(fp)
   43dd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43dd8:	e0bffb17 	ldw	r2,-20(fp)
   43ddc:	10800017 	ldw	r2,0(r2)
   43de0:	10800104 	addi	r2,r2,4
   43de4:	1007883a 	mov	r3,r2
   43de8:	e0bffb17 	ldw	r2,-20(fp)
   43dec:	10800817 	ldw	r2,32(r2)
   43df0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43df4:	e0bffc17 	ldw	r2,-16(fp)
   43df8:	10800104 	addi	r2,r2,4
   43dfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   43e00:	003f8c06 	br	43c34 <__alt_data_end+0xfffd1c34>
}
   43e04:	e037883a 	mov	sp,fp
   43e08:	df000017 	ldw	fp,0(sp)
   43e0c:	dec00104 	addi	sp,sp,4
   43e10:	f800283a 	ret

00043e14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   43e14:	defff804 	addi	sp,sp,-32
   43e18:	df000715 	stw	fp,28(sp)
   43e1c:	df000704 	addi	fp,sp,28
   43e20:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   43e24:	e0bffb17 	ldw	r2,-20(fp)
   43e28:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   43e2c:	e0bff917 	ldw	r2,-28(fp)
   43e30:	10800017 	ldw	r2,0(r2)
   43e34:	10800104 	addi	r2,r2,4
   43e38:	10800037 	ldwio	r2,0(r2)
   43e3c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   43e40:	e0bffa17 	ldw	r2,-24(fp)
   43e44:	1081000c 	andi	r2,r2,1024
   43e48:	10000b26 	beq	r2,zero,43e78 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   43e4c:	e0bff917 	ldw	r2,-28(fp)
   43e50:	10800017 	ldw	r2,0(r2)
   43e54:	10800104 	addi	r2,r2,4
   43e58:	1007883a 	mov	r3,r2
   43e5c:	e0bff917 	ldw	r2,-28(fp)
   43e60:	10800817 	ldw	r2,32(r2)
   43e64:	10810014 	ori	r2,r2,1024
   43e68:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   43e6c:	e0bff917 	ldw	r2,-28(fp)
   43e70:	10000915 	stw	zero,36(r2)
   43e74:	00000a06 	br	43ea0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   43e78:	e0bff917 	ldw	r2,-28(fp)
   43e7c:	10c00917 	ldw	r3,36(r2)
   43e80:	00a00034 	movhi	r2,32768
   43e84:	10bfff04 	addi	r2,r2,-4
   43e88:	10c00536 	bltu	r2,r3,43ea0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   43e8c:	e0bff917 	ldw	r2,-28(fp)
   43e90:	10800917 	ldw	r2,36(r2)
   43e94:	10c00044 	addi	r3,r2,1
   43e98:	e0bff917 	ldw	r2,-28(fp)
   43e9c:	10c00915 	stw	r3,36(r2)
   43ea0:	00800174 	movhi	r2,5
   43ea4:	10a2e504 	addi	r2,r2,-29804
   43ea8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   43eac:	e037883a 	mov	sp,fp
   43eb0:	df000017 	ldw	fp,0(sp)
   43eb4:	dec00104 	addi	sp,sp,4
   43eb8:	f800283a 	ret

00043ebc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   43ebc:	defffd04 	addi	sp,sp,-12
   43ec0:	df000215 	stw	fp,8(sp)
   43ec4:	df000204 	addi	fp,sp,8
   43ec8:	e13ffe15 	stw	r4,-8(fp)
   43ecc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43ed0:	00000506 	br	43ee8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   43ed4:	e0bfff17 	ldw	r2,-4(fp)
   43ed8:	1090000c 	andi	r2,r2,16384
   43edc:	10000226 	beq	r2,zero,43ee8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   43ee0:	00bffd44 	movi	r2,-11
   43ee4:	00000b06 	br	43f14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43ee8:	e0bffe17 	ldw	r2,-8(fp)
   43eec:	10c00d17 	ldw	r3,52(r2)
   43ef0:	e0bffe17 	ldw	r2,-8(fp)
   43ef4:	10800c17 	ldw	r2,48(r2)
   43ef8:	18800526 	beq	r3,r2,43f10 <altera_avalon_jtag_uart_close+0x54>
   43efc:	e0bffe17 	ldw	r2,-8(fp)
   43f00:	10c00917 	ldw	r3,36(r2)
   43f04:	e0bffe17 	ldw	r2,-8(fp)
   43f08:	10800117 	ldw	r2,4(r2)
   43f0c:	18bff136 	bltu	r3,r2,43ed4 <__alt_data_end+0xfffd1ed4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   43f10:	0005883a 	mov	r2,zero
}
   43f14:	e037883a 	mov	sp,fp
   43f18:	df000017 	ldw	fp,0(sp)
   43f1c:	dec00104 	addi	sp,sp,4
   43f20:	f800283a 	ret

00043f24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   43f24:	defffa04 	addi	sp,sp,-24
   43f28:	df000515 	stw	fp,20(sp)
   43f2c:	df000504 	addi	fp,sp,20
   43f30:	e13ffd15 	stw	r4,-12(fp)
   43f34:	e17ffe15 	stw	r5,-8(fp)
   43f38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   43f3c:	00bff9c4 	movi	r2,-25
   43f40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   43f44:	e0bffe17 	ldw	r2,-8(fp)
   43f48:	10da8060 	cmpeqi	r3,r2,27137
   43f4c:	1800031e 	bne	r3,zero,43f5c <altera_avalon_jtag_uart_ioctl+0x38>
   43f50:	109a80a0 	cmpeqi	r2,r2,27138
   43f54:	1000191e 	bne	r2,zero,43fbc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   43f58:	00002806 	br	43ffc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   43f5c:	e0bffd17 	ldw	r2,-12(fp)
   43f60:	10c00117 	ldw	r3,4(r2)
   43f64:	00a00034 	movhi	r2,32768
   43f68:	10bfffc4 	addi	r2,r2,-1
   43f6c:	18801226 	beq	r3,r2,43fb8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   43f70:	e0bfff17 	ldw	r2,-4(fp)
   43f74:	10800017 	ldw	r2,0(r2)
   43f78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   43f7c:	e0bffc17 	ldw	r2,-16(fp)
   43f80:	10800090 	cmplti	r2,r2,2
   43f84:	1000061e 	bne	r2,zero,43fa0 <altera_avalon_jtag_uart_ioctl+0x7c>
   43f88:	e0fffc17 	ldw	r3,-16(fp)
   43f8c:	00a00034 	movhi	r2,32768
   43f90:	10bfffc4 	addi	r2,r2,-1
   43f94:	18800226 	beq	r3,r2,43fa0 <altera_avalon_jtag_uart_ioctl+0x7c>
   43f98:	e0bffc17 	ldw	r2,-16(fp)
   43f9c:	00000206 	br	43fa8 <altera_avalon_jtag_uart_ioctl+0x84>
   43fa0:	00a00034 	movhi	r2,32768
   43fa4:	10bfff84 	addi	r2,r2,-2
   43fa8:	e0fffd17 	ldw	r3,-12(fp)
   43fac:	18800115 	stw	r2,4(r3)
      rc = 0;
   43fb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   43fb4:	00001106 	br	43ffc <altera_avalon_jtag_uart_ioctl+0xd8>
   43fb8:	00001006 	br	43ffc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   43fbc:	e0bffd17 	ldw	r2,-12(fp)
   43fc0:	10c00117 	ldw	r3,4(r2)
   43fc4:	00a00034 	movhi	r2,32768
   43fc8:	10bfffc4 	addi	r2,r2,-1
   43fcc:	18800a26 	beq	r3,r2,43ff8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   43fd0:	e0bffd17 	ldw	r2,-12(fp)
   43fd4:	10c00917 	ldw	r3,36(r2)
   43fd8:	e0bffd17 	ldw	r2,-12(fp)
   43fdc:	10800117 	ldw	r2,4(r2)
   43fe0:	1885803a 	cmpltu	r2,r3,r2
   43fe4:	10c03fcc 	andi	r3,r2,255
   43fe8:	e0bfff17 	ldw	r2,-4(fp)
   43fec:	10c00015 	stw	r3,0(r2)
      rc = 0;
   43ff0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   43ff4:	00000006 	br	43ff8 <altera_avalon_jtag_uart_ioctl+0xd4>
   43ff8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   43ffc:	e0bffb17 	ldw	r2,-20(fp)
}
   44000:	e037883a 	mov	sp,fp
   44004:	df000017 	ldw	fp,0(sp)
   44008:	dec00104 	addi	sp,sp,4
   4400c:	f800283a 	ret

00044010 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44010:	defff304 	addi	sp,sp,-52
   44014:	dfc00c15 	stw	ra,48(sp)
   44018:	df000b15 	stw	fp,44(sp)
   4401c:	df000b04 	addi	fp,sp,44
   44020:	e13ffc15 	stw	r4,-16(fp)
   44024:	e17ffd15 	stw	r5,-12(fp)
   44028:	e1bffe15 	stw	r6,-8(fp)
   4402c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   44030:	e0bffd17 	ldw	r2,-12(fp)
   44034:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44038:	00004906 	br	44160 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4403c:	e0bffc17 	ldw	r2,-16(fp)
   44040:	10800a17 	ldw	r2,40(r2)
   44044:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44048:	e0bffc17 	ldw	r2,-16(fp)
   4404c:	10800b17 	ldw	r2,44(r2)
   44050:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44054:	e0fff717 	ldw	r3,-36(fp)
   44058:	e0bff817 	ldw	r2,-32(fp)
   4405c:	18800536 	bltu	r3,r2,44074 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   44060:	e0fff717 	ldw	r3,-36(fp)
   44064:	e0bff817 	ldw	r2,-32(fp)
   44068:	1885c83a 	sub	r2,r3,r2
   4406c:	e0bff615 	stw	r2,-40(fp)
   44070:	00000406 	br	44084 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44074:	00c20004 	movi	r3,2048
   44078:	e0bff817 	ldw	r2,-32(fp)
   4407c:	1885c83a 	sub	r2,r3,r2
   44080:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   44084:	e0bff617 	ldw	r2,-40(fp)
   44088:	1000011e 	bne	r2,zero,44090 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   4408c:	00001d06 	br	44104 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   44090:	e0fffe17 	ldw	r3,-8(fp)
   44094:	e0bff617 	ldw	r2,-40(fp)
   44098:	1880022e 	bgeu	r3,r2,440a4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4409c:	e0bffe17 	ldw	r2,-8(fp)
   440a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   440a4:	e0bff817 	ldw	r2,-32(fp)
   440a8:	10800e04 	addi	r2,r2,56
   440ac:	e0fffc17 	ldw	r3,-16(fp)
   440b0:	1885883a 	add	r2,r3,r2
   440b4:	e13ff517 	ldw	r4,-44(fp)
   440b8:	100b883a 	mov	r5,r2
   440bc:	e1bff617 	ldw	r6,-40(fp)
   440c0:	00411c00 	call	411c0 <memcpy>
      ptr   += n;
   440c4:	e0fff517 	ldw	r3,-44(fp)
   440c8:	e0bff617 	ldw	r2,-40(fp)
   440cc:	1885883a 	add	r2,r3,r2
   440d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   440d4:	e0fffe17 	ldw	r3,-8(fp)
   440d8:	e0bff617 	ldw	r2,-40(fp)
   440dc:	1885c83a 	sub	r2,r3,r2
   440e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   440e4:	e0fff817 	ldw	r3,-32(fp)
   440e8:	e0bff617 	ldw	r2,-40(fp)
   440ec:	1885883a 	add	r2,r3,r2
   440f0:	10c1ffcc 	andi	r3,r2,2047
   440f4:	e0bffc17 	ldw	r2,-16(fp)
   440f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   440fc:	e0bffe17 	ldw	r2,-8(fp)
   44100:	00bfce16 	blt	zero,r2,4403c <__alt_data_end+0xfffd203c>

    /* If we read any data then return it */
    if (ptr != buffer)
   44104:	e0fff517 	ldw	r3,-44(fp)
   44108:	e0bffd17 	ldw	r2,-12(fp)
   4410c:	18800126 	beq	r3,r2,44114 <altera_avalon_jtag_uart_read+0x104>
      break;
   44110:	00001506 	br	44168 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44114:	e0bfff17 	ldw	r2,-4(fp)
   44118:	1090000c 	andi	r2,r2,16384
   4411c:	10000126 	beq	r2,zero,44124 <altera_avalon_jtag_uart_read+0x114>
      break;
   44120:	00001106 	br	44168 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   44124:	0001883a 	nop
   44128:	e0bffc17 	ldw	r2,-16(fp)
   4412c:	10c00a17 	ldw	r3,40(r2)
   44130:	e0bff717 	ldw	r2,-36(fp)
   44134:	1880051e 	bne	r3,r2,4414c <altera_avalon_jtag_uart_read+0x13c>
   44138:	e0bffc17 	ldw	r2,-16(fp)
   4413c:	10c00917 	ldw	r3,36(r2)
   44140:	e0bffc17 	ldw	r2,-16(fp)
   44144:	10800117 	ldw	r2,4(r2)
   44148:	18bff736 	bltu	r3,r2,44128 <__alt_data_end+0xfffd2128>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4414c:	e0bffc17 	ldw	r2,-16(fp)
   44150:	10c00a17 	ldw	r3,40(r2)
   44154:	e0bff717 	ldw	r2,-36(fp)
   44158:	1880011e 	bne	r3,r2,44160 <altera_avalon_jtag_uart_read+0x150>
      break;
   4415c:	00000206 	br	44168 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44160:	e0bffe17 	ldw	r2,-8(fp)
   44164:	00bfb516 	blt	zero,r2,4403c <__alt_data_end+0xfffd203c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44168:	e0fff517 	ldw	r3,-44(fp)
   4416c:	e0bffd17 	ldw	r2,-12(fp)
   44170:	18801826 	beq	r3,r2,441d4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44174:	0005303a 	rdctl	r2,status
   44178:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4417c:	e0fffa17 	ldw	r3,-24(fp)
   44180:	00bfff84 	movi	r2,-2
   44184:	1884703a 	and	r2,r3,r2
   44188:	1001703a 	wrctl	status,r2
  
  return context;
   4418c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44190:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44194:	e0bffc17 	ldw	r2,-16(fp)
   44198:	10800817 	ldw	r2,32(r2)
   4419c:	10c00054 	ori	r3,r2,1
   441a0:	e0bffc17 	ldw	r2,-16(fp)
   441a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   441a8:	e0bffc17 	ldw	r2,-16(fp)
   441ac:	10800017 	ldw	r2,0(r2)
   441b0:	10800104 	addi	r2,r2,4
   441b4:	1007883a 	mov	r3,r2
   441b8:	e0bffc17 	ldw	r2,-16(fp)
   441bc:	10800817 	ldw	r2,32(r2)
   441c0:	18800035 	stwio	r2,0(r3)
   441c4:	e0bff917 	ldw	r2,-28(fp)
   441c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   441cc:	e0bffb17 	ldw	r2,-20(fp)
   441d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   441d4:	e0fff517 	ldw	r3,-44(fp)
   441d8:	e0bffd17 	ldw	r2,-12(fp)
   441dc:	18800426 	beq	r3,r2,441f0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   441e0:	e0fff517 	ldw	r3,-44(fp)
   441e4:	e0bffd17 	ldw	r2,-12(fp)
   441e8:	1885c83a 	sub	r2,r3,r2
   441ec:	00000606 	br	44208 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   441f0:	e0bfff17 	ldw	r2,-4(fp)
   441f4:	1090000c 	andi	r2,r2,16384
   441f8:	10000226 	beq	r2,zero,44204 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   441fc:	00bffd44 	movi	r2,-11
   44200:	00000106 	br	44208 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   44204:	00bffec4 	movi	r2,-5
}
   44208:	e037883a 	mov	sp,fp
   4420c:	dfc00117 	ldw	ra,4(sp)
   44210:	df000017 	ldw	fp,0(sp)
   44214:	dec00204 	addi	sp,sp,8
   44218:	f800283a 	ret

0004421c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4421c:	defff304 	addi	sp,sp,-52
   44220:	dfc00c15 	stw	ra,48(sp)
   44224:	df000b15 	stw	fp,44(sp)
   44228:	df000b04 	addi	fp,sp,44
   4422c:	e13ffc15 	stw	r4,-16(fp)
   44230:	e17ffd15 	stw	r5,-12(fp)
   44234:	e1bffe15 	stw	r6,-8(fp)
   44238:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4423c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   44240:	e0bffd17 	ldw	r2,-12(fp)
   44244:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44248:	00003806 	br	4432c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4424c:	e0bffc17 	ldw	r2,-16(fp)
   44250:	10800c17 	ldw	r2,48(r2)
   44254:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   44258:	e0bffc17 	ldw	r2,-16(fp)
   4425c:	10800d17 	ldw	r2,52(r2)
   44260:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   44264:	e0fff817 	ldw	r3,-32(fp)
   44268:	e0bff517 	ldw	r2,-44(fp)
   4426c:	1880062e 	bgeu	r3,r2,44288 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   44270:	e0fff517 	ldw	r3,-44(fp)
   44274:	e0bff817 	ldw	r2,-32(fp)
   44278:	1885c83a 	sub	r2,r3,r2
   4427c:	10bfffc4 	addi	r2,r2,-1
   44280:	e0bff615 	stw	r2,-40(fp)
   44284:	00000b06 	br	442b4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44288:	e0bff517 	ldw	r2,-44(fp)
   4428c:	10000526 	beq	r2,zero,442a4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44290:	00c20004 	movi	r3,2048
   44294:	e0bff817 	ldw	r2,-32(fp)
   44298:	1885c83a 	sub	r2,r3,r2
   4429c:	e0bff615 	stw	r2,-40(fp)
   442a0:	00000406 	br	442b4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   442a4:	00c1ffc4 	movi	r3,2047
   442a8:	e0bff817 	ldw	r2,-32(fp)
   442ac:	1885c83a 	sub	r2,r3,r2
   442b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   442b4:	e0bff617 	ldw	r2,-40(fp)
   442b8:	1000011e 	bne	r2,zero,442c0 <altera_avalon_jtag_uart_write+0xa4>
        break;
   442bc:	00001d06 	br	44334 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   442c0:	e0fffe17 	ldw	r3,-8(fp)
   442c4:	e0bff617 	ldw	r2,-40(fp)
   442c8:	1880022e 	bgeu	r3,r2,442d4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   442cc:	e0bffe17 	ldw	r2,-8(fp)
   442d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   442d4:	e0bff817 	ldw	r2,-32(fp)
   442d8:	10820e04 	addi	r2,r2,2104
   442dc:	e0fffc17 	ldw	r3,-16(fp)
   442e0:	1885883a 	add	r2,r3,r2
   442e4:	1009883a 	mov	r4,r2
   442e8:	e17ffd17 	ldw	r5,-12(fp)
   442ec:	e1bff617 	ldw	r6,-40(fp)
   442f0:	00411c00 	call	411c0 <memcpy>
      ptr   += n;
   442f4:	e0fffd17 	ldw	r3,-12(fp)
   442f8:	e0bff617 	ldw	r2,-40(fp)
   442fc:	1885883a 	add	r2,r3,r2
   44300:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   44304:	e0fffe17 	ldw	r3,-8(fp)
   44308:	e0bff617 	ldw	r2,-40(fp)
   4430c:	1885c83a 	sub	r2,r3,r2
   44310:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44314:	e0fff817 	ldw	r3,-32(fp)
   44318:	e0bff617 	ldw	r2,-40(fp)
   4431c:	1885883a 	add	r2,r3,r2
   44320:	10c1ffcc 	andi	r3,r2,2047
   44324:	e0bffc17 	ldw	r2,-16(fp)
   44328:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4432c:	e0bffe17 	ldw	r2,-8(fp)
   44330:	00bfc616 	blt	zero,r2,4424c <__alt_data_end+0xfffd224c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44334:	0005303a 	rdctl	r2,status
   44338:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4433c:	e0fffa17 	ldw	r3,-24(fp)
   44340:	00bfff84 	movi	r2,-2
   44344:	1884703a 	and	r2,r3,r2
   44348:	1001703a 	wrctl	status,r2
  
  return context;
   4434c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44350:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44354:	e0bffc17 	ldw	r2,-16(fp)
   44358:	10800817 	ldw	r2,32(r2)
   4435c:	10c00094 	ori	r3,r2,2
   44360:	e0bffc17 	ldw	r2,-16(fp)
   44364:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44368:	e0bffc17 	ldw	r2,-16(fp)
   4436c:	10800017 	ldw	r2,0(r2)
   44370:	10800104 	addi	r2,r2,4
   44374:	1007883a 	mov	r3,r2
   44378:	e0bffc17 	ldw	r2,-16(fp)
   4437c:	10800817 	ldw	r2,32(r2)
   44380:	18800035 	stwio	r2,0(r3)
   44384:	e0bff917 	ldw	r2,-28(fp)
   44388:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4438c:	e0bffb17 	ldw	r2,-20(fp)
   44390:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44394:	e0bffe17 	ldw	r2,-8(fp)
   44398:	0080120e 	bge	zero,r2,443e4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   4439c:	e0bfff17 	ldw	r2,-4(fp)
   443a0:	1090000c 	andi	r2,r2,16384
   443a4:	10000126 	beq	r2,zero,443ac <altera_avalon_jtag_uart_write+0x190>
        break;
   443a8:	00001006 	br	443ec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   443ac:	0001883a 	nop
   443b0:	e0bffc17 	ldw	r2,-16(fp)
   443b4:	10c00d17 	ldw	r3,52(r2)
   443b8:	e0bff517 	ldw	r2,-44(fp)
   443bc:	1880051e 	bne	r3,r2,443d4 <altera_avalon_jtag_uart_write+0x1b8>
   443c0:	e0bffc17 	ldw	r2,-16(fp)
   443c4:	10c00917 	ldw	r3,36(r2)
   443c8:	e0bffc17 	ldw	r2,-16(fp)
   443cc:	10800117 	ldw	r2,4(r2)
   443d0:	18bff736 	bltu	r3,r2,443b0 <__alt_data_end+0xfffd23b0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   443d4:	e0bffc17 	ldw	r2,-16(fp)
   443d8:	10800917 	ldw	r2,36(r2)
   443dc:	10000126 	beq	r2,zero,443e4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   443e0:	00000206 	br	443ec <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   443e4:	e0bffe17 	ldw	r2,-8(fp)
   443e8:	00bf9716 	blt	zero,r2,44248 <__alt_data_end+0xfffd2248>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   443ec:	e0fffd17 	ldw	r3,-12(fp)
   443f0:	e0bff717 	ldw	r2,-36(fp)
   443f4:	18800426 	beq	r3,r2,44408 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   443f8:	e0fffd17 	ldw	r3,-12(fp)
   443fc:	e0bff717 	ldw	r2,-36(fp)
   44400:	1885c83a 	sub	r2,r3,r2
   44404:	00000606 	br	44420 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   44408:	e0bfff17 	ldw	r2,-4(fp)
   4440c:	1090000c 	andi	r2,r2,16384
   44410:	10000226 	beq	r2,zero,4441c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   44414:	00bffd44 	movi	r2,-11
   44418:	00000106 	br	44420 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4441c:	00bffec4 	movi	r2,-5
}
   44420:	e037883a 	mov	sp,fp
   44424:	dfc00117 	ldw	ra,4(sp)
   44428:	df000017 	ldw	fp,0(sp)
   4442c:	dec00204 	addi	sp,sp,8
   44430:	f800283a 	ret

00044434 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   44434:	defff504 	addi	sp,sp,-44
   44438:	df000a15 	stw	fp,40(sp)
   4443c:	df000a04 	addi	fp,sp,40
   44440:	e13ffc15 	stw	r4,-16(fp)
   44444:	e17ffd15 	stw	r5,-12(fp)
   44448:	e1bffe15 	stw	r6,-8(fp)
   4444c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44450:	e03ff615 	stw	zero,-40(fp)
   44454:	00800174 	movhi	r2,5
   44458:	10a2e504 	addi	r2,r2,-29804
   4445c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   44460:	10003f26 	beq	r2,zero,44560 <alt_alarm_start+0x12c>
  {
    if (alarm)
   44464:	e0bffc17 	ldw	r2,-16(fp)
   44468:	10003b26 	beq	r2,zero,44558 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   4446c:	e0bffc17 	ldw	r2,-16(fp)
   44470:	e0fffe17 	ldw	r3,-8(fp)
   44474:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   44478:	e0bffc17 	ldw	r2,-16(fp)
   4447c:	e0ffff17 	ldw	r3,-4(fp)
   44480:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44484:	0005303a 	rdctl	r2,status
   44488:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4448c:	e0fff817 	ldw	r3,-32(fp)
   44490:	00bfff84 	movi	r2,-2
   44494:	1884703a 	and	r2,r3,r2
   44498:	1001703a 	wrctl	status,r2
  
  return context;
   4449c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   444a0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   444a4:	00800174 	movhi	r2,5
   444a8:	10a2e604 	addi	r2,r2,-29800
   444ac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   444b0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   444b4:	e0fffd17 	ldw	r3,-12(fp)
   444b8:	e0bff617 	ldw	r2,-40(fp)
   444bc:	1885883a 	add	r2,r3,r2
   444c0:	10c00044 	addi	r3,r2,1
   444c4:	e0bffc17 	ldw	r2,-16(fp)
   444c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   444cc:	e0bffc17 	ldw	r2,-16(fp)
   444d0:	10c00217 	ldw	r3,8(r2)
   444d4:	e0bff617 	ldw	r2,-40(fp)
   444d8:	1880042e 	bgeu	r3,r2,444ec <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   444dc:	e0bffc17 	ldw	r2,-16(fp)
   444e0:	00c00044 	movi	r3,1
   444e4:	10c00405 	stb	r3,16(r2)
   444e8:	00000206 	br	444f4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   444ec:	e0bffc17 	ldw	r2,-16(fp)
   444f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   444f4:	e0fffc17 	ldw	r3,-16(fp)
   444f8:	00800134 	movhi	r2,4
   444fc:	109c4004 	addi	r2,r2,28928
   44500:	e0bff915 	stw	r2,-28(fp)
   44504:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44508:	e0bffa17 	ldw	r2,-24(fp)
   4450c:	e0fff917 	ldw	r3,-28(fp)
   44510:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44514:	e0bff917 	ldw	r2,-28(fp)
   44518:	10c00017 	ldw	r3,0(r2)
   4451c:	e0bffa17 	ldw	r2,-24(fp)
   44520:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44524:	e0bff917 	ldw	r2,-28(fp)
   44528:	10800017 	ldw	r2,0(r2)
   4452c:	e0fffa17 	ldw	r3,-24(fp)
   44530:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44534:	e0bff917 	ldw	r2,-28(fp)
   44538:	e0fffa17 	ldw	r3,-24(fp)
   4453c:	10c00015 	stw	r3,0(r2)
   44540:	e0bff717 	ldw	r2,-36(fp)
   44544:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44548:	e0bffb17 	ldw	r2,-20(fp)
   4454c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   44550:	0005883a 	mov	r2,zero
   44554:	00000306 	br	44564 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   44558:	00bffa84 	movi	r2,-22
   4455c:	00000106 	br	44564 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   44560:	00bfde84 	movi	r2,-134
  }
}
   44564:	e037883a 	mov	sp,fp
   44568:	df000017 	ldw	fp,0(sp)
   4456c:	dec00104 	addi	sp,sp,4
   44570:	f800283a 	ret

00044574 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44574:	defffe04 	addi	sp,sp,-8
   44578:	df000115 	stw	fp,4(sp)
   4457c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44580:	e03fff15 	stw	zero,-4(fp)
   44584:	00000506 	br	4459c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   44588:	e0bfff17 	ldw	r2,-4(fp)
   4458c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44590:	e0bfff17 	ldw	r2,-4(fp)
   44594:	10800804 	addi	r2,r2,32
   44598:	e0bfff15 	stw	r2,-4(fp)
   4459c:	e0bfff17 	ldw	r2,-4(fp)
   445a0:	10820030 	cmpltui	r2,r2,2048
   445a4:	103ff81e 	bne	r2,zero,44588 <__alt_data_end+0xfffd2588>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   445a8:	e037883a 	mov	sp,fp
   445ac:	df000017 	ldw	fp,0(sp)
   445b0:	dec00104 	addi	sp,sp,4
   445b4:	f800283a 	ret

000445b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   445b8:	defffe04 	addi	sp,sp,-8
   445bc:	dfc00115 	stw	ra,4(sp)
   445c0:	df000015 	stw	fp,0(sp)
   445c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   445c8:	00800134 	movhi	r2,4
   445cc:	109c3d04 	addi	r2,r2,28916
   445d0:	10800017 	ldw	r2,0(r2)
   445d4:	10000526 	beq	r2,zero,445ec <alt_get_errno+0x34>
   445d8:	00800134 	movhi	r2,4
   445dc:	109c3d04 	addi	r2,r2,28916
   445e0:	10800017 	ldw	r2,0(r2)
   445e4:	103ee83a 	callr	r2
   445e8:	00000206 	br	445f4 <alt_get_errno+0x3c>
   445ec:	00800174 	movhi	r2,5
   445f0:	10a2e004 	addi	r2,r2,-29824
}
   445f4:	e037883a 	mov	sp,fp
   445f8:	dfc00117 	ldw	ra,4(sp)
   445fc:	df000017 	ldw	fp,0(sp)
   44600:	dec00204 	addi	sp,sp,8
   44604:	f800283a 	ret

00044608 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44608:	defffa04 	addi	sp,sp,-24
   4460c:	dfc00515 	stw	ra,20(sp)
   44610:	df000415 	stw	fp,16(sp)
   44614:	df000404 	addi	fp,sp,16
   44618:	e13ffe15 	stw	r4,-8(fp)
   4461c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44620:	e0bffe17 	ldw	r2,-8(fp)
   44624:	10000326 	beq	r2,zero,44634 <alt_dev_llist_insert+0x2c>
   44628:	e0bffe17 	ldw	r2,-8(fp)
   4462c:	10800217 	ldw	r2,8(r2)
   44630:	1000061e 	bne	r2,zero,4464c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   44634:	00445b80 	call	445b8 <alt_get_errno>
   44638:	1007883a 	mov	r3,r2
   4463c:	00800584 	movi	r2,22
   44640:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44644:	00bffa84 	movi	r2,-22
   44648:	00001306 	br	44698 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4464c:	e0bffe17 	ldw	r2,-8(fp)
   44650:	e0ffff17 	ldw	r3,-4(fp)
   44654:	e0fffc15 	stw	r3,-16(fp)
   44658:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4465c:	e0bffd17 	ldw	r2,-12(fp)
   44660:	e0fffc17 	ldw	r3,-16(fp)
   44664:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44668:	e0bffc17 	ldw	r2,-16(fp)
   4466c:	10c00017 	ldw	r3,0(r2)
   44670:	e0bffd17 	ldw	r2,-12(fp)
   44674:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44678:	e0bffc17 	ldw	r2,-16(fp)
   4467c:	10800017 	ldw	r2,0(r2)
   44680:	e0fffd17 	ldw	r3,-12(fp)
   44684:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44688:	e0bffc17 	ldw	r2,-16(fp)
   4468c:	e0fffd17 	ldw	r3,-12(fp)
   44690:	10c00015 	stw	r3,0(r2)

  return 0;  
   44694:	0005883a 	mov	r2,zero
}
   44698:	e037883a 	mov	sp,fp
   4469c:	dfc00117 	ldw	ra,4(sp)
   446a0:	df000017 	ldw	fp,0(sp)
   446a4:	dec00204 	addi	sp,sp,8
   446a8:	f800283a 	ret

000446ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   446ac:	defffd04 	addi	sp,sp,-12
   446b0:	dfc00215 	stw	ra,8(sp)
   446b4:	df000115 	stw	fp,4(sp)
   446b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   446bc:	00800134 	movhi	r2,4
   446c0:	10959404 	addi	r2,r2,22096
   446c4:	e0bfff15 	stw	r2,-4(fp)
   446c8:	00000606 	br	446e4 <_do_ctors+0x38>
        (*ctor) (); 
   446cc:	e0bfff17 	ldw	r2,-4(fp)
   446d0:	10800017 	ldw	r2,0(r2)
   446d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   446d8:	e0bfff17 	ldw	r2,-4(fp)
   446dc:	10bfff04 	addi	r2,r2,-4
   446e0:	e0bfff15 	stw	r2,-4(fp)
   446e4:	e0ffff17 	ldw	r3,-4(fp)
   446e8:	00800134 	movhi	r2,4
   446ec:	10959504 	addi	r2,r2,22100
   446f0:	18bff62e 	bgeu	r3,r2,446cc <__alt_data_end+0xfffd26cc>
        (*ctor) (); 
}
   446f4:	e037883a 	mov	sp,fp
   446f8:	dfc00117 	ldw	ra,4(sp)
   446fc:	df000017 	ldw	fp,0(sp)
   44700:	dec00204 	addi	sp,sp,8
   44704:	f800283a 	ret

00044708 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44708:	defffd04 	addi	sp,sp,-12
   4470c:	dfc00215 	stw	ra,8(sp)
   44710:	df000115 	stw	fp,4(sp)
   44714:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44718:	00800134 	movhi	r2,4
   4471c:	10959404 	addi	r2,r2,22096
   44720:	e0bfff15 	stw	r2,-4(fp)
   44724:	00000606 	br	44740 <_do_dtors+0x38>
        (*dtor) (); 
   44728:	e0bfff17 	ldw	r2,-4(fp)
   4472c:	10800017 	ldw	r2,0(r2)
   44730:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44734:	e0bfff17 	ldw	r2,-4(fp)
   44738:	10bfff04 	addi	r2,r2,-4
   4473c:	e0bfff15 	stw	r2,-4(fp)
   44740:	e0ffff17 	ldw	r3,-4(fp)
   44744:	00800134 	movhi	r2,4
   44748:	10959504 	addi	r2,r2,22100
   4474c:	18bff62e 	bgeu	r3,r2,44728 <__alt_data_end+0xfffd2728>
        (*dtor) (); 
}
   44750:	e037883a 	mov	sp,fp
   44754:	dfc00117 	ldw	ra,4(sp)
   44758:	df000017 	ldw	fp,0(sp)
   4475c:	dec00204 	addi	sp,sp,8
   44760:	f800283a 	ret

00044764 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44764:	defffe04 	addi	sp,sp,-8
   44768:	dfc00115 	stw	ra,4(sp)
   4476c:	df000015 	stw	fp,0(sp)
   44770:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   44774:	0009883a 	mov	r4,zero
   44778:	01440004 	movi	r5,4096
   4477c:	00452240 	call	45224 <alt_icache_flush>
#endif
}
   44780:	e037883a 	mov	sp,fp
   44784:	dfc00117 	ldw	ra,4(sp)
   44788:	df000017 	ldw	fp,0(sp)
   4478c:	dec00204 	addi	sp,sp,8
   44790:	f800283a 	ret

00044794 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44794:	defff904 	addi	sp,sp,-28
   44798:	dfc00615 	stw	ra,24(sp)
   4479c:	df000515 	stw	fp,20(sp)
   447a0:	df000504 	addi	fp,sp,20
   447a4:	e13ffc15 	stw	r4,-16(fp)
   447a8:	e17ffd15 	stw	r5,-12(fp)
   447ac:	e1bffe15 	stw	r6,-8(fp)
   447b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   447b4:	e0800217 	ldw	r2,8(fp)
   447b8:	d8800015 	stw	r2,0(sp)
   447bc:	e13ffc17 	ldw	r4,-16(fp)
   447c0:	e17ffd17 	ldw	r5,-12(fp)
   447c4:	e1bffe17 	ldw	r6,-8(fp)
   447c8:	e1ffff17 	ldw	r7,-4(fp)
   447cc:	00449740 	call	44974 <alt_iic_isr_register>
}  
   447d0:	e037883a 	mov	sp,fp
   447d4:	dfc00117 	ldw	ra,4(sp)
   447d8:	df000017 	ldw	fp,0(sp)
   447dc:	dec00204 	addi	sp,sp,8
   447e0:	f800283a 	ret

000447e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   447e4:	defff904 	addi	sp,sp,-28
   447e8:	df000615 	stw	fp,24(sp)
   447ec:	df000604 	addi	fp,sp,24
   447f0:	e13ffe15 	stw	r4,-8(fp)
   447f4:	e17fff15 	stw	r5,-4(fp)
   447f8:	e0bfff17 	ldw	r2,-4(fp)
   447fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44800:	0005303a 	rdctl	r2,status
   44804:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44808:	e0fffb17 	ldw	r3,-20(fp)
   4480c:	00bfff84 	movi	r2,-2
   44810:	1884703a 	and	r2,r3,r2
   44814:	1001703a 	wrctl	status,r2
  
  return context;
   44818:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4481c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   44820:	e0bffa17 	ldw	r2,-24(fp)
   44824:	00c00044 	movi	r3,1
   44828:	1884983a 	sll	r2,r3,r2
   4482c:	1007883a 	mov	r3,r2
   44830:	00800174 	movhi	r2,5
   44834:	10a2e404 	addi	r2,r2,-29808
   44838:	10800017 	ldw	r2,0(r2)
   4483c:	1886b03a 	or	r3,r3,r2
   44840:	00800174 	movhi	r2,5
   44844:	10a2e404 	addi	r2,r2,-29808
   44848:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4484c:	00800174 	movhi	r2,5
   44850:	10a2e404 	addi	r2,r2,-29808
   44854:	10800017 	ldw	r2,0(r2)
   44858:	100170fa 	wrctl	ienable,r2
   4485c:	e0bffc17 	ldw	r2,-16(fp)
   44860:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44864:	e0bffd17 	ldw	r2,-12(fp)
   44868:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4486c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   44870:	0001883a 	nop
}
   44874:	e037883a 	mov	sp,fp
   44878:	df000017 	ldw	fp,0(sp)
   4487c:	dec00104 	addi	sp,sp,4
   44880:	f800283a 	ret

00044884 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44884:	defff904 	addi	sp,sp,-28
   44888:	df000615 	stw	fp,24(sp)
   4488c:	df000604 	addi	fp,sp,24
   44890:	e13ffe15 	stw	r4,-8(fp)
   44894:	e17fff15 	stw	r5,-4(fp)
   44898:	e0bfff17 	ldw	r2,-4(fp)
   4489c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   448a0:	0005303a 	rdctl	r2,status
   448a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   448a8:	e0fffb17 	ldw	r3,-20(fp)
   448ac:	00bfff84 	movi	r2,-2
   448b0:	1884703a 	and	r2,r3,r2
   448b4:	1001703a 	wrctl	status,r2
  
  return context;
   448b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   448bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   448c0:	e0bffa17 	ldw	r2,-24(fp)
   448c4:	00c00044 	movi	r3,1
   448c8:	1884983a 	sll	r2,r3,r2
   448cc:	0084303a 	nor	r2,zero,r2
   448d0:	1007883a 	mov	r3,r2
   448d4:	00800174 	movhi	r2,5
   448d8:	10a2e404 	addi	r2,r2,-29808
   448dc:	10800017 	ldw	r2,0(r2)
   448e0:	1886703a 	and	r3,r3,r2
   448e4:	00800174 	movhi	r2,5
   448e8:	10a2e404 	addi	r2,r2,-29808
   448ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   448f0:	00800174 	movhi	r2,5
   448f4:	10a2e404 	addi	r2,r2,-29808
   448f8:	10800017 	ldw	r2,0(r2)
   448fc:	100170fa 	wrctl	ienable,r2
   44900:	e0bffc17 	ldw	r2,-16(fp)
   44904:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44908:	e0bffd17 	ldw	r2,-12(fp)
   4490c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44910:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   44914:	0001883a 	nop
}
   44918:	e037883a 	mov	sp,fp
   4491c:	df000017 	ldw	fp,0(sp)
   44920:	dec00104 	addi	sp,sp,4
   44924:	f800283a 	ret

00044928 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   44928:	defffc04 	addi	sp,sp,-16
   4492c:	df000315 	stw	fp,12(sp)
   44930:	df000304 	addi	fp,sp,12
   44934:	e13ffe15 	stw	r4,-8(fp)
   44938:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4493c:	000530fa 	rdctl	r2,ienable
   44940:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44944:	e0bfff17 	ldw	r2,-4(fp)
   44948:	00c00044 	movi	r3,1
   4494c:	1884983a 	sll	r2,r3,r2
   44950:	1007883a 	mov	r3,r2
   44954:	e0bffd17 	ldw	r2,-12(fp)
   44958:	1884703a 	and	r2,r3,r2
   4495c:	1004c03a 	cmpne	r2,r2,zero
   44960:	10803fcc 	andi	r2,r2,255
}
   44964:	e037883a 	mov	sp,fp
   44968:	df000017 	ldw	fp,0(sp)
   4496c:	dec00104 	addi	sp,sp,4
   44970:	f800283a 	ret

00044974 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44974:	defff504 	addi	sp,sp,-44
   44978:	dfc00a15 	stw	ra,40(sp)
   4497c:	df000915 	stw	fp,36(sp)
   44980:	df000904 	addi	fp,sp,36
   44984:	e13ffc15 	stw	r4,-16(fp)
   44988:	e17ffd15 	stw	r5,-12(fp)
   4498c:	e1bffe15 	stw	r6,-8(fp)
   44990:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   44994:	00bffa84 	movi	r2,-22
   44998:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4499c:	e0bffd17 	ldw	r2,-12(fp)
   449a0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   449a4:	e0bff817 	ldw	r2,-32(fp)
   449a8:	10800808 	cmpgei	r2,r2,32
   449ac:	1000271e 	bne	r2,zero,44a4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   449b0:	0005303a 	rdctl	r2,status
   449b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   449b8:	e0fffa17 	ldw	r3,-24(fp)
   449bc:	00bfff84 	movi	r2,-2
   449c0:	1884703a 	and	r2,r3,r2
   449c4:	1001703a 	wrctl	status,r2
  
  return context;
   449c8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   449cc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   449d0:	00800174 	movhi	r2,5
   449d4:	10a2f104 	addi	r2,r2,-29756
   449d8:	e0fff817 	ldw	r3,-32(fp)
   449dc:	180690fa 	slli	r3,r3,3
   449e0:	10c5883a 	add	r2,r2,r3
   449e4:	e0fffe17 	ldw	r3,-8(fp)
   449e8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   449ec:	00800174 	movhi	r2,5
   449f0:	10a2f104 	addi	r2,r2,-29756
   449f4:	e0fff817 	ldw	r3,-32(fp)
   449f8:	180690fa 	slli	r3,r3,3
   449fc:	18c00104 	addi	r3,r3,4
   44a00:	10c5883a 	add	r2,r2,r3
   44a04:	e0ffff17 	ldw	r3,-4(fp)
   44a08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44a0c:	e0bffe17 	ldw	r2,-8(fp)
   44a10:	10000526 	beq	r2,zero,44a28 <alt_iic_isr_register+0xb4>
   44a14:	e0bff817 	ldw	r2,-32(fp)
   44a18:	e13ffc17 	ldw	r4,-16(fp)
   44a1c:	100b883a 	mov	r5,r2
   44a20:	00447e40 	call	447e4 <alt_ic_irq_enable>
   44a24:	00000406 	br	44a38 <alt_iic_isr_register+0xc4>
   44a28:	e0bff817 	ldw	r2,-32(fp)
   44a2c:	e13ffc17 	ldw	r4,-16(fp)
   44a30:	100b883a 	mov	r5,r2
   44a34:	00448840 	call	44884 <alt_ic_irq_disable>
   44a38:	e0bff715 	stw	r2,-36(fp)
   44a3c:	e0bff917 	ldw	r2,-28(fp)
   44a40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44a44:	e0bffb17 	ldw	r2,-20(fp)
   44a48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   44a4c:	e0bff717 	ldw	r2,-36(fp)
}
   44a50:	e037883a 	mov	sp,fp
   44a54:	dfc00117 	ldw	ra,4(sp)
   44a58:	df000017 	ldw	fp,0(sp)
   44a5c:	dec00204 	addi	sp,sp,8
   44a60:	f800283a 	ret

00044a64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44a64:	defff904 	addi	sp,sp,-28
   44a68:	dfc00615 	stw	ra,24(sp)
   44a6c:	df000515 	stw	fp,20(sp)
   44a70:	df000504 	addi	fp,sp,20
   44a74:	e13ffc15 	stw	r4,-16(fp)
   44a78:	e17ffd15 	stw	r5,-12(fp)
   44a7c:	e1bffe15 	stw	r6,-8(fp)
   44a80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   44a84:	e13ffd17 	ldw	r4,-12(fp)
   44a88:	e17ffe17 	ldw	r5,-8(fp)
   44a8c:	e1bfff17 	ldw	r6,-4(fp)
   44a90:	0044cb80 	call	44cb8 <open>
   44a94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   44a98:	e0bffb17 	ldw	r2,-20(fp)
   44a9c:	10001c16 	blt	r2,zero,44b10 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   44aa0:	00800134 	movhi	r2,4
   44aa4:	1097bc04 	addi	r2,r2,24304
   44aa8:	e0fffb17 	ldw	r3,-20(fp)
   44aac:	18c00324 	muli	r3,r3,12
   44ab0:	10c5883a 	add	r2,r2,r3
   44ab4:	10c00017 	ldw	r3,0(r2)
   44ab8:	e0bffc17 	ldw	r2,-16(fp)
   44abc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44ac0:	00800134 	movhi	r2,4
   44ac4:	1097bc04 	addi	r2,r2,24304
   44ac8:	e0fffb17 	ldw	r3,-20(fp)
   44acc:	18c00324 	muli	r3,r3,12
   44ad0:	18c00104 	addi	r3,r3,4
   44ad4:	10c5883a 	add	r2,r2,r3
   44ad8:	10c00017 	ldw	r3,0(r2)
   44adc:	e0bffc17 	ldw	r2,-16(fp)
   44ae0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44ae4:	00800134 	movhi	r2,4
   44ae8:	1097bc04 	addi	r2,r2,24304
   44aec:	e0fffb17 	ldw	r3,-20(fp)
   44af0:	18c00324 	muli	r3,r3,12
   44af4:	18c00204 	addi	r3,r3,8
   44af8:	10c5883a 	add	r2,r2,r3
   44afc:	10c00017 	ldw	r3,0(r2)
   44b00:	e0bffc17 	ldw	r2,-16(fp)
   44b04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44b08:	e13ffb17 	ldw	r4,-20(fp)
   44b0c:	00436dc0 	call	436dc <alt_release_fd>
  }
} 
   44b10:	e037883a 	mov	sp,fp
   44b14:	dfc00117 	ldw	ra,4(sp)
   44b18:	df000017 	ldw	fp,0(sp)
   44b1c:	dec00204 	addi	sp,sp,8
   44b20:	f800283a 	ret

00044b24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44b24:	defffb04 	addi	sp,sp,-20
   44b28:	dfc00415 	stw	ra,16(sp)
   44b2c:	df000315 	stw	fp,12(sp)
   44b30:	df000304 	addi	fp,sp,12
   44b34:	e13ffd15 	stw	r4,-12(fp)
   44b38:	e17ffe15 	stw	r5,-8(fp)
   44b3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44b40:	01000134 	movhi	r4,4
   44b44:	2117bf04 	addi	r4,r4,24316
   44b48:	e17ffd17 	ldw	r5,-12(fp)
   44b4c:	01800044 	movi	r6,1
   44b50:	01c07fc4 	movi	r7,511
   44b54:	0044a640 	call	44a64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44b58:	01000134 	movhi	r4,4
   44b5c:	2117bc04 	addi	r4,r4,24304
   44b60:	e17ffe17 	ldw	r5,-8(fp)
   44b64:	000d883a 	mov	r6,zero
   44b68:	01c07fc4 	movi	r7,511
   44b6c:	0044a640 	call	44a64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44b70:	01000134 	movhi	r4,4
   44b74:	2117c204 	addi	r4,r4,24328
   44b78:	e17fff17 	ldw	r5,-4(fp)
   44b7c:	01800044 	movi	r6,1
   44b80:	01c07fc4 	movi	r7,511
   44b84:	0044a640 	call	44a64 <alt_open_fd>
}  
   44b88:	e037883a 	mov	sp,fp
   44b8c:	dfc00117 	ldw	ra,4(sp)
   44b90:	df000017 	ldw	fp,0(sp)
   44b94:	dec00204 	addi	sp,sp,8
   44b98:	f800283a 	ret

00044b9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44b9c:	defffe04 	addi	sp,sp,-8
   44ba0:	dfc00115 	stw	ra,4(sp)
   44ba4:	df000015 	stw	fp,0(sp)
   44ba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44bac:	00800134 	movhi	r2,4
   44bb0:	109c3d04 	addi	r2,r2,28916
   44bb4:	10800017 	ldw	r2,0(r2)
   44bb8:	10000526 	beq	r2,zero,44bd0 <alt_get_errno+0x34>
   44bbc:	00800134 	movhi	r2,4
   44bc0:	109c3d04 	addi	r2,r2,28916
   44bc4:	10800017 	ldw	r2,0(r2)
   44bc8:	103ee83a 	callr	r2
   44bcc:	00000206 	br	44bd8 <alt_get_errno+0x3c>
   44bd0:	00800174 	movhi	r2,5
   44bd4:	10a2e004 	addi	r2,r2,-29824
}
   44bd8:	e037883a 	mov	sp,fp
   44bdc:	dfc00117 	ldw	ra,4(sp)
   44be0:	df000017 	ldw	fp,0(sp)
   44be4:	dec00204 	addi	sp,sp,8
   44be8:	f800283a 	ret

00044bec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44bec:	defffd04 	addi	sp,sp,-12
   44bf0:	df000215 	stw	fp,8(sp)
   44bf4:	df000204 	addi	fp,sp,8
   44bf8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   44bfc:	e0bfff17 	ldw	r2,-4(fp)
   44c00:	10800217 	ldw	r2,8(r2)
   44c04:	10d00034 	orhi	r3,r2,16384
   44c08:	e0bfff17 	ldw	r2,-4(fp)
   44c0c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44c10:	e03ffe15 	stw	zero,-8(fp)
   44c14:	00001d06 	br	44c8c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44c18:	00800134 	movhi	r2,4
   44c1c:	1097bc04 	addi	r2,r2,24304
   44c20:	e0fffe17 	ldw	r3,-8(fp)
   44c24:	18c00324 	muli	r3,r3,12
   44c28:	10c5883a 	add	r2,r2,r3
   44c2c:	10c00017 	ldw	r3,0(r2)
   44c30:	e0bfff17 	ldw	r2,-4(fp)
   44c34:	10800017 	ldw	r2,0(r2)
   44c38:	1880111e 	bne	r3,r2,44c80 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44c3c:	00800134 	movhi	r2,4
   44c40:	1097bc04 	addi	r2,r2,24304
   44c44:	e0fffe17 	ldw	r3,-8(fp)
   44c48:	18c00324 	muli	r3,r3,12
   44c4c:	18c00204 	addi	r3,r3,8
   44c50:	10c5883a 	add	r2,r2,r3
   44c54:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44c58:	1000090e 	bge	r2,zero,44c80 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   44c5c:	e0bffe17 	ldw	r2,-8(fp)
   44c60:	10c00324 	muli	r3,r2,12
   44c64:	00800134 	movhi	r2,4
   44c68:	1097bc04 	addi	r2,r2,24304
   44c6c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44c70:	e0bfff17 	ldw	r2,-4(fp)
   44c74:	18800226 	beq	r3,r2,44c80 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   44c78:	00bffcc4 	movi	r2,-13
   44c7c:	00000a06 	br	44ca8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44c80:	e0bffe17 	ldw	r2,-8(fp)
   44c84:	10800044 	addi	r2,r2,1
   44c88:	e0bffe15 	stw	r2,-8(fp)
   44c8c:	00800134 	movhi	r2,4
   44c90:	109c3c04 	addi	r2,r2,28912
   44c94:	10800017 	ldw	r2,0(r2)
   44c98:	1007883a 	mov	r3,r2
   44c9c:	e0bffe17 	ldw	r2,-8(fp)
   44ca0:	18bfdd2e 	bgeu	r3,r2,44c18 <__alt_data_end+0xfffd2c18>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44ca4:	0005883a 	mov	r2,zero
}
   44ca8:	e037883a 	mov	sp,fp
   44cac:	df000017 	ldw	fp,0(sp)
   44cb0:	dec00104 	addi	sp,sp,4
   44cb4:	f800283a 	ret

00044cb8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44cb8:	defff604 	addi	sp,sp,-40
   44cbc:	dfc00915 	stw	ra,36(sp)
   44cc0:	df000815 	stw	fp,32(sp)
   44cc4:	df000804 	addi	fp,sp,32
   44cc8:	e13ffd15 	stw	r4,-12(fp)
   44ccc:	e17ffe15 	stw	r5,-8(fp)
   44cd0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44cd4:	00bfffc4 	movi	r2,-1
   44cd8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   44cdc:	00bffb44 	movi	r2,-19
   44ce0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   44ce4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   44ce8:	e13ffd17 	ldw	r4,-12(fp)
   44cec:	01400134 	movhi	r5,4
   44cf0:	295c3a04 	addi	r5,r5,28904
   44cf4:	0044fcc0 	call	44fcc <alt_find_dev>
   44cf8:	e0bff815 	stw	r2,-32(fp)
   44cfc:	e0bff817 	ldw	r2,-32(fp)
   44d00:	1000051e 	bne	r2,zero,44d18 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   44d04:	e13ffd17 	ldw	r4,-12(fp)
   44d08:	004505c0 	call	4505c <alt_find_file>
   44d0c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   44d10:	00800044 	movi	r2,1
   44d14:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   44d18:	e0bff817 	ldw	r2,-32(fp)
   44d1c:	10002926 	beq	r2,zero,44dc4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   44d20:	e13ff817 	ldw	r4,-32(fp)
   44d24:	00451700 	call	45170 <alt_get_fd>
   44d28:	e0bff915 	stw	r2,-28(fp)
   44d2c:	e0bff917 	ldw	r2,-28(fp)
   44d30:	1000030e 	bge	r2,zero,44d40 <open+0x88>
    {
      status = index;
   44d34:	e0bff917 	ldw	r2,-28(fp)
   44d38:	e0bffa15 	stw	r2,-24(fp)
   44d3c:	00002306 	br	44dcc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   44d40:	e0bff917 	ldw	r2,-28(fp)
   44d44:	10c00324 	muli	r3,r2,12
   44d48:	00800134 	movhi	r2,4
   44d4c:	1097bc04 	addi	r2,r2,24304
   44d50:	1885883a 	add	r2,r3,r2
   44d54:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44d58:	e0fffe17 	ldw	r3,-8(fp)
   44d5c:	00900034 	movhi	r2,16384
   44d60:	10bfffc4 	addi	r2,r2,-1
   44d64:	1886703a 	and	r3,r3,r2
   44d68:	e0bffc17 	ldw	r2,-16(fp)
   44d6c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44d70:	e0bffb17 	ldw	r2,-20(fp)
   44d74:	1000051e 	bne	r2,zero,44d8c <open+0xd4>
   44d78:	e13ffc17 	ldw	r4,-16(fp)
   44d7c:	0044bec0 	call	44bec <alt_file_locked>
   44d80:	e0bffa15 	stw	r2,-24(fp)
   44d84:	e0bffa17 	ldw	r2,-24(fp)
   44d88:	10001016 	blt	r2,zero,44dcc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44d8c:	e0bff817 	ldw	r2,-32(fp)
   44d90:	10800317 	ldw	r2,12(r2)
   44d94:	10000826 	beq	r2,zero,44db8 <open+0x100>
   44d98:	e0bff817 	ldw	r2,-32(fp)
   44d9c:	10800317 	ldw	r2,12(r2)
   44da0:	e13ffc17 	ldw	r4,-16(fp)
   44da4:	e17ffd17 	ldw	r5,-12(fp)
   44da8:	e1bffe17 	ldw	r6,-8(fp)
   44dac:	e1ffff17 	ldw	r7,-4(fp)
   44db0:	103ee83a 	callr	r2
   44db4:	00000106 	br	44dbc <open+0x104>
   44db8:	0005883a 	mov	r2,zero
   44dbc:	e0bffa15 	stw	r2,-24(fp)
   44dc0:	00000206 	br	44dcc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44dc4:	00bffb44 	movi	r2,-19
   44dc8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44dcc:	e0bffa17 	ldw	r2,-24(fp)
   44dd0:	1000090e 	bge	r2,zero,44df8 <open+0x140>
  {
    alt_release_fd (index);  
   44dd4:	e13ff917 	ldw	r4,-28(fp)
   44dd8:	00436dc0 	call	436dc <alt_release_fd>
    ALT_ERRNO = -status;
   44ddc:	0044b9c0 	call	44b9c <alt_get_errno>
   44de0:	1007883a 	mov	r3,r2
   44de4:	e0bffa17 	ldw	r2,-24(fp)
   44de8:	0085c83a 	sub	r2,zero,r2
   44dec:	18800015 	stw	r2,0(r3)
    return -1;
   44df0:	00bfffc4 	movi	r2,-1
   44df4:	00000106 	br	44dfc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   44df8:	e0bff917 	ldw	r2,-28(fp)
}
   44dfc:	e037883a 	mov	sp,fp
   44e00:	dfc00117 	ldw	ra,4(sp)
   44e04:	df000017 	ldw	fp,0(sp)
   44e08:	dec00204 	addi	sp,sp,8
   44e0c:	f800283a 	ret

00044e10 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   44e10:	defffa04 	addi	sp,sp,-24
   44e14:	df000515 	stw	fp,20(sp)
   44e18:	df000504 	addi	fp,sp,20
   44e1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44e20:	0005303a 	rdctl	r2,status
   44e24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44e28:	e0fffc17 	ldw	r3,-16(fp)
   44e2c:	00bfff84 	movi	r2,-2
   44e30:	1884703a 	and	r2,r3,r2
   44e34:	1001703a 	wrctl	status,r2
  
  return context;
   44e38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   44e3c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   44e40:	e0bfff17 	ldw	r2,-4(fp)
   44e44:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   44e48:	e0bffd17 	ldw	r2,-12(fp)
   44e4c:	10800017 	ldw	r2,0(r2)
   44e50:	e0fffd17 	ldw	r3,-12(fp)
   44e54:	18c00117 	ldw	r3,4(r3)
   44e58:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   44e5c:	e0bffd17 	ldw	r2,-12(fp)
   44e60:	10800117 	ldw	r2,4(r2)
   44e64:	e0fffd17 	ldw	r3,-12(fp)
   44e68:	18c00017 	ldw	r3,0(r3)
   44e6c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   44e70:	e0bffd17 	ldw	r2,-12(fp)
   44e74:	e0fffd17 	ldw	r3,-12(fp)
   44e78:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   44e7c:	e0bffd17 	ldw	r2,-12(fp)
   44e80:	e0fffd17 	ldw	r3,-12(fp)
   44e84:	10c00015 	stw	r3,0(r2)
   44e88:	e0bffb17 	ldw	r2,-20(fp)
   44e8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44e90:	e0bffe17 	ldw	r2,-8(fp)
   44e94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   44e98:	e037883a 	mov	sp,fp
   44e9c:	df000017 	ldw	fp,0(sp)
   44ea0:	dec00104 	addi	sp,sp,4
   44ea4:	f800283a 	ret

00044ea8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   44ea8:	defffb04 	addi	sp,sp,-20
   44eac:	dfc00415 	stw	ra,16(sp)
   44eb0:	df000315 	stw	fp,12(sp)
   44eb4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   44eb8:	d0a00c17 	ldw	r2,-32720(gp)
   44ebc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   44ec0:	d0a6b217 	ldw	r2,-25912(gp)
   44ec4:	10800044 	addi	r2,r2,1
   44ec8:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44ecc:	00002e06 	br	44f88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   44ed0:	e0bffd17 	ldw	r2,-12(fp)
   44ed4:	10800017 	ldw	r2,0(r2)
   44ed8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   44edc:	e0bffd17 	ldw	r2,-12(fp)
   44ee0:	10800403 	ldbu	r2,16(r2)
   44ee4:	10803fcc 	andi	r2,r2,255
   44ee8:	10000426 	beq	r2,zero,44efc <alt_tick+0x54>
   44eec:	d0a6b217 	ldw	r2,-25912(gp)
   44ef0:	1000021e 	bne	r2,zero,44efc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   44ef4:	e0bffd17 	ldw	r2,-12(fp)
   44ef8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   44efc:	e0bffd17 	ldw	r2,-12(fp)
   44f00:	10800217 	ldw	r2,8(r2)
   44f04:	d0e6b217 	ldw	r3,-25912(gp)
   44f08:	18801d36 	bltu	r3,r2,44f80 <alt_tick+0xd8>
   44f0c:	e0bffd17 	ldw	r2,-12(fp)
   44f10:	10800403 	ldbu	r2,16(r2)
   44f14:	10803fcc 	andi	r2,r2,255
   44f18:	1000191e 	bne	r2,zero,44f80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   44f1c:	e0bffd17 	ldw	r2,-12(fp)
   44f20:	10800317 	ldw	r2,12(r2)
   44f24:	e0fffd17 	ldw	r3,-12(fp)
   44f28:	18c00517 	ldw	r3,20(r3)
   44f2c:	1809883a 	mov	r4,r3
   44f30:	103ee83a 	callr	r2
   44f34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   44f38:	e0bfff17 	ldw	r2,-4(fp)
   44f3c:	1000031e 	bne	r2,zero,44f4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   44f40:	e13ffd17 	ldw	r4,-12(fp)
   44f44:	0044e100 	call	44e10 <alt_alarm_stop>
   44f48:	00000d06 	br	44f80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   44f4c:	e0bffd17 	ldw	r2,-12(fp)
   44f50:	10c00217 	ldw	r3,8(r2)
   44f54:	e0bfff17 	ldw	r2,-4(fp)
   44f58:	1887883a 	add	r3,r3,r2
   44f5c:	e0bffd17 	ldw	r2,-12(fp)
   44f60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   44f64:	e0bffd17 	ldw	r2,-12(fp)
   44f68:	10c00217 	ldw	r3,8(r2)
   44f6c:	d0a6b217 	ldw	r2,-25912(gp)
   44f70:	1880032e 	bgeu	r3,r2,44f80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   44f74:	e0bffd17 	ldw	r2,-12(fp)
   44f78:	00c00044 	movi	r3,1
   44f7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   44f80:	e0bffe17 	ldw	r2,-8(fp)
   44f84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44f88:	e0fffd17 	ldw	r3,-12(fp)
   44f8c:	d0a00c04 	addi	r2,gp,-32720
   44f90:	18bfcf1e 	bne	r3,r2,44ed0 <__alt_data_end+0xfffd2ed0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   44f94:	0001883a 	nop
}
   44f98:	e037883a 	mov	sp,fp
   44f9c:	dfc00117 	ldw	ra,4(sp)
   44fa0:	df000017 	ldw	fp,0(sp)
   44fa4:	dec00204 	addi	sp,sp,8
   44fa8:	f800283a 	ret

00044fac <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   44fac:	deffff04 	addi	sp,sp,-4
   44fb0:	df000015 	stw	fp,0(sp)
   44fb4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   44fb8:	000170fa 	wrctl	ienable,zero
}
   44fbc:	e037883a 	mov	sp,fp
   44fc0:	df000017 	ldw	fp,0(sp)
   44fc4:	dec00104 	addi	sp,sp,4
   44fc8:	f800283a 	ret

00044fcc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   44fcc:	defffa04 	addi	sp,sp,-24
   44fd0:	dfc00515 	stw	ra,20(sp)
   44fd4:	df000415 	stw	fp,16(sp)
   44fd8:	df000404 	addi	fp,sp,16
   44fdc:	e13ffe15 	stw	r4,-8(fp)
   44fe0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44fe4:	e0bfff17 	ldw	r2,-4(fp)
   44fe8:	10800017 	ldw	r2,0(r2)
   44fec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   44ff0:	e13ffe17 	ldw	r4,-8(fp)
   44ff4:	00403d80 	call	403d8 <strlen>
   44ff8:	10800044 	addi	r2,r2,1
   44ffc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45000:	00000d06 	br	45038 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   45004:	e0bffc17 	ldw	r2,-16(fp)
   45008:	10c00217 	ldw	r3,8(r2)
   4500c:	e0bffd17 	ldw	r2,-12(fp)
   45010:	1809883a 	mov	r4,r3
   45014:	e17ffe17 	ldw	r5,-8(fp)
   45018:	100d883a 	mov	r6,r2
   4501c:	00452fc0 	call	452fc <memcmp>
   45020:	1000021e 	bne	r2,zero,4502c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45024:	e0bffc17 	ldw	r2,-16(fp)
   45028:	00000706 	br	45048 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4502c:	e0bffc17 	ldw	r2,-16(fp)
   45030:	10800017 	ldw	r2,0(r2)
   45034:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45038:	e0fffc17 	ldw	r3,-16(fp)
   4503c:	e0bfff17 	ldw	r2,-4(fp)
   45040:	18bff01e 	bne	r3,r2,45004 <__alt_data_end+0xfffd3004>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45044:	0005883a 	mov	r2,zero
}
   45048:	e037883a 	mov	sp,fp
   4504c:	dfc00117 	ldw	ra,4(sp)
   45050:	df000017 	ldw	fp,0(sp)
   45054:	dec00204 	addi	sp,sp,8
   45058:	f800283a 	ret

0004505c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4505c:	defffb04 	addi	sp,sp,-20
   45060:	dfc00415 	stw	ra,16(sp)
   45064:	df000315 	stw	fp,12(sp)
   45068:	df000304 	addi	fp,sp,12
   4506c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45070:	00800134 	movhi	r2,4
   45074:	109c3804 	addi	r2,r2,28896
   45078:	10800017 	ldw	r2,0(r2)
   4507c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45080:	00003106 	br	45148 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   45084:	e0bffd17 	ldw	r2,-12(fp)
   45088:	10800217 	ldw	r2,8(r2)
   4508c:	1009883a 	mov	r4,r2
   45090:	00403d80 	call	403d8 <strlen>
   45094:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   45098:	e0bffd17 	ldw	r2,-12(fp)
   4509c:	10c00217 	ldw	r3,8(r2)
   450a0:	e0bffe17 	ldw	r2,-8(fp)
   450a4:	10bfffc4 	addi	r2,r2,-1
   450a8:	1885883a 	add	r2,r3,r2
   450ac:	10800003 	ldbu	r2,0(r2)
   450b0:	10803fcc 	andi	r2,r2,255
   450b4:	1080201c 	xori	r2,r2,128
   450b8:	10bfe004 	addi	r2,r2,-128
   450bc:	10800bd8 	cmpnei	r2,r2,47
   450c0:	1000031e 	bne	r2,zero,450d0 <alt_find_file+0x74>
    {
      len -= 1;
   450c4:	e0bffe17 	ldw	r2,-8(fp)
   450c8:	10bfffc4 	addi	r2,r2,-1
   450cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   450d0:	e0bffe17 	ldw	r2,-8(fp)
   450d4:	e0ffff17 	ldw	r3,-4(fp)
   450d8:	1885883a 	add	r2,r3,r2
   450dc:	10800003 	ldbu	r2,0(r2)
   450e0:	10803fcc 	andi	r2,r2,255
   450e4:	1080201c 	xori	r2,r2,128
   450e8:	10bfe004 	addi	r2,r2,-128
   450ec:	10800be0 	cmpeqi	r2,r2,47
   450f0:	1000081e 	bne	r2,zero,45114 <alt_find_file+0xb8>
   450f4:	e0bffe17 	ldw	r2,-8(fp)
   450f8:	e0ffff17 	ldw	r3,-4(fp)
   450fc:	1885883a 	add	r2,r3,r2
   45100:	10800003 	ldbu	r2,0(r2)
   45104:	10803fcc 	andi	r2,r2,255
   45108:	1080201c 	xori	r2,r2,128
   4510c:	10bfe004 	addi	r2,r2,-128
   45110:	10000a1e 	bne	r2,zero,4513c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   45114:	e0bffd17 	ldw	r2,-12(fp)
   45118:	10c00217 	ldw	r3,8(r2)
   4511c:	e0bffe17 	ldw	r2,-8(fp)
   45120:	1809883a 	mov	r4,r3
   45124:	e17fff17 	ldw	r5,-4(fp)
   45128:	100d883a 	mov	r6,r2
   4512c:	00452fc0 	call	452fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45130:	1000021e 	bne	r2,zero,4513c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   45134:	e0bffd17 	ldw	r2,-12(fp)
   45138:	00000806 	br	4515c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   4513c:	e0bffd17 	ldw	r2,-12(fp)
   45140:	10800017 	ldw	r2,0(r2)
   45144:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45148:	e0fffd17 	ldw	r3,-12(fp)
   4514c:	00800134 	movhi	r2,4
   45150:	109c3804 	addi	r2,r2,28896
   45154:	18bfcb1e 	bne	r3,r2,45084 <__alt_data_end+0xfffd3084>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45158:	0005883a 	mov	r2,zero
}
   4515c:	e037883a 	mov	sp,fp
   45160:	dfc00117 	ldw	ra,4(sp)
   45164:	df000017 	ldw	fp,0(sp)
   45168:	dec00204 	addi	sp,sp,8
   4516c:	f800283a 	ret

00045170 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45170:	defffc04 	addi	sp,sp,-16
   45174:	df000315 	stw	fp,12(sp)
   45178:	df000304 	addi	fp,sp,12
   4517c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   45180:	00bffa04 	movi	r2,-24
   45184:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45188:	e03ffd15 	stw	zero,-12(fp)
   4518c:	00001d06 	br	45204 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   45190:	00800134 	movhi	r2,4
   45194:	1097bc04 	addi	r2,r2,24304
   45198:	e0fffd17 	ldw	r3,-12(fp)
   4519c:	18c00324 	muli	r3,r3,12
   451a0:	10c5883a 	add	r2,r2,r3
   451a4:	10800017 	ldw	r2,0(r2)
   451a8:	1000131e 	bne	r2,zero,451f8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   451ac:	00800134 	movhi	r2,4
   451b0:	1097bc04 	addi	r2,r2,24304
   451b4:	e0fffd17 	ldw	r3,-12(fp)
   451b8:	18c00324 	muli	r3,r3,12
   451bc:	10c5883a 	add	r2,r2,r3
   451c0:	e0ffff17 	ldw	r3,-4(fp)
   451c4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   451c8:	00800134 	movhi	r2,4
   451cc:	109c3c04 	addi	r2,r2,28912
   451d0:	10c00017 	ldw	r3,0(r2)
   451d4:	e0bffd17 	ldw	r2,-12(fp)
   451d8:	1880040e 	bge	r3,r2,451ec <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   451dc:	00800134 	movhi	r2,4
   451e0:	109c3c04 	addi	r2,r2,28912
   451e4:	e0fffd17 	ldw	r3,-12(fp)
   451e8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   451ec:	e0bffd17 	ldw	r2,-12(fp)
   451f0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   451f4:	00000606 	br	45210 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   451f8:	e0bffd17 	ldw	r2,-12(fp)
   451fc:	10800044 	addi	r2,r2,1
   45200:	e0bffd15 	stw	r2,-12(fp)
   45204:	e0bffd17 	ldw	r2,-12(fp)
   45208:	10800810 	cmplti	r2,r2,32
   4520c:	103fe01e 	bne	r2,zero,45190 <__alt_data_end+0xfffd3190>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45210:	e0bffe17 	ldw	r2,-8(fp)
}
   45214:	e037883a 	mov	sp,fp
   45218:	df000017 	ldw	fp,0(sp)
   4521c:	dec00104 	addi	sp,sp,4
   45220:	f800283a 	ret

00045224 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   45224:	defffb04 	addi	sp,sp,-20
   45228:	df000415 	stw	fp,16(sp)
   4522c:	df000404 	addi	fp,sp,16
   45230:	e13ffe15 	stw	r4,-8(fp)
   45234:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   45238:	e0bfff17 	ldw	r2,-4(fp)
   4523c:	10840070 	cmpltui	r2,r2,4097
   45240:	1000021e 	bne	r2,zero,4524c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   45244:	00840004 	movi	r2,4096
   45248:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4524c:	e0fffe17 	ldw	r3,-8(fp)
   45250:	e0bfff17 	ldw	r2,-4(fp)
   45254:	1885883a 	add	r2,r3,r2
   45258:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4525c:	e0bffe17 	ldw	r2,-8(fp)
   45260:	e0bffc15 	stw	r2,-16(fp)
   45264:	00000506 	br	4527c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   45268:	e0bffc17 	ldw	r2,-16(fp)
   4526c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45270:	e0bffc17 	ldw	r2,-16(fp)
   45274:	10800804 	addi	r2,r2,32
   45278:	e0bffc15 	stw	r2,-16(fp)
   4527c:	e0fffc17 	ldw	r3,-16(fp)
   45280:	e0bffd17 	ldw	r2,-12(fp)
   45284:	18bff836 	bltu	r3,r2,45268 <__alt_data_end+0xfffd3268>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   45288:	e0bffe17 	ldw	r2,-8(fp)
   4528c:	108007cc 	andi	r2,r2,31
   45290:	10000226 	beq	r2,zero,4529c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   45294:	e0bffc17 	ldw	r2,-16(fp)
   45298:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4529c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   452a0:	e037883a 	mov	sp,fp
   452a4:	df000017 	ldw	fp,0(sp)
   452a8:	dec00104 	addi	sp,sp,4
   452ac:	f800283a 	ret

000452b0 <atexit>:
   452b0:	200b883a 	mov	r5,r4
   452b4:	000d883a 	mov	r6,zero
   452b8:	0009883a 	mov	r4,zero
   452bc:	000f883a 	mov	r7,zero
   452c0:	00453781 	jmpi	45378 <__register_exitproc>

000452c4 <exit>:
   452c4:	defffe04 	addi	sp,sp,-8
   452c8:	000b883a 	mov	r5,zero
   452cc:	dc000015 	stw	r16,0(sp)
   452d0:	dfc00115 	stw	ra,4(sp)
   452d4:	2021883a 	mov	r16,r4
   452d8:	004548c0 	call	4548c <__call_exitprocs>
   452dc:	00800134 	movhi	r2,4
   452e0:	109c3404 	addi	r2,r2,28880
   452e4:	11000017 	ldw	r4,0(r2)
   452e8:	20800f17 	ldw	r2,60(r4)
   452ec:	10000126 	beq	r2,zero,452f4 <exit+0x30>
   452f0:	103ee83a 	callr	r2
   452f4:	8009883a 	mov	r4,r16
   452f8:	00456200 	call	45620 <_exit>

000452fc <memcmp>:
   452fc:	01c000c4 	movi	r7,3
   45300:	3980192e 	bgeu	r7,r6,45368 <memcmp+0x6c>
   45304:	2144b03a 	or	r2,r4,r5
   45308:	11c4703a 	and	r2,r2,r7
   4530c:	10000f26 	beq	r2,zero,4534c <memcmp+0x50>
   45310:	20800003 	ldbu	r2,0(r4)
   45314:	28c00003 	ldbu	r3,0(r5)
   45318:	10c0151e 	bne	r2,r3,45370 <memcmp+0x74>
   4531c:	31bfff84 	addi	r6,r6,-2
   45320:	01ffffc4 	movi	r7,-1
   45324:	00000406 	br	45338 <memcmp+0x3c>
   45328:	20800003 	ldbu	r2,0(r4)
   4532c:	28c00003 	ldbu	r3,0(r5)
   45330:	31bfffc4 	addi	r6,r6,-1
   45334:	10c00e1e 	bne	r2,r3,45370 <memcmp+0x74>
   45338:	21000044 	addi	r4,r4,1
   4533c:	29400044 	addi	r5,r5,1
   45340:	31fff91e 	bne	r6,r7,45328 <__alt_data_end+0xfffd3328>
   45344:	0005883a 	mov	r2,zero
   45348:	f800283a 	ret
   4534c:	20c00017 	ldw	r3,0(r4)
   45350:	28800017 	ldw	r2,0(r5)
   45354:	1880041e 	bne	r3,r2,45368 <memcmp+0x6c>
   45358:	31bfff04 	addi	r6,r6,-4
   4535c:	21000104 	addi	r4,r4,4
   45360:	29400104 	addi	r5,r5,4
   45364:	39bff936 	bltu	r7,r6,4534c <__alt_data_end+0xfffd334c>
   45368:	303fe91e 	bne	r6,zero,45310 <__alt_data_end+0xfffd3310>
   4536c:	003ff506 	br	45344 <__alt_data_end+0xfffd3344>
   45370:	10c5c83a 	sub	r2,r2,r3
   45374:	f800283a 	ret

00045378 <__register_exitproc>:
   45378:	00800134 	movhi	r2,4
   4537c:	defffa04 	addi	sp,sp,-24
   45380:	109c3404 	addi	r2,r2,28880
   45384:	dc000315 	stw	r16,12(sp)
   45388:	14000017 	ldw	r16,0(r2)
   4538c:	dc400415 	stw	r17,16(sp)
   45390:	dfc00515 	stw	ra,20(sp)
   45394:	80805217 	ldw	r2,328(r16)
   45398:	2023883a 	mov	r17,r4
   4539c:	10003626 	beq	r2,zero,45478 <__register_exitproc+0x100>
   453a0:	10c00117 	ldw	r3,4(r2)
   453a4:	010007c4 	movi	r4,31
   453a8:	20c00e16 	blt	r4,r3,453e4 <__register_exitproc+0x6c>
   453ac:	1a400044 	addi	r9,r3,1
   453b0:	8800211e 	bne	r17,zero,45438 <__register_exitproc+0xc0>
   453b4:	18c00084 	addi	r3,r3,2
   453b8:	18c7883a 	add	r3,r3,r3
   453bc:	18c7883a 	add	r3,r3,r3
   453c0:	12400115 	stw	r9,4(r2)
   453c4:	10c7883a 	add	r3,r2,r3
   453c8:	19400015 	stw	r5,0(r3)
   453cc:	0005883a 	mov	r2,zero
   453d0:	dfc00517 	ldw	ra,20(sp)
   453d4:	dc400417 	ldw	r17,16(sp)
   453d8:	dc000317 	ldw	r16,12(sp)
   453dc:	dec00604 	addi	sp,sp,24
   453e0:	f800283a 	ret
   453e4:	00800034 	movhi	r2,0
   453e8:	10800004 	addi	r2,r2,0
   453ec:	10002526 	beq	r2,zero,45484 <__register_exitproc+0x10c>
   453f0:	01006404 	movi	r4,400
   453f4:	d9400015 	stw	r5,0(sp)
   453f8:	d9800115 	stw	r6,4(sp)
   453fc:	d9c00215 	stw	r7,8(sp)
   45400:	00000000 	call	0 <__reset-0x40000>
   45404:	d9400017 	ldw	r5,0(sp)
   45408:	d9800117 	ldw	r6,4(sp)
   4540c:	d9c00217 	ldw	r7,8(sp)
   45410:	10001c26 	beq	r2,zero,45484 <__register_exitproc+0x10c>
   45414:	80c05217 	ldw	r3,328(r16)
   45418:	10000115 	stw	zero,4(r2)
   4541c:	02400044 	movi	r9,1
   45420:	10c00015 	stw	r3,0(r2)
   45424:	80805215 	stw	r2,328(r16)
   45428:	10006215 	stw	zero,392(r2)
   4542c:	10006315 	stw	zero,396(r2)
   45430:	0007883a 	mov	r3,zero
   45434:	883fdf26 	beq	r17,zero,453b4 <__alt_data_end+0xfffd33b4>
   45438:	18d1883a 	add	r8,r3,r3
   4543c:	4211883a 	add	r8,r8,r8
   45440:	1211883a 	add	r8,r2,r8
   45444:	41802215 	stw	r6,136(r8)
   45448:	01000044 	movi	r4,1
   4544c:	11806217 	ldw	r6,392(r2)
   45450:	20c8983a 	sll	r4,r4,r3
   45454:	310cb03a 	or	r6,r6,r4
   45458:	11806215 	stw	r6,392(r2)
   4545c:	41c04215 	stw	r7,264(r8)
   45460:	01800084 	movi	r6,2
   45464:	89bfd31e 	bne	r17,r6,453b4 <__alt_data_end+0xfffd33b4>
   45468:	11806317 	ldw	r6,396(r2)
   4546c:	3108b03a 	or	r4,r6,r4
   45470:	11006315 	stw	r4,396(r2)
   45474:	003fcf06 	br	453b4 <__alt_data_end+0xfffd33b4>
   45478:	80805304 	addi	r2,r16,332
   4547c:	80805215 	stw	r2,328(r16)
   45480:	003fc706 	br	453a0 <__alt_data_end+0xfffd33a0>
   45484:	00bfffc4 	movi	r2,-1
   45488:	003fd106 	br	453d0 <__alt_data_end+0xfffd33d0>

0004548c <__call_exitprocs>:
   4548c:	00800134 	movhi	r2,4
   45490:	109c3404 	addi	r2,r2,28880
   45494:	10800017 	ldw	r2,0(r2)
   45498:	defff404 	addi	sp,sp,-48
   4549c:	dd800815 	stw	r22,32(sp)
   454a0:	d8800015 	stw	r2,0(sp)
   454a4:	10805204 	addi	r2,r2,328
   454a8:	dd000615 	stw	r20,24(sp)
   454ac:	dc800415 	stw	r18,16(sp)
   454b0:	dfc00b15 	stw	ra,44(sp)
   454b4:	df000a15 	stw	fp,40(sp)
   454b8:	ddc00915 	stw	r23,36(sp)
   454bc:	dd400715 	stw	r21,28(sp)
   454c0:	dcc00515 	stw	r19,20(sp)
   454c4:	dc400315 	stw	r17,12(sp)
   454c8:	dc000215 	stw	r16,8(sp)
   454cc:	2025883a 	mov	r18,r4
   454d0:	2829883a 	mov	r20,r5
   454d4:	d8800115 	stw	r2,4(sp)
   454d8:	05bfffc4 	movi	r22,-1
   454dc:	d8800017 	ldw	r2,0(sp)
   454e0:	14c05217 	ldw	r19,328(r2)
   454e4:	98001d26 	beq	r19,zero,4555c <__call_exitprocs+0xd0>
   454e8:	dd400117 	ldw	r21,4(sp)
   454ec:	98800117 	ldw	r2,4(r19)
   454f0:	173fffc4 	addi	fp,r2,-1
   454f4:	e0000d16 	blt	fp,zero,4552c <__call_exitprocs+0xa0>
   454f8:	14000044 	addi	r16,r2,1
   454fc:	8421883a 	add	r16,r16,r16
   45500:	8421883a 	add	r16,r16,r16
   45504:	84402004 	addi	r17,r16,128
   45508:	9c63883a 	add	r17,r19,r17
   4550c:	9c21883a 	add	r16,r19,r16
   45510:	a0001e26 	beq	r20,zero,4558c <__call_exitprocs+0x100>
   45514:	80804017 	ldw	r2,256(r16)
   45518:	15001c26 	beq	r2,r20,4558c <__call_exitprocs+0x100>
   4551c:	e73fffc4 	addi	fp,fp,-1
   45520:	843fff04 	addi	r16,r16,-4
   45524:	8c7fff04 	addi	r17,r17,-4
   45528:	e5bff91e 	bne	fp,r22,45510 <__alt_data_end+0xfffd3510>
   4552c:	00800034 	movhi	r2,0
   45530:	10800004 	addi	r2,r2,0
   45534:	10000926 	beq	r2,zero,4555c <__call_exitprocs+0xd0>
   45538:	98800117 	ldw	r2,4(r19)
   4553c:	1000311e 	bne	r2,zero,45604 <__call_exitprocs+0x178>
   45540:	98800017 	ldw	r2,0(r19)
   45544:	10003426 	beq	r2,zero,45618 <__call_exitprocs+0x18c>
   45548:	9809883a 	mov	r4,r19
   4554c:	a8800015 	stw	r2,0(r21)
   45550:	00000000 	call	0 <__reset-0x40000>
   45554:	acc00017 	ldw	r19,0(r21)
   45558:	983fe41e 	bne	r19,zero,454ec <__alt_data_end+0xfffd34ec>
   4555c:	dfc00b17 	ldw	ra,44(sp)
   45560:	df000a17 	ldw	fp,40(sp)
   45564:	ddc00917 	ldw	r23,36(sp)
   45568:	dd800817 	ldw	r22,32(sp)
   4556c:	dd400717 	ldw	r21,28(sp)
   45570:	dd000617 	ldw	r20,24(sp)
   45574:	dcc00517 	ldw	r19,20(sp)
   45578:	dc800417 	ldw	r18,16(sp)
   4557c:	dc400317 	ldw	r17,12(sp)
   45580:	dc000217 	ldw	r16,8(sp)
   45584:	dec00c04 	addi	sp,sp,48
   45588:	f800283a 	ret
   4558c:	98800117 	ldw	r2,4(r19)
   45590:	80c00017 	ldw	r3,0(r16)
   45594:	10bfffc4 	addi	r2,r2,-1
   45598:	17001526 	beq	r2,fp,455f0 <__call_exitprocs+0x164>
   4559c:	80000015 	stw	zero,0(r16)
   455a0:	183fde26 	beq	r3,zero,4551c <__alt_data_end+0xfffd351c>
   455a4:	00800044 	movi	r2,1
   455a8:	1708983a 	sll	r4,r2,fp
   455ac:	98806217 	ldw	r2,392(r19)
   455b0:	9dc00117 	ldw	r23,4(r19)
   455b4:	2084703a 	and	r2,r4,r2
   455b8:	1000061e 	bne	r2,zero,455d4 <__call_exitprocs+0x148>
   455bc:	183ee83a 	callr	r3
   455c0:	98800117 	ldw	r2,4(r19)
   455c4:	15ffc51e 	bne	r2,r23,454dc <__alt_data_end+0xfffd34dc>
   455c8:	a8800017 	ldw	r2,0(r21)
   455cc:	14ffd326 	beq	r2,r19,4551c <__alt_data_end+0xfffd351c>
   455d0:	003fc206 	br	454dc <__alt_data_end+0xfffd34dc>
   455d4:	98806317 	ldw	r2,396(r19)
   455d8:	2084703a 	and	r2,r4,r2
   455dc:	1000061e 	bne	r2,zero,455f8 <__call_exitprocs+0x16c>
   455e0:	89400017 	ldw	r5,0(r17)
   455e4:	9009883a 	mov	r4,r18
   455e8:	183ee83a 	callr	r3
   455ec:	003ff406 	br	455c0 <__alt_data_end+0xfffd35c0>
   455f0:	9f000115 	stw	fp,4(r19)
   455f4:	003fea06 	br	455a0 <__alt_data_end+0xfffd35a0>
   455f8:	89000017 	ldw	r4,0(r17)
   455fc:	183ee83a 	callr	r3
   45600:	003fef06 	br	455c0 <__alt_data_end+0xfffd35c0>
   45604:	98800017 	ldw	r2,0(r19)
   45608:	982b883a 	mov	r21,r19
   4560c:	1027883a 	mov	r19,r2
   45610:	983fb61e 	bne	r19,zero,454ec <__alt_data_end+0xfffd34ec>
   45614:	003fd106 	br	4555c <__alt_data_end+0xfffd355c>
   45618:	0005883a 	mov	r2,zero
   4561c:	003ffa06 	br	45608 <__alt_data_end+0xfffd3608>

00045620 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45620:	defffd04 	addi	sp,sp,-12
   45624:	df000215 	stw	fp,8(sp)
   45628:	df000204 	addi	fp,sp,8
   4562c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45630:	0001883a 	nop
   45634:	e0bfff17 	ldw	r2,-4(fp)
   45638:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4563c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45640:	10000226 	beq	r2,zero,4564c <_exit+0x2c>
    ALT_SIM_FAIL();
   45644:	002af070 	cmpltui	zero,zero,43969
   45648:	00000106 	br	45650 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4564c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45650:	003fff06 	br	45650 <__alt_data_end+0xfffd3650>
